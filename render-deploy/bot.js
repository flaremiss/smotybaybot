const fs = require('fs-extra');
const path = require('path');
const TelegramBot = require('node-telegram-bot-api');
const express = require('express');

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è Render
const config = {
  botToken: process.env.BOT_TOKEN,
  port: process.env.PORT || 3000,
  adminChatId: process.env.ADMIN_CHAT_ID,
  // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ config.js
  marketBot: {
    requiredChannels: process.env.REQUIRED_CHANNELS ? process.env.REQUIRED_CHANNELS.split(',') : [],
    sponsorTitles: process.env.SPONSOR_TITLES ? process.env.SPONSOR_TITLES.split(',') : ['–º–æ–π –∫–∞–Ω–∞–ª', '—Ç–≤–æ–π –∫–∞–Ω–∞–ª']
  }
};

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
if (!config.botToken) {
  console.error('‚ùå BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!');
  process.exit(1);
}

console.log('üöÄ –ó–∞–ø—É—Å–∫ Shomy Bay Bot (Render Full Version)');
console.log('üì± Bot Token:', config.botToken ? '‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω' : '‚ùå –ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
console.log('üë§ Admin Chat ID:', config.adminChatId);

// –°–æ–∑–¥–∞–µ–º –±–æ—Ç–∞
const bot = new TelegramBot(config.botToken, { 
  polling: true // –ò—Å–ø–æ–ª—å–∑—É–µ–º polling –¥–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã
});

// Express —Å–µ—Ä–≤–µ—Ä –¥–ª—è webhook
const app = express();
app.use(express.json());

// –ü—É—Ç–∏ –∫ –¥–∞–Ω–Ω—ã–º (–≤ –ø–∞–º—è—Ç–∏ –¥–ª—è Render)
let users = {};
let listings = [];
let blockedUsers = [];

// –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –¥–∞–Ω–Ω—ã–º–∏
async function loadData() {
  try {
    console.log('üìä –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ...');
    users = {};
    listings = [];
    blockedUsers = [];
    console.log('‚úÖ –î–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã');
  } catch (error) {
    console.log('‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö:', error.message);
  }
}

async function saveData() {
  try {
    console.log('üíæ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –ø–∞–º—è—Ç–∏');
  } catch (error) {
    console.log('‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö:', error.message);
  }
}

// –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
async function readBlockedUsers() {
  return blockedUsers;
}

async function isUserBlocked(userId) {
  return blockedUsers.includes(String(userId));
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ—Ö–æ–∂–µ—Å—Ç–∏ —Å–ª–æ–≤ (—É—á–∏—Ç—ã–≤–∞–µ—Ç –æ–ø–µ—á–∞—Ç–∫–∏)
function isSimilar(str1, str2) {
  if (!str1 || !str2) return false;
  
  // –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã –∏ –ø—Ä–∏–≤–æ–¥–∏–º –∫ –Ω–∏–∂–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É
  str1 = str1.toLowerCase().trim();
  str2 = str2.toLowerCase().trim();
  
  // –¢–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
  if (str1 === str2) return true;
  
  // –û–¥–Ω–æ —Å–ª–æ–≤–æ —Å–æ–¥–µ—Ä–∂–∏—Ç –¥—Ä—É–≥–æ–µ
  if (str1.includes(str2) || str2.includes(str1)) return true;
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –õ–µ–≤–µ–Ω—à—Ç–µ–π–Ω–∞ –¥–ª—è –∫–æ—Ä–æ—Ç–∫–∏—Ö —Å–ª–æ–≤
  if (str1.length <= 15 && str2.length <= 15) {
    const distance = levenshteinDistance(str1, str2);
    const maxLength = Math.max(str1.length, str2.length);
    const similarity = 1 - (distance / maxLength);
    
    // –ï—Å–ª–∏ –ø–æ—Ö–æ–∂–µ—Å—Ç—å –±–æ–ª—å—à–µ 70%, —Å—á–∏—Ç–∞–µ–º –ø–æ—Ö–æ–∂–∏–º–∏
    return similarity > 0.7;
  }
  
  return false;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã—á–∏—Å–ª–µ–Ω–∏—è —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è –õ–µ–≤–µ–Ω—à—Ç–µ–π–Ω–∞
function levenshteinDistance(str1, str2) {
  const matrix = [];
  
  for (let i = 0; i <= str2.length; i++) {
    matrix[i] = [i];
  }
  
  for (let j = 0; j <= str1.length; j++) {
    matrix[0][j] = j;
  }
  
  for (let i = 1; i <= str2.length; i++) {
    for (let j = 1; j <= str1.length; j++) {
      if (str2.charAt(i - 1) === str1.charAt(j - 1)) {
        matrix[i][j] = matrix[i - 1][j - 1];
      } else {
        matrix[i][j] = Math.min(
          matrix[i - 1][j - 1] + 1, // –∑–∞–º–µ–Ω–∞
          matrix[i][j - 1] + 1,     // –≤—Å—Ç–∞–≤–∫–∞
          matrix[i - 1][j] + 1      // —É–¥–∞–ª–µ–Ω–∏–µ
        );
      }
    }
  }
  
  return matrix[str2.length][str1.length];
}

// –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
function mainMenuKeyboard() {
  return {
    reply_markup: {
      keyboard: [
        [{ text: 'üõí –ö—É–ø–∏—Ç—å' }, { text: 'üí∞ –ü—Ä–æ–¥–∞—Ç—å' }],
        [{ text: 'üîç –ü–æ–∏—Å–∫' }, { text: 'üìã –ú–æ–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è' }],
        [{ text: 'üíé Platinum' }]
      ],
      resize_keyboard: true
    }
  };
}

function subscriptionKeyboard() {
  const titles = config.marketBot.sponsorTitles || ['–º–æ–π –∫–∞–Ω–∞–ª', '—Ç–≤–æ–π –∫–∞–Ω–∞–ª'];
  const channels = config.marketBot.requiredChannels || [];
  const buttons = channels.map((ch, idx) => [{ text: titles[idx] || ch, url: `https://t.me/${ch.replace('@','')}` }]);
  return {
    reply_markup: {
      inline_keyboard: [
        ...buttons,
        [{ text: '‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫–∏', callback_data: 'check_subs' }]
      ]
    }
  };
}

async function isUserSubscribed(bot, userId) {
  const channels = config.marketBot.requiredChannels || [];
  if (channels.length === 0) return true;
  try {
    for (const ch of channels) {
      const res = await bot.getChatMember(ch, userId);
      const status = res && res.status ? res.status : 'left';
      if (['left', 'kicked', 'restricted'].includes(status)) return false;
    }
    return true;
  } catch (_) {
    return false;
  }
}

function listingKeyboard(listingId) {
  return {
    reply_markup: {
      inline_keyboard: [
        [
          { text: '‚úÖ –î–∞', callback_data: `l_yes:${listingId}` },
          { text: '‚ùå –ù–µ—Ç', callback_data: `l_no:${listingId}` },
          { text: '‚öôÔ∏è –ü–∞—Ä–∞–º–µ—Ç—Ä—ã', callback_data: `l_params:${listingId}` }
        ]
      ]
    }
  };
}

function removeReplyKeyboard() {
  return { reply_markup: { remove_keyboard: true } };
}

async function hideReplyKeyboard(bot, chatId) {
  try {
    await bot.sendMessage(chatId, '\u200B', { reply_markup: { remove_keyboard: true } });
  } catch (_) {}
}

function formatListingCaption(listing, isPlatinum = false) {
  const parts = [];
  
  // –î–æ–±–∞–≤–ª—è–µ–º –∑–Ω–∞—á–æ–∫ –ø–ª–∞—Ç–∏–Ω—ã –≤ –Ω–∞—á–∞–ª–æ, –µ—Å–ª–∏ –µ—Å—Ç—å
  if (isPlatinum) {
    parts.push('üíé Platinum');
  }
  
  // –¢–∏–ø –æ–±—ä—è–≤–ª–µ–Ω–∏—è (–ö—É–ø–ª—é/–ü—Ä–æ–¥–∞–º)
  if (listing.type === 'seek') {
    parts.push('üîç –ö—É–ø–ª—é');
  } else {
    parts.push('üí∞ –ü—Ä–æ–¥–∞–º');
  }
  
  // –ù–∞–∑–≤–∞–Ω–∏–µ
  if (listing.title) parts.push(String(listing.title));
  
  // –†–∞–∑–º–µ—Ä (–µ—Å–ª–∏ –µ—Å—Ç—å)
  if (listing.size) parts.push(`–†–∞–∑–º–µ—Ä: ${String(listing.size)}`);
  
  // –¶–µ–Ω–∞
  if (listing.price) {
    parts.push(`–¶–µ–Ω–∞: ${String(listing.price)}‚ÇΩ`);
  }
  
  // –°—Ç–∏–ª—å
  if (listing.style) parts.push(`–°—Ç–∏–ª—å: ${String(listing.style)}`);
  
  // –ü–æ–ª
  if (listing.gender) parts.push(`–ü–æ–ª: ${String(listing.gender)}`);
  
  // –û–ø–∏—Å–∞–Ω–∏–µ
  if (listing.description) parts.push(String(listing.description));
  
  return parts.join('\n');
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start
bot.onText(/^\/start/, async (msg) => {
  const chatId = msg.chat.id;
  const userId = msg.from.id;
  
  console.log(`üë§ –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${userId} (@${msg.from.username || '–±–µ–∑ username'})`);
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫–∏
  const isSubscribed = await isUserSubscribed(bot, userId);
  if (!isSubscribed) {
    await bot.sendMessage(chatId, 
      'üì¢ **–ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª—ã –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞:**\n\n' +
      '–î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –±–æ—Ç—É –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –Ω–∞—à–∏ –∫–∞–Ω–∞–ª—ã.',
      { 
        parse_mode: 'Markdown',
        ...subscriptionKeyboard()
      }
    );
    return;
  }
  
  users[userId] = {
    profile: {
      username: msg.from.username || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ',
      firstName: msg.from.first_name || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'
    },
    platinum: false,
    createdAt: new Date().toISOString()
  };
  
  const welcome = `ü§ñ **Shomy Bay Bot** (Render Version)\n\n` +
    `–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–∞–º—ã–π —É–º–Ω—ã–π –±–æ—Ç –ø–æ –ø–æ–∫—É–ø–∫–µ –∏ –ø—Ä–æ–¥–∞–∂–µ –æ–¥–µ–∂–¥—ã!\n\n` +
    `‚ú® **–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:**\n` +
    `‚Ä¢ üîç –ü–æ–∏—Å–∫ –∏ —Ñ–∏–ª—å—Ç—Ä—ã\n` +
    `‚Ä¢ üí∞ –ü—Ä–æ–¥–∞–∂–∞ —Ç–æ–≤–∞—Ä–æ–≤\n` +
    `‚Ä¢ üõí –ü–æ–∫—É–ø–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤\n` +
    `‚Ä¢ üíé Platinum –ø—Ä–∏–≤–∏–ª–µ–≥–∏–∏\n\n` +
    `–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:`;
  
  await bot.sendMessage(chatId, welcome, { 
    parse_mode: 'Markdown',
    ...mainMenuKeyboard()
  });
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
bot.on('message', async (msg) => {
  const chatId = msg.chat.id;
  const userId = msg.from.id;
  const text = msg.text;
  
  if (!text) return;
  
  console.log(`üì® –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç ${userId}: ${text}`);
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
  if (await isUserBlocked(userId)) {
    await bot.sendMessage(chatId, '‚ùå –í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –∏ –Ω–µ –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞.');
    return;
  }
  
  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–ª–∞–≤–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫
  if (text === 'üõí –ö—É–ø–∏—Ç—å') {
    await showBuyMenu(bot, chatId);
    return;
  }
  
  if (text === 'üí∞ –ü—Ä–æ–¥–∞—Ç—å') {
    await startSellProcess(bot, chatId, userId);
    return;
  }
  
  if (text === 'üîç –ü–æ–∏—Å–∫') {
    await showSearchMenu(bot, chatId);
    return;
  }
  
  if (text === 'üìã –ú–æ–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è') {
    await showMyListings(bot, chatId, userId);
    return;
  }
  
  if (text === 'üíé Platinum') {
    await showPlatinumInfo(bot, chatId);
    return;
  }
  
  // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–µ—Å—Å–∏–π
  if (users[userId] && users[userId].session) {
    const session = users[userId].session;
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–¥–∞–∂–∏
    if (session.flow === 'sell') {
      await handleSellSession(bot, msg, session, userId);
      return;
    }
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–∏—Å–∫–∞
    if (session.flow === 'search') {
      await handleSearchSession(bot, msg, session, userId);
      return;
    }
  }
  
  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–∏—Å–∫–æ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
  if (text.length > 2) {
    await handleSearchQuery(bot, chatId, text);
  }
});

// –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –º–µ–Ω—é
async function showBuyMenu(bot, chatId) {
  await bot.sendMessage(chatId, 
    'üõí **–ü–æ–∫—É–ø–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤**\n\n' +
    '–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –ø–æ–∏—Å–∫–∞:',
    {
      reply_markup: {
        inline_keyboard: [
          [{ text: 'üì∞ –õ–µ–Ω—Ç–∞', callback_data: 'buy_feed' }],
          [{ text: 'üîç –ü–æ–∏—Å–∫', callback_data: 'buy_search' }]
        ]
      }
    }
  );
}

async function startSellProcess(bot, chatId, userId) {
  users[userId] = users[userId] || {};
  users[userId].session = { flow: 'sell', step: 'title', temp: {} };
  await saveData();
  
  await bot.sendMessage(chatId, 
    'üí∞ **–°–æ–∑–¥–∞–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è**\n\n' +
    'üìù **–®–∞–≥ 1/6: –ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞**\n\n' +
    '–ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞—à–µ–≥–æ —Ç–æ–≤–∞—Ä–∞:\n' +
    '–ù–∞–ø—Ä–∏–º–µ—Ä: "Nike Air Force 1, —Ä–∞–∑–º–µ—Ä 42"',
    { parse_mode: 'Markdown' }
  );
}

async function showSearchMenu(bot, chatId) {
  await bot.sendMessage(chatId, 
    'üîç **–ü–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–æ–≤**\n\n' +
    '–í–≤–µ–¥–∏—Ç–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞:\n' +
    '–ù–∞–ø—Ä–∏–º–µ—Ä: "–∫—Ä–æ—Å—Å–æ–≤–∫–∏", "–¥–∂–∏–Ω—Å—ã", "–∫—É—Ä—Ç–∫–∞"',
    { parse_mode: 'Markdown' }
  );
}

async function showMyListings(bot, chatId, userId) {
  const userListings = listings.filter(l => l.userId === userId);
  if (userListings.length === 0) {
    await bot.sendMessage(chatId, '–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏–π.', mainMenuKeyboard());
    return;
  }
  
  let message = 'üìã **–í–∞—à–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è:**\n\n';
  userListings.forEach((listing, index) => {
    message += `${index + 1}. ${listing.title || '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'}\n`;
    if (listing.price) message += `üí∞ ${listing.price}‚ÇΩ\n`;
    if (listing.style) message += `üé® ${listing.style}\n`;
    message += '\n';
  });
  
  await bot.sendMessage(chatId, message, { parse_mode: 'Markdown' });
}

async function showPlatinumInfo(bot, chatId) {
  await bot.sendMessage(chatId, 
    'üíé **Platinum –ø—Ä–∏–≤–∏–ª–µ–≥–∏–∏**\n\n' +
    '‚ú® **–ß—Ç–æ –¥–∞–µ—Ç Platinum:**\n' +
    '‚Ä¢ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–π –ø–æ–∫–∞–∑ –æ–±—ä—è–≤–ª–µ–Ω–∏–π +30%\n' +
    '‚Ä¢ –ë–æ–ª—å—à–µ –ª—é–¥–µ–π —É–≤–∏–¥—è—Ç –≤–∞—à–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è\n' +
    '‚Ä¢ –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –∑–Ω–∞—á–æ–∫ üíé Platinum\n\n' +
    'üí∞ **–°—Ç–æ–∏–º–æ—Å—Ç—å:** 300‚ÇΩ\n' +
    'üåê **–û–ø–ª–∞—Ç–∞:** –ß–µ—Ä–µ–∑ –ø–∞–Ω–µ–ª—å –º–æ–¥–µ—Ä–∞—Ü–∏–∏\n' +
    `üîó **–°—Å—ã–ª–∫–∞:** ${config.moderationUrl}`,
    { parse_mode: 'Markdown' }
  );
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–µ—Å—Å–∏–π –ø—Ä–æ–¥–∞–∂–∏
async function handleSellSession(bot, msg, session, userId) {
  const chatId = msg.chat.id;
  const text = msg.text;
  
  if (session.step === 'title') {
    users[userId].session.temp.title = text;
    users[userId].session.step = 'price';
    await saveData();
    
    await bot.sendMessage(chatId, 
      'üí∞ **–°–æ–∑–¥–∞–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è**\n\n' +
      'üìù **–®–∞–≥ 2/6: –¶–µ–Ω–∞**\n\n' +
      '–£–∫–∞–∂–∏—Ç–µ —Ü–µ–Ω—É –≤ —Ä—É–±–ª—è—Ö:\n' +
      '–ù–∞–ø—Ä–∏–º–µ—Ä: "5000" –∏–ª–∏ "5000‚ÇΩ"',
      { parse_mode: 'Markdown' }
    );
    return;
  }
  
  if (session.step === 'price') {
    const price = text.replace(/[^\d]/g, '');
    if (!price || isNaN(price)) {
      await bot.sendMessage(chatId, '‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Ü–µ–Ω—É (—Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã)');
      return;
    }
    
    users[userId].session.temp.price = price;
    users[userId].session.step = 'style';
    await saveData();
    
    await bot.sendMessage(chatId, 
      'üí∞ **–°–æ–∑–¥–∞–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è**\n\n' +
      'üìù **–®–∞–≥ 3/6: –°—Ç–∏–ª—å**\n\n' +
      '–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∏–ª—å –æ–¥–µ–∂–¥—ã:\n' +
      '‚Ä¢ –ê—Ä—Ö–∏–≤\n' +
      '‚Ä¢ –ö–µ–∂—É–∞–ª\n' +
      '‚Ä¢ –°—Ç—Ä–∏—Ç–≤–∏—Ä\n' +
      '‚Ä¢ –°–ø–æ—Ä—Ç\n' +
      '‚Ä¢ –î—Ä—É–≥–æ–π',
      { parse_mode: 'Markdown' }
    );
    return;
  }
  
  if (session.step === 'style') {
    users[userId].session.temp.style = text;
    users[userId].session.step = 'gender';
    await saveData();
    
    await bot.sendMessage(chatId, 
      'üí∞ **–°–æ–∑–¥–∞–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è**\n\n' +
      'üìù **–®–∞–≥ 4/6: –ü–æ–ª**\n\n' +
      '–î–ª—è –∫–æ–≥–æ –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω–∞ –æ–¥–µ–∂–¥–∞:\n' +
      '‚Ä¢ –ú—É–∂—Å–∫–æ–π\n' +
      '‚Ä¢ –ñ–µ–Ω—Å–∫–∏–π\n' +
      '‚Ä¢ –£–Ω–∏—Å–µ–∫—Å',
      { parse_mode: 'Markdown' }
    );
    return;
  }
  
  if (session.step === 'gender') {
    users[userId].session.temp.gender = text;
    users[userId].session.step = 'description';
    await saveData();
    
    await bot.sendMessage(chatId, 
      'üí∞ **–°–æ–∑–¥–∞–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è**\n\n' +
      'üìù **–®–∞–≥ 5/6: –û–ø–∏—Å–∞–Ω–∏–µ**\n\n' +
      '–û–ø–∏—à–∏—Ç–µ —Ç–æ–≤–∞—Ä –ø–æ–¥—Ä–æ–±–Ω–æ:\n' +
      '‚Ä¢ –°–æ—Å—Ç–æ—è–Ω–∏–µ\n' +
      '‚Ä¢ –†–∞–∑–º–µ—Ä\n' +
      '‚Ä¢ –ë—Ä–µ–Ω–¥\n' +
      '‚Ä¢ –û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏',
      { parse_mode: 'Markdown' }
    );
    return;
  }
  
  if (session.step === 'description') {
    users[userId].session.temp.description = text;
    users[userId].session.step = 'photo';
    await saveData();
    
    await bot.sendMessage(chatId, 
      'üí∞ **–°–æ–∑–¥–∞–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è**\n\n' +
      'üìù **–®–∞–≥ 6/6: –§–æ—Ç–æ**\n\n' +
      '–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ —Ç–æ–≤–∞—Ä–∞ –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ "–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å"',
      { parse_mode: 'Markdown' }
    );
    return;
  }
  
  if (session.step === 'photo') {
    if (text.toLowerCase() === '–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å') {
      // –°–æ–∑–¥–∞–µ–º –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –±–µ–∑ —Ñ–æ—Ç–æ
      const listing = {
        id: Date.now().toString(),
        userId: userId,
        title: users[userId].session.temp.title,
        price: users[userId].session.temp.price,
        style: users[userId].session.temp.style,
        gender: users[userId].session.temp.gender,
        description: users[userId].session.temp.description,
        createdAt: new Date().toISOString(),
        approved: true
      };
      
      listings.push(listing);
      users[userId].session = null;
      await saveData();
      
      await bot.sendMessage(chatId, 
        '‚úÖ **–û–±—ä—è–≤–ª–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ!**\n\n' +
        `üìù **${listing.title}**\n` +
        `üí∞ **${listing.price}‚ÇΩ**\n` +
        `üé® **${listing.style}**\n` +
        `üë§ **${listing.gender}**\n\n` +
        '–í–∞—à–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –ª–µ–Ω—Ç—É!',
        { parse_mode: 'Markdown', ...mainMenuKeyboard() }
      );
      return;
    }
  }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–∏—Å–∫–æ–≤—ã—Ö —Å–µ—Å—Å–∏–π
async function handleSearchSession(bot, msg, session, userId) {
  // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É –ø–æ–∏—Å–∫–æ–≤—ã—Ö —Å–µ—Å—Å–∏–π
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–∏—Å–∫–æ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
async function handleSearchQuery(bot, chatId, text) {
  const searchResults = listings.filter(listing => {
    const searchText = text.toLowerCase();
    const title = (listing.title || '').toLowerCase();
    const description = (listing.description || '').toLowerCase();
    return title.includes(searchText) || description.includes(searchText);
  });
  
  if (searchResults.length > 0) {
    let message = `üîç **–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –ø–æ –∑–∞–ø—Ä–æ—Å—É "${text}":**\n\n`;
    searchResults.slice(0, 5).forEach((listing, index) => {
      message += `${index + 1}. ${listing.title || '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'}\n`;
      if (listing.price) message += `üí∞ ${listing.price}‚ÇΩ\n`;
      if (listing.style) message += `üé® ${listing.style}\n`;
      message += '\n';
    });
    
    if (searchResults.length > 5) {
      message += `... –∏ –µ—â–µ ${searchResults.length - 5} –æ–±—ä—è–≤–ª–µ–Ω–∏–π`;
    }
    
    await bot.sendMessage(chatId, message, { parse_mode: 'Markdown' });
  } else {
    await bot.sendMessage(chatId, 
      `üîç –ü–æ –∑–∞–ø—Ä–æ—Å—É "${text}" –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.\n\n` +
      '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–∏–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞.',
      mainMenuKeyboard()
    );
  }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ callback –∑–∞–ø—Ä–æ—Å–æ–≤
bot.on('callback_query', async (query) => {
  const chatId = query.message.chat.id;
  const userId = query.from.id;
  const data = query.data;
  
  console.log(`üîò Callback –æ—Ç ${userId}: ${data}`);
  
  try {
    await bot.answerCallbackQuery(query.id);
  } catch (error) {
    console.log('‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ callback:', error.message);
  }
  
  if (data === 'check_subs') {
    const isSubscribed = await isUserSubscribed(bot, userId);
    if (isSubscribed) {
      await bot.sendMessage(chatId, 
        '‚úÖ **–û—Ç–ª–∏—á–Ω–æ!** –í—ã –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –≤—Å–µ –∫–∞–Ω–∞–ª—ã.\n\n' +
        '–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º!',
        { parse_mode: 'Markdown', ...mainMenuKeyboard() }
      );
    } else {
      await bot.sendMessage(chatId, 
        '‚ùå **–ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –≤—Å–µ –∫–∞–Ω–∞–ª—ã** –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –±–æ—Ç—É.',
        { parse_mode: 'Markdown', ...subscriptionKeyboard() }
      );
    }
    return;
  }
  
  if (data === 'buy_feed') {
    const availableListings = listings.filter(l => l.approved !== false);
    if (availableListings.length === 0) {
      await bot.sendMessage(chatId, '–õ–µ–Ω—Ç–∞ –ø—É—Å—Ç–∞. –û–±—ä—è–≤–ª–µ–Ω–∏–π –ø–æ–∫–∞ –Ω–µ—Ç.', mainMenuKeyboard());
      return;
    }
    
    const randomListing = availableListings[Math.floor(Math.random() * availableListings.length)];
    let message = `üì∞ **–û–±—ä—è–≤–ª–µ–Ω–∏–µ –∏–∑ –ª–µ–Ω—Ç—ã:**\n\n`;
    message += `üìù **${randomListing.title || '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'}**\n`;
    if (randomListing.price) message += `üí∞ **–¶–µ–Ω–∞:** ${randomListing.price}‚ÇΩ\n`;
    if (randomListing.style) message += `üé® **–°—Ç–∏–ª—å:** ${randomListing.style}\n`;
    if (randomListing.description) message += `üìÑ **–û–ø–∏—Å–∞–Ω–∏–µ:** ${randomListing.description}\n`;
    
    await bot.sendMessage(chatId, message, { parse_mode: 'Markdown' });
    return;
  }
  
  if (data === 'buy_search') {
    await bot.sendMessage(chatId, 
      'üîç **–ü–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–æ–≤**\n\n' +
      '–í–≤–µ–¥–∏—Ç–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞:\n' +
      '–ù–∞–ø—Ä–∏–º–µ—Ä: "–∫—Ä–æ—Å—Å–æ–≤–∫–∏", "–¥–∂–∏–Ω—Å—ã", "–∫—É—Ä—Ç–∫–∞"',
      { parse_mode: 'Markdown' }
    );
    return;
  }
});

// –ü—Ä–æ—Å—Ç–æ–π endpoint –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
app.post('/webhook', (req, res) => {
  res.status(200).send('Bot is running');
});

// –°—Ç–∞—Ç—É—Å endpoint
app.get('/status', (req, res) => {
  res.json({
    status: 'online',
    bot: 'running',
    users: Object.keys(users).length,
    listings: listings.length,
    uptime: process.uptime(),
    memory: process.memoryUsage(),
    version: '2.0.0'
  });
});

// –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
app.get('/', (req, res) => {
  res.send(`
    <h1>ü§ñ Shomy Bay Bot</h1>
    <p><strong>–°—Ç–∞—Ç—É—Å:</strong> –û–Ω–ª–∞–π–Ω</p>
    <p><strong>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:</strong> ${Object.keys(users).length}</p>
    <p><strong>–û–±—ä—è–≤–ª–µ–Ω–∏—è:</strong> ${listings.length}</p>
    <p><strong>–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã:</strong> ${Math.floor(process.uptime())} —Å–µ–∫</p>
    <hr>
    <p><strong>–°—Ç–∞—Ç—É—Å API:</strong> <a href="/status">/status</a></p>
  `);
});

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
async function start() {
  try {
    await loadData();
    
    console.log('üîÑ –ó–∞–ø—É—Å–∫–∞–µ–º polling...');
    bot.startPolling();
    console.log('‚úÖ Polling –∑–∞–ø—É—â–µ–Ω');
    
    app.listen(config.port, () => {
      console.log(`üöÄ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${config.port}`);
      console.log(`üåê –°—Ç–∞—Ç—É—Å: http://localhost:${config.port}/status`);
      console.log(`üì± Bot Token: ${config.botToken ? '‚úÖ' : '‚ùå'}`);
      console.log(`üë§ Admin Chat: ${config.adminChatId}`);
    });
    
    if (config.adminChatId) {
      try {
        await bot.sendMessage(config.adminChatId, 
          'üöÄ **Shomy Bay Bot –∑–∞–ø—É—â–µ–Ω!**\n\n' +
          `üåê **–°—Ç–∞—Ç—É—Å:** http://localhost:${config.port}/status\n` +
          `‚è∞ **–í—Ä–µ–º—è:** ${new Date().toLocaleString('ru-RU')}`,
          { parse_mode: 'Markdown' }
        );
      } catch (error) {
        console.log('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É:', error.message);
      }
    }
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞:', error);
    process.exit(1);
  }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
process.on('SIGINT', async () => {
  console.log('\nüõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è...');
  await saveData();
  console.log('‚úÖ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã');
  process.exit(0);
});

process.on('SIGTERM', async () => {
  console.log('\nüõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è...');
  await saveData();
  console.log('‚úÖ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã');
  process.exit(0);
});

// –ó–∞–ø—É—Å–∫
start();
