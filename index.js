const { firefox } = require('playwright');
const fs = require('fs-extra');
const path = require('path');
const https = require('https');
const config = require('./config');
const { TelegramClient } = require('telegram');
const { StringSession } = require('telegram/sessions');
const input = require('input');
const TelegramBot = require('node-telegram-bot-api');

class MellstroyLootScript {
  constructor() {
    this.browsers = [];
    this.pages = [];
    this.telegramClient = null;
    this.lastMessageId = 0;
    this.channelId = null; // –î–æ–±–∞–≤–ª—è–µ–º ID –∫–∞–Ω–∞–ª–∞
    this.telegramBot = null; // Telegram –±–æ—Ç –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
  }

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram –∫–ª–∏–µ–Ω—Ç–∞
  async initTelegram() {
    try {
      console.log('üîß –û—Ç–ª–∞–¥–∫–∞: –ù–∞—á–∏–Ω–∞–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é Telegram...');
      console.log('üîß –û—Ç–ª–∞–¥–∫–∞: API ID:', config.telegram.apiId);
      console.log('üîß –û—Ç–ª–∞–¥–∫–∞: API Hash:', config.telegram.apiHash ? '—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω' : '–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
      console.log('üîß –û—Ç–ª–∞–¥–∫–∞: –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:', config.telegram.phoneNumber);
      console.log('üîß –û—Ç–ª–∞–¥–∫–∞: –ö–∞–Ω–∞–ª:', config.telegram.channelUsername);

      // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—É—é —Å–µ—Å—Å–∏—é –∏–∑ —Ñ–∞–π–ª–∞
      const sessionPath = path.resolve('./telegram_session.txt');
      let sessionString = config.telegram.sessionString;
      
      try {
        if (await fs.pathExists(sessionPath)) {
          sessionString = await fs.readFile(sessionPath, 'utf8');
          console.log('üîß –û—Ç–ª–∞–¥–∫–∞: –ó–∞–≥—Ä—É–∂–µ–Ω–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–∞—è —Å–µ—Å—Å–∏—è –∏–∑ —Ñ–∞–π–ª–∞');
        }
      } catch (error) {
        console.log('üîß –û—Ç–ª–∞–¥–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–µ—Å—Å–∏—é –∏–∑ —Ñ–∞–π–ª–∞:', error.message);
      }

      const stringSession = new StringSession(sessionString);
      console.log('üîß –û—Ç–ª–∞–¥–∫–∞: StringSession —Å–æ–∑–¥–∞–Ω');
      
      this.telegramClient = new TelegramClient(stringSession, parseInt(config.telegram.apiId), config.telegram.apiHash, {
        connectionRetries: 5,
      });
      console.log('üîß –û—Ç–ª–∞–¥–∫–∞: TelegramClient —Å–æ–∑–¥–∞–Ω');

      console.log('üîß –û—Ç–ª–∞–¥–∫–∞: –ó–∞–ø—É—Å–∫–∞–µ–º –∫–ª–∏–µ–Ω—Ç...');
      await this.telegramClient.start({
        phoneNumber: config.telegram.phoneNumber,
        password: async () => await input.text('–ü–∞—Ä–æ–ª—å:'),
        phoneCode: async () => await input.text('–ö–æ–¥ –∏–∑ SMS:'),
        onError: (err) => console.log('–û—à–∏–±–∫–∞ Telegram:', err),
      });

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–µ—Å—Å–∏—é –≤ —Ñ–∞–π–ª –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
      const newSessionString = this.telegramClient.session.save();
      await fs.writeFile(sessionPath, newSessionString, 'utf8');
      console.log('üîß –û—Ç–ª–∞–¥–∫–∞: –°–µ—Å—Å–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ —Ñ–∞–π–ª telegram_session.txt');
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω—Ñ–∏–≥ —Å –Ω–æ–≤–æ–π —Å–µ—Å—Å–∏–µ–π
      config.telegram.sessionString = newSessionString;

      // –ü–æ–ª—É—á–∞–µ–º ID –∫–∞–Ω–∞–ª–∞ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ (–±–µ–∑ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π)
      try {
        const entity = await this.telegramClient.getEntity(config.telegram.channelUsername);
        this.channelId = entity.id.toString();
        console.log('üîß –û—Ç–ª–∞–¥–∫–∞: ID –∫–∞–Ω–∞–ª–∞:', this.channelId);
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π ID –∫–∞–∫ 0 - –±—É–¥–µ–º –ø–æ–ª—É—á–∞—Ç—å –≤—Å–µ –Ω–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        this.lastMessageId = 0;
        console.log('üîß –û—Ç–ª–∞–¥–∫–∞: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –ø–æ—Å–ª–µ–¥–Ω–∏–π ID —Å–æ–æ–±—â–µ–Ω–∏—è:', this.lastMessageId);
      } catch (error) {
        console.log('‚ö† –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–Ω–∞–ª–µ:', error.message);
      }

      console.log('‚úì Telegram –∫–ª–∏–µ–Ω—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω');
      return true;
    } catch (error) {
      if (error.message.includes('FloodWaitError')) {
        const waitTime = error.seconds || 60;
        console.log(`‚ö† Telegram –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –Ω–∞ ${waitTime} —Å–µ–∫—É–Ω–¥. –û–∂–∏–¥–∞–µ–º...`);
        
        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–∂–∏–¥–∞–Ω–∏–µ
        for (let i = waitTime; i > 0; i--) {
          process.stdout.write(`\r‚è∞ –û—Å—Ç–∞–ª–æ—Å—å ${i} —Å–µ–∫—É–Ω–¥...`);
          await new Promise(resolve => setTimeout(resolve, 1000));
        }
        console.log('\nüîÑ –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è...');
        
        // –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        try {
          await this.telegramClient.start({
            phoneNumber: config.telegram.phoneNumber,
            password: async () => await input.text('–ü–∞—Ä–æ–ª—å:'),
            phoneCode: async () => await input.text('–ö–æ–¥ –∏–∑ SMS:'),
            onError: (err) => console.log('–û—à–∏–±–∫–∞ Telegram:', err),
          });

          // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–µ—Å—Å–∏—é –≤ —Ñ–∞–π–ª
          const newSessionString = this.telegramClient.session.save();
          await fs.writeFile(path.resolve('./telegram_session.txt'), newSessionString, 'utf8');
          console.log('üîß –û—Ç–ª–∞–¥–∫–∞: –°–µ—Å—Å–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ —Ñ–∞–π–ª telegram_session.txt');
          
          config.telegram.sessionString = newSessionString;
          console.log('‚úì Telegram –∫–ª–∏–µ–Ω—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω –ø–æ—Å–ª–µ –æ–∂–∏–¥–∞–Ω–∏—è');
          return true;
        } catch (retryError) {
          console.log('‚ö† –û—à–∏–±–∫–∞ –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:', retryError.message);
          return false;
        }
      }
      console.log('‚ö† –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Telegram:', error.message);
      console.log('üîß –û—Ç–ª–∞–¥–∫–∞: –ü–æ–ª–Ω–∞—è –æ—à–∏–±–∫–∞:', error);
      return false;
    }
  }

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram –±–æ—Ç–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π)
  async initTelegramBot() {
    try {
      console.log('ü§ñ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram –±–æ—Ç–∞...');
      
      // –°–æ–∑–¥–∞–µ–º –±–æ—Ç–∞ –ë–ï–ó polling - —Ç–æ–ª—å–∫–æ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
      this.telegramBot = new TelegramBot(config.telegramBot.token, { polling: false });
      
      console.log('‚úì Telegram –±–æ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω (—Ç–æ–ª—å–∫–æ –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π)');
      return true;
    } catch (error) {
      console.log('‚ö† –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Telegram –±–æ—Ç–∞:', error.message);
      return false;
    }
  }

  // –û—Ç–ø—Ä–∞–≤–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ —Å–∏—Å—Ç–µ–º—ã
  async sendStatusMessage(chatId = null) {
    try {
      const targetChatId = chatId || config.telegramBot.chatId;
      const activeBrowsers = this.pages.length;
      const totalBrowsers = config.browserCount;
      const proxyInfo = `${config.proxy.server} (${config.proxy.username})`;
      
      const statusMessage = `üìä –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã mellstroy loot\n\n` +
        `üñ•Ô∏è –ë—Ä–∞—É–∑–µ—Ä—ã: ${activeBrowsers}/${totalBrowsers} –∞–∫—Ç–∏–≤–Ω—ã—Ö\n` +
        `üåê –ü—Ä–æ–∫—Å–∏: ${proxyInfo}\n` +
        `üì± Telegram: ${this.telegramClient ? '‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω' : '‚ùå –û—Ç–∫–ª—é—á–µ–Ω'}\n` +
        `ü§ñ –ë–æ—Ç: ${this.telegramBot ? '‚úÖ –ê–∫—Ç–∏–≤–µ–Ω' : '‚ùå –ù–µ–∞–∫—Ç–∏–≤–µ–Ω'}\n` +
        `‚è∞ –í—Ä–µ–º—è: ${new Date().toLocaleString('ru-RU')}\n\n` +
        `–ö–æ–º–∞–Ω–¥—ã:\n` +
        `/screen_1 - —Å–∫—Ä–∏–Ω—à–æ—Ç –ø—Ä–æ—Ñ–∏–ª—è 1\n` +
        `/screen_2 - —Å–∫—Ä–∏–Ω—à–æ—Ç –ø—Ä–æ—Ñ–∏–ª—è 2\n` +
        `/screen_3 - —Å–∫—Ä–∏–Ω—à–æ—Ç –ø—Ä–æ—Ñ–∏–ª—è 3\n` +
        `/screen_4 - —Å–∫—Ä–∏–Ω—à–æ—Ç –ø—Ä–æ—Ñ–∏–ª—è 4\n` +
        `/screen_5 - —Å–∫—Ä–∏–Ω—à–æ—Ç –ø—Ä–æ—Ñ–∏–ª—è 5\n` +
        `/status - —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã`;

      await this.telegramBot.sendMessage(targetChatId, statusMessage);
    } catch (error) {
      console.log('‚ö† –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å—Ç–∞—Ç—É—Å–∞:', error.message);
    }
  }

  // –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–æ—Ç–æ –ø—Ä–æ—Ñ–∏–ª—è
  async sendProfilePhoto(chatId = null, profileId) {
    try {
      const targetChatId = chatId || config.telegramBot.chatId;
      const profile = this.pages.find(p => p.profileId === profileId);
      
      if (!profile) {
        await this.telegramBot.sendMessage(targetChatId, `‚ùå –ü—Ä–æ—Ñ–∏–ª—å ${profileId} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
        return;
      }

      const { page } = profile;
      
      // –î–µ–ª–∞–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—ã
      const screenshot = await page.screenshot({ 
        type: 'png',
        fullPage: false,
        clip: { x: 0, y: 0, width: 1920, height: 1080 }
      });

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º —Ñ–æ—Ä–º–∞—Ç–æ–º
      await this.telegramBot.sendPhoto(targetChatId, screenshot, {
        caption: `üì∏ –ü—Ä–æ—Ñ–∏–ª—å ${profileId}\n‚è∞ ${new Date().toLocaleString('ru-RU')}`,
        filename: `profile_${profileId}_${Date.now()}.png`
      });
    } catch (error) {
      console.log(`‚ö† –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ –ø—Ä–æ—Ñ–∏–ª—è ${profileId}:`, error.message);
      const targetChatId = chatId || config.telegramBot.chatId;
      await this.telegramBot.sendMessage(targetChatId, `‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–æ—Ç–æ –ø—Ä–æ—Ñ–∏–ª—è ${profileId}`);
    }
  }

  // –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø—Ä–æ–º–æ–∫–æ–¥–∞
  async sendActivationNotification(profileId, promoCode, activationTime) {
    try {
      const message = `üéØ **–ü—Ä–æ–º–æ–∫–æ–¥ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!**\n\n` +
        `üë§ **–ü—Ä–æ—Ñ–∏–ª—å:** ${profileId}\n` +
        `üé´ **–ü—Ä–æ–º–æ–∫–æ–¥:** \`${promoCode}\`\n` +
        `‚è±Ô∏è **–í—Ä–µ–º—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏:** ${activationTime}\n` +
        `üìÖ **–î–∞—Ç–∞:** ${new Date().toLocaleString('ru-RU')}`;

      await this.telegramBot.sendMessage(config.telegramBot.chatId, message, { parse_mode: 'Markdown' });
    } catch (error) {
      console.log('‚ö† –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –∞–∫—Ç–∏–≤–∞—Ü–∏–∏:', error.message);
    }
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ –∫–∞–Ω–∞–ª–∞ –ë–ï–ó FLOOD (—Ç–æ–ª—å–∫–æ –¥–ª—è fallback)
  async getNewPromoCodes() {
    try {
      if (!this.telegramClient) {
        console.log('üîß –û—Ç–ª–∞–¥–∫–∞: Telegram –∫–ª–∏–µ–Ω—Ç –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω');
        return [];
      }

      // –ò—Å–ø–æ–ª—å–∑—É–µ–º getMessages —Å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º –ª–∏–º–∏—Ç–æ–º
      const messages = await this.telegramClient.getMessages(config.telegram.channelUsername, {
        limit: 1,
        minId: this.lastMessageId
      });

      const promoCodes = [];
      for (const message of messages) {
        if (message.id > this.lastMessageId) {
          this.lastMessageId = message.id;
          const text = message.message || '';
          
          console.log('üîß –û—Ç–ª–∞–¥–∫–∞: –ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:', message.id, text);
          
          // –ò—â–µ–º –ø—Ä–æ–º–æ–∫–æ–¥—ã - –æ—á–µ–Ω—å –≥–∏–±–∫–∏–π –ø–æ–∏—Å–∫
          const codeMatch = text.match(/\b[A-Za-z0-9]{4,30}\b/g);
          if (codeMatch) {
            console.log('üîß –û—Ç–ª–∞–¥–∫–∞: –ù–∞–π–¥–µ–Ω—ã –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–µ –∫–æ–¥—ã:', codeMatch);
            
            // –ë–µ—Ä–µ–º –≤—Å–µ –∫–æ–¥—ã –¥–ª–∏–Ω–æ–π –æ—Ç 6 —Å–∏–º–≤–æ–ª–æ–≤
            const validCodes = codeMatch.filter(code => code.length >= 6);
            
            if (validCodes.length > 0) {
              console.log('üéØ –ù–∞–π–¥–µ–Ω –ø—Ä–æ–º–æ–∫–æ–¥:', validCodes);
              promoCodes.push(...validCodes);
            }
          }
        }
      }

      return promoCodes;
    } catch (error) {
      if (error.message.includes('FloodWaitError')) {
        throw error; // –ü—Ä–æ–±—Ä–∞—Å—ã–≤–∞–µ–º flood error –Ω–∞–≤–µ—Ä—Ö
      }
      console.log('‚ö† –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤:', error.message);
      return [];
    }
  }

  // –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π –¥–ª—è –ø—Ä–æ—Ñ–∏–ª–µ–π
  async createProfileDirectories() {
    console.log(`–°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π –¥–ª—è ${config.browserCount} –ø—Ä–æ—Ñ–∏–ª–µ–π Firefox...`);
    
    for (let i = 1; i <= config.browserCount; i++) {
      const profilePath = path.resolve(`./firefox_profiles/profile_${i}`);
      await fs.ensureDir(profilePath);
      console.log(`–°–æ–∑–¥–∞–Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: ${profilePath}`);
    }
  }

  // –ó–∞–≥—Ä—É–∑–∫–∞ –∫—É–∫–∏ –∏–∑ —Ñ–∞–π–ª–∞
  async loadCookies(context, cookiesPath) {
    try {
      if (await fs.pathExists(cookiesPath)) {
        const cookiesData = await fs.readJson(cookiesPath);
        if (cookiesData && cookiesData.length > 0) {
          await context.addCookies(cookiesData);
          console.log(`‚úì –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${cookiesData.length} –∫—É–∫–∏ –∏–∑ ${path.basename(cookiesPath)}`);
        }
      }
    } catch (error) {
      console.log(`‚ö† –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫—É–∫–∏: ${error.message}`);
    }
  }

  // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫—É–∫–∏ –≤ —Ñ–∞–π–ª
  async saveCookies(context, cookiesPath, page = null) {
    try {
      let cookies = [];
      
      // –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –∫—É–∫–∏ —á–µ—Ä–µ–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç
      if (context && !context._closed) {
        try {
          cookies = await context.cookies();
        } catch (error) {
          console.log(`‚ö† –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫—É–∫–∏ —á–µ—Ä–µ–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç: ${error.message}`);
        }
      }
      
      // –ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å —á–µ—Ä–µ–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç, –ø—Ä–æ–±—É–µ–º —á–µ—Ä–µ–∑ —Å—Ç—Ä–∞–Ω–∏—Ü—É
      if (cookies.length === 0 && page && !page.isClosed()) {
        try {
          cookies = await page.context().cookies();
        } catch (error) {
          console.log(`‚ö† –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫—É–∫–∏ —á–µ—Ä–µ–∑ —Å—Ç—Ä–∞–Ω–∏—Ü—É: ${error.message}`);
        }
      }
      
      if (cookies && cookies.length > 0) {
        // –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        await fs.ensureDir(path.dirname(cookiesPath));
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫—É–∫–∏ —Å —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º
        await fs.writeJson(cookiesPath, cookies, { spaces: 2 });
        console.log(`‚úì –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ ${cookies.length} –∫—É–∫–∏ –≤ ${path.basename(cookiesPath)}`);
      } else {
        console.log(`‚ö† –ù–µ—Ç –∫—É–∫–∏ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ ${path.basename(cookiesPath)}`);
      }
    } catch (error) {
      console.log(`‚ö† –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫—É–∫–∏: ${error.message}`);
    }
  }

  // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ stealth —Ä–µ–∂–∏–º–∞ –¥–ª—è –æ–±—Ö–æ–¥–∞ –¥–µ—Ç–µ–∫—Ü–∏–∏
  async setupStealthMode(page, profile) {
    try {
      // –£–¥–∞–ª–µ–Ω–∏–µ webdriver —Å–≤–æ–π—Å—Ç–≤ —Å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º–∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞–º–∏
      await page.addInitScript((profileData) => {
        // –£–¥–∞–ª—è–µ–º webdriver —Ñ–ª–∞–≥–∏
        Object.defineProperty(navigator, 'webdriver', {
          get: () => undefined,
        });
        
        // –£–¥–∞–ª—è–µ–º automation —Ñ–ª–∞–≥–∏
        delete window.navigator.__proto__.webdriver;
        
        // –ú–∞—Å–∫–∏—Ä—É–µ–º chrome runtime
        if (window.chrome && window.chrome.runtime) {
          delete window.chrome.runtime.onConnect;
          delete window.chrome.runtime.onMessage;
        }
        
        // –ú–∞—Å–∫–∏—Ä—É–µ–º permissions API
        const originalQuery = window.navigator.permissions.query;
        window.navigator.permissions.query = (parameters) => (
          parameters.name === 'notifications' ?
            Promise.resolve({ state: Notification.permission }) :
            originalQuery(parameters)
        );
        
        // –ú–∞—Å–∫–∏—Ä—É–µ–º plugins
        Object.defineProperty(navigator, 'plugins', {
          get: () => [1, 2, 3, 4, 5],
        });
        
        // –ú–∞—Å–∫–∏—Ä—É–µ–º languages
        Object.defineProperty(navigator, 'languages', {
          get: () => ['ru-RU', 'ru', 'en-US', 'en'],
        });
        
        // –ú–∞—Å–∫–∏—Ä—É–µ–º platform
        Object.defineProperty(navigator, 'platform', {
          get: () => profileData.platform,
        });
        
        // –ú–∞—Å–∫–∏—Ä—É–µ–º hardwareConcurrency
        Object.defineProperty(navigator, 'hardwareConcurrency', {
          get: () => profileData.hardwareConcurrency,
        });
        
        // –ú–∞—Å–∫–∏—Ä—É–µ–º deviceMemory
        Object.defineProperty(navigator, 'deviceMemory', {
          get: () => profileData.deviceMemory,
        });
        
        // –ú–∞—Å–∫–∏—Ä—É–µ–º screen —Å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º–∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞–º–∏
        Object.defineProperty(screen, 'availHeight', {
          get: () => profileData.viewport.height - 40,
        });
        Object.defineProperty(screen, 'availWidth', {
          get: () => profileData.viewport.width,
        });
        Object.defineProperty(screen, 'colorDepth', {
          get: () => 24,
        });
        Object.defineProperty(screen, 'pixelDepth', {
          get: () => 24,
        });
        
        // –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ CPU –∏ GPU —á–µ—Ä–µ–∑ WebGL
        const canvas = document.createElement('canvas');
        const gl = canvas.getContext('webgl') || canvas.getContext('experimental-webgl');
        if (gl) {
          const debugInfo = gl.getExtension('WEBGL_debug_renderer_info');
          if (debugInfo) {
            Object.defineProperty(gl, 'getParameter', {
              value: function(parameter) {
                if (parameter === debugInfo.UNMASKED_RENDERER_WEBGL) {
                  return profileData.gpu;
                }
                if (parameter === debugInfo.UNMASKED_VENDOR_WEBGL) {
                  return 'NVIDIA Corporation';
                }
                return gl.getParameter.call(this, parameter);
              }
            });
          }
        }
        
        // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ CPU —á–µ—Ä–µ–∑ navigator
        Object.defineProperty(navigator, 'cpuClass', {
          get: () => profileData.cpu,
        });
        
        // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ GPU —á–µ—Ä–µ–∑ navigator
        Object.defineProperty(navigator, 'gpuVendor', {
          get: () => profileData.gpu,
        });
        
        // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ GPU —á–µ—Ä–µ–∑ WebGL context
        Object.defineProperty(navigator, 'webglVendor', {
          get: () => profileData.webglVendor,
        });
        
        Object.defineProperty(navigator, 'webglRenderer', {
          get: () => profileData.webglRenderer,
        });
      }, profile);

      // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
      await page.setExtraHTTPHeaders({
        'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,*/*;q=0.8',
        'Accept-Language': 'ru-RU,ru;q=0.8,en-US;q=0.5,en;q=0.3',
        'Accept-Encoding': 'gzip, deflate, br',
        'DNT': '1',
        'Connection': 'keep-alive',
        'Upgrade-Insecure-Requests': '1',
        'Sec-Fetch-Dest': 'document',
        'Sec-Fetch-Mode': 'navigate',
        'Sec-Fetch-Site': 'none',
        'Cache-Control': 'max-age=0'
      });

      console.log('‚úì Stealth —Ä–µ–∂–∏–º –Ω–∞—Å—Ç—Ä–æ–µ–Ω');
    } catch (error) {
      console.log(`‚ö† –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ stealth —Ä–µ–∂–∏–º–∞: ${error.message}`);
    }
  }

  // –ó–∞–ø—É—Å–∫ Firefox –±—Ä–∞—É–∑–µ—Ä–∞ —Å –ø—Ä–æ–∫—Å–∏ —á–µ—Ä–µ–∑ Playwright
  async launchFirefoxBrowser(profileId) {
    console.log(`–ó–∞–ø—É—Å–∫ Firefox –¥–ª—è –ø—Ä–æ—Ñ–∏–ª—è: Profile_${profileId}`);
    
    // –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –∫—É–∫–∏ –¥–ª—è –ø—Ä–æ—Ñ–∏–ª—è
    const cookiesPath = path.resolve(`./firefox_profiles/profile_${profileId}/cookies.json`);
    
    // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ Firefox —Å –∞–Ω—Ç–∏–¥–µ—Ç–µ–∫—Ç
    const browser = await firefox.launch({
      headless: config.headless,
      proxy: {
        server: config.proxy.server,
        username: config.proxy.username,
        password: config.proxy.password
      },
      args: config.firefox.args
    });

    // –í—ã–±–æ—Ä —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –±—Ä–∞—É–∑–µ—Ä–∞
    const profileIndex = (profileId - 1) % config.stealth.profiles.length;
    const selectedProfile = config.stealth.profiles[profileIndex];
    
    console.log(`Profile_${profileId}: CPU: ${selectedProfile.cpu}, GPU: ${selectedProfile.gpu}, RAM: ${selectedProfile.deviceMemory}GB`);
    console.log(`Profile_${profileId}: –†–∞–∑—Ä–µ—à–µ–Ω–∏–µ: ${selectedProfile.viewport.width}x${selectedProfile.viewport.height}`);
    
    // –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ —Å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º–∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞–º–∏
    const context = await browser.newContext({
      userDataDir: path.resolve(`./firefox_profiles/profile_${profileId}`),
      userAgent: selectedProfile.userAgent,
      viewport: selectedProfile.viewport,
      locale: config.stealth.locale,
      timezoneId: config.stealth.timezoneId,
      geolocation: config.stealth.geolocation,
      permissions: config.stealth.permissions,
      extraHTTPHeaders: config.stealth.extraHTTPHeaders
    });

    // –ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –∫—É–∫–∏
    await this.loadCookies(context, cookiesPath);

    // –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    const page = await context.newPage();

    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∞–Ω—Ç–∏–¥–µ—Ç–µ–∫—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º–∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞–º–∏
    await this.setupStealthMode(page, selectedProfile);

    // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫—É–∫–∏ –ø—Ä–∏ –∫–∞–∂–¥–æ–º –∏–∑–º–µ–Ω–µ–Ω–∏–∏ (–µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–æ –≤ –∫–æ–Ω—Ñ–∏–≥–µ)
    if (config.cookies.autoSave) {
      page.on('response', async (response) => {
        if (response.url().includes('mellstroy')) {
          try {
            await this.saveCookies(context, cookiesPath, page);
          } catch (error) {
            // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –∞–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
          }
        }
      });
    }

    return { browser, context, page, profileId, cookiesPath, selectedProfile };
  }

  // –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö –±—Ä–∞—É–∑–µ—Ä–æ–≤
  async launchAllBrowsers() {
    console.log(`–ó–∞–ø—É—Å–∫ ${config.browserCount} Firefox –±—Ä–∞—É–∑–µ—Ä–æ–≤...`);
    
    for (let i = 1; i <= config.browserCount; i++) {
      try {
        const { browser, context, page, profileId, cookiesPath } = await this.launchFirefoxBrowser(i);
        this.browsers.push(browser);
        this.pages.push({ page, context, profileId, cookiesPath });
        console.log(`‚úì –ë—Ä–∞—É–∑–µ—Ä Profile_${i} –∑–∞–ø—É—â–µ–Ω —É—Å–ø–µ—à–Ω–æ`);
      } catch (error) {
        console.error(`‚úó –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±—Ä–∞—É–∑–µ—Ä–∞ Profile_${i}:`, error.message);
      }
    }
  }

  // –ò–º–∏—Ç–∞—Ü–∏—è –ø–æ–≤–µ–¥–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  async simulateHumanBehavior(page) {
    try {
      // –°–ª—É—á–∞–π–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞
      await page.waitForTimeout(Math.random() * 2000 + 1000);
      
      // –°–ª—É—á–∞–π–Ω–æ–µ –¥–≤–∏–∂–µ–Ω–∏–µ –º—ã—à–∏
      await page.mouse.move(
        Math.random() * 1920,
        Math.random() * 1080,
        { steps: Math.floor(Math.random() * 10) + 5 }
      );
      
      // –°–ª—É—á–∞–π–Ω–∞—è –ø—Ä–æ–∫—Ä—É—Ç–∫–∞
      await page.mouse.wheel(0, Math.random() * 500 + 100);
      
      // –°–ª—É—á–∞–π–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞
      await page.waitForTimeout(Math.random() * 1000 + 500);
    } catch (error) {
      // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –∏–º–∏—Ç–∞—Ü–∏–∏
    }
  }

  // –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ mellstroy
  async navigateToMellstroy() {
    console.log('–ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ mellstroy...');
    
    for (const { page, profileId } of this.pages) {
      try {
        await page.goto(config.mellstroy.baseUrl, { 
          waitUntil: 'domcontentloaded',
          timeout: 10000 
        });
        
        // –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        await page.waitForTimeout(2000);
        
        // –ü–æ–ø—ã—Ç–∫–∞ –Ω–∞–∂–∞—Ç—å –Ω–∞ –∫–Ω–æ–ø–∫—É view_details
        try {
          // –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã
          const selectors = [
            'button.view_root-nfNUB div.view_details-nfNUB',
            'div.view_details-nfNUB',
            'button.view_root-nfNUB',
            '[class*="view_details"]',
            '[class*="view_root"]'
          ];
          
          let clicked = false;
          for (const selector of selectors) {
            try {
              await page.click(selector, { timeout: 2000 });
              console.log(`‚úì Profile_${profileId}: –ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ view_details (—Å–µ–ª–µ–∫—Ç–æ—Ä: ${selector})`);
              clicked = true;
              break;
            } catch (error) {
              // –ü—Ä–æ–±—É–µ–º —Å–ª–µ–¥—É—é—â–∏–π —Å–µ–ª–µ–∫—Ç–æ—Ä
            }
          }
          
          if (!clicked) {
            console.log(`‚ö† Profile_${profileId}: –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∫–Ω–æ–ø–∫—É view_details –Ω–∏ –æ–¥–Ω–∏–º —Å–µ–ª–µ–∫—Ç–æ—Ä–æ–º`);
          }
        } catch (error) {
          console.log(`‚ö† Profile_${profileId}: –û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –∫–Ω–æ–ø–∫–∏ view_details: ${error.message}`);
        }
        
        // –û–∂–∏–¥–∞–Ω–∏–µ –ø–æ—Å–ª–µ –Ω–∞–∂–∞—Ç–∏—è view_details
        await page.waitForTimeout(1000);
        
        // –ü–æ–ø—ã—Ç–∫–∞ –Ω–∞–∂–∞—Ç—å –Ω–∞ –∫–Ω–æ–ø–∫—É "–í–∞—É—á–µ—Ä—ã" (–Ω–µ "–ë–æ–Ω—É—Å—ã")
        try {
          const listSelectors = [
            '//div[contains(text(), "–í–∞—É—á–µ—Ä—ã")]',
            '//button[contains(., "–í–∞—É—á–µ—Ä—ã")]',
            '//div[contains(@class, "list-item") and contains(., "–í–∞—É—á–µ—Ä—ã")]',
            '//div[contains(text(), "–ê–∫—Ç–∏–≤–∞—Ü–∏—è –∫–æ–¥–∞")]',
            '//button[contains(., "–ê–∫—Ç–∏–≤–∞—Ü–∏—è –∫–æ–¥–∞")]',
            '/html/body/div/div[3]/div/div/div[2]/div[2]/div/div[2]/div[2]/div[1]/button[2]/div[2]'
          ];
          
          let listClicked = false;
          for (const selector of listSelectors) {
            try {
              if (selector.startsWith('//') || selector.startsWith('/html')) {
                // XPath —Å–µ–ª–µ–∫—Ç–æ—Ä
                await page.click(`xpath=${selector}`, { timeout: 2000 });
              } else {
                // CSS —Å–µ–ª–µ–∫—Ç–æ—Ä
                await page.click(selector, { timeout: 2000 });
              }
              console.log(`‚úì Profile_${profileId}: –ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ "–í–∞—É—á–µ—Ä—ã" (—Å–µ–ª–µ–∫—Ç–æ—Ä: ${selector})`);
              listClicked = true;
              break;
            } catch (error) {
              // –ü—Ä–æ–±—É–µ–º —Å–ª–µ–¥—É—é—â–∏–π —Å–µ–ª–µ–∫—Ç–æ—Ä
            }
          }
          
          if (!listClicked) {
            console.log(`‚ö† Profile_${profileId}: –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∫–Ω–æ–ø–∫—É "–í–∞—É—á–µ—Ä—ã" –Ω–∏ –æ–¥–Ω–∏–º —Å–µ–ª–µ–∫—Ç–æ—Ä–æ–º`);
          }
        } catch (error) {
          console.log(`‚ö† Profile_${profileId}: –û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –∫–Ω–æ–ø–∫–∏ "–í–∞—É—á–µ—Ä—ã": ${error.message}`);
        }
        
        // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫—É–∫–∏ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏
        const { context, cookiesPath } = this.pages.find(p => p.profileId === profileId);
        await this.saveCookies(context, cookiesPath, page);
        
        console.log(`‚úì Profile_${profileId}: –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ mellstroy –≤—ã–ø–æ–ª–Ω–µ–Ω`);
        
        // –î–µ–ª–∞–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –ø—Ä–æ—Ñ–∏–ª—è
        setTimeout(async () => {
          try {
            console.log(`üì∏ Profile_${profileId}: –î–µ–ª–∞–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ...`);
            const screenshot = await page.screenshot({ 
              type: 'png',
              fullPage: false,
              clip: { x: 0, y: 0, width: 1920, height: 1080 }
            });

            if (this.telegramBot) {
              await this.telegramBot.sendPhoto(config.telegramBot.chatId, screenshot, {
                caption: `üöÄ –ü—Ä–æ—Ñ–∏–ª—å ${profileId} –∑–∞–ø—É—â–µ–Ω\n‚è∞ ${new Date().toLocaleString('ru-RU')}`,
                filename: `startup_${profileId}_${Date.now()}.png`
              });
              console.log(`üì§ Profile_${profileId}: –°–∫—Ä–∏–Ω—à–æ—Ç –∑–∞–ø—É—Å–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ Telegram`);
            }
          } catch (error) {
            console.log(`‚ö† Profile_${profileId}: –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞ –∑–∞–ø—É—Å–∫–∞:`, error.message);
          }
        }, 2000); // –ñ–¥–µ–º 2 —Å–µ–∫—É–Ω–¥—ã –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏
      } catch (error) {
        console.error(`‚úó Profile_${profileId}: –û—à–∏–±–∫–∞ –ø–µ—Ä–µ—Ö–æ–¥–∞ –Ω–∞ mellstroy:`, error.message);
      }
    }
  }

  // –ü—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–µ Geetest CAPTCHA v4
  async solveGeetestCaptcha(page, profileId) {
    try {
      console.log(`üîê Profile_${profileId}: –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–µ Geetest CAPTCHA...`);
      
      // –ñ–¥–µ–º –ø–æ—è–≤–ª–µ–Ω–∏—è –∫–∞–ø—á–∏
      await page.waitForSelector('.geetest_box', { timeout: 10000 });
      console.log(`üîß Profile_${profileId}: Geetest CAPTCHA –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∞`);
      
      // –ü–æ–ª—É—á–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –∫–∞–ø—á–∏
      const slider = await page.$('.geetest_btn');
      const track = await page.$('.geetest_track');
      const slice = await page.$('.geetest_slice');
      const bg = await page.$('.geetest_bg');
      
      console.log(`üîß Profile_${profileId}: –≠–ª–µ–º–µ–Ω—Ç—ã –∫–∞–ø—á–∏ –Ω–∞–π–¥–µ–Ω—ã:`, {
        slider: !!slider,
        track: !!track,
        slice: !!slice,
        bg: !!bg
      });
      
      if (!slider || !track || !slice || !bg) {
        console.log(`‚ö† Profile_${profileId}: –ù–µ –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã –∫–∞–ø—á–∏ –Ω–∞–π–¥–µ–Ω—ã`);
        return false;
      }
      
      // –ü–æ–ª—É—á–∞–µ–º —Ä–∞–∑–º–µ—Ä—ã –∏ –ø–æ–∑–∏—Ü–∏–∏ —ç–ª–µ–º–µ–Ω—Ç–æ–≤
      const trackBox = await track.boundingBox();
      const sliceBox = await slice.boundingBox();
      const bgBox = await bg.boundingBox();
      
      if (!trackBox || !sliceBox || !bgBox) {
        console.log(`‚ö† Profile_${profileId}: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ä–∞–∑–º–µ—Ä—ã —ç–ª–µ–º–µ–Ω—Ç–æ–≤`);
        return false;
      }
      
      // –ü—Ä–æ—Å—Ç–æ–π –∏ –Ω–∞–¥–µ–∂–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –ø–æ–∑–∏—Ü–∏–∏ —Ñ—Ä–∞–≥–º–µ–Ω—Ç–∞
      const sliceOffsetX = sliceBox.x - bgBox.x;
      const sliceOffsetY = sliceBox.y - bgBox.y;
      
      console.log(`üîß Profile_${profileId}: –§—Ä–∞–≥–º–µ–Ω—Ç —Å–º–µ—â–µ–Ω –Ω–∞ X: ${sliceOffsetX}, Y: ${sliceOffsetY}`);
      console.log(`üîß Profile_${profileId}: –†–∞–∑–º–µ—Ä—ã —Ñ—Ä–∞–≥–º–µ–Ω—Ç–∞: ${sliceBox.width}x${sliceBox.height}`);
      console.log(`üîß Profile_${profileId}: –†–∞–∑–º–µ—Ä—ã —Ñ–æ–Ω–∞: ${bgBox.width}x${bgBox.height}`);
      
      // –í Geetest v4 –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è —Ç–æ—á–Ω–æ–≥–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–∏ –≤—ã—Ä–µ–∑–∞
      let targetOffset;
      
      if (sliceOffsetX < 10) {
        // –§—Ä–∞–≥–º–µ–Ω—Ç —Å–ª–µ–≤–∞, –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –ø–æ–∏—Å–∫–∞ –≤—ã—Ä–µ–∑–∞
        try {
          console.log(`üîß Profile_${profileId}: –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –ø–æ–∏—Å–∫–∞ –≤—ã—Ä–µ–∑–∞`);
          
          // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —á–µ—Ä–µ–∑ canvas
          const imageAnalysis = await page.evaluate(() => {
            return new Promise((resolve) => {
              const bgElement = document.querySelector('.geetest_bg');
              if (!bgElement) {
                resolve({ success: false, error: 'Background element not found' });
                return;
              }
              
              const style = window.getComputedStyle(bgElement);
              const bgImage = style.backgroundImage;
              const bgUrl = bgImage.replace(/url\(['"]?(.+?)['"]?\)/, '$1');
              
              const img = new Image();
              img.crossOrigin = 'anonymous';
              img.onload = function() {
                try {
                  const canvas = document.createElement('canvas');
                  const ctx = canvas.getContext('2d');
                  canvas.width = img.width;
                  canvas.height = img.height;
                  
                  ctx.drawImage(img, 0, 0);
                  const imageData = ctx.getImageData(0, 0, canvas.width, canvas.height);
                  const data = imageData.data;
                  
                  // –ò—â–µ–º –≤—ã—Ä–µ–∑ –ø–æ —Ä–∞–∑–Ω—ã–º –∫—Ä–∏—Ç–µ—Ä–∏—è–º - –±–æ–ª–µ–µ –∞–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–π –ø–æ–∏—Å–∫
                  let cutoutX = 0;
                  let foundCutout = false;
                  let bestMatch = { x: 0, score: 0 };
                  
                  // –°–∫–∞–Ω–∏—Ä—É–µ–º –í–°–ï –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–ª–µ–≤–∞ –Ω–∞–ø—Ä–∞–≤–æ (–≤—ã—Ä–µ–∑ –º–æ–∂–µ—Ç –±—ã—Ç—å –≥–¥–µ —É–≥–æ–¥–Ω–æ)
                  const startX = Math.floor(canvas.width * 0.1);
                  const endX = Math.floor(canvas.width * 0.9); // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –ø–æ–∏—Å–∫ 90% —à–∏—Ä–∏–Ω—ã
                  
                  for (let x = startX; x < endX; x++) {
                    let transparentPixels = 0;
                    let darkPixels = 0;
                    let lightPixels = 0;
                    let edgePixels = 0;
                    let cutoutShape = 0;
                    let contrastPixels = 0;
                    
                    for (let y = 0; y < canvas.height; y++) {
                      const index = (y * canvas.width + x) * 4;
                      const alpha = data[index + 3];
                      const r = data[index];
                      const g = data[index + 1];
                      const b = data[index + 2];
                      const brightness = (r + g + b) / 3;
                      
                      // –ò—â–µ–º –ø—Ä–æ–∑—Ä–∞—á–Ω—ã–µ –ø–∏–∫—Å–µ–ª–∏
                      if (alpha < 50) {
                        transparentPixels++;
                      }
                      // –ò—â–µ–º –æ—á–µ–Ω—å —Å–≤–µ—Ç–ª—ã–µ –ø–∏–∫—Å–µ–ª–∏ (–±–µ–ª—ã–µ –æ–±–ª–∞—Å—Ç–∏)
                      else if (brightness > 200) {
                        lightPixels++;
                      }
                      // –ò—â–µ–º –æ—á–µ–Ω—å —Ç–µ–º–Ω—ã–µ –ø–∏–∫—Å–µ–ª–∏ (—á–µ—Ä–Ω—ã–µ –æ–±–ª–∞—Å—Ç–∏)
                      else if (brightness < 50) {
                        darkPixels++;
                      }
                      // –ò—â–µ–º –ø–∏–∫—Å–µ–ª–∏ –Ω–∞ –≥—Ä–∞–Ω–∏—Ü–∞—Ö (—Ä–µ–∑–∫–∏–µ –ø–µ—Ä–µ—Ö–æ–¥—ã)
                      else if (brightness > 100 && brightness < 150) {
                        edgePixels++;
                      }
                      
                      // –ê–Ω–∞–ª–∏–∑ –∫–æ–Ω—Ç—Ä–∞—Å—Ç–∞ (–≤—ã—Ä–µ–∑ –æ–±—ã—á–Ω–æ –∏–º–µ–µ—Ç –≤—ã—Å–æ–∫–∏–π –∫–æ–Ω—Ç—Ä–∞—Å—Ç)
                      if (x > 0 && x < canvas.width - 1) {
                        const prevIndex = (y * canvas.width + (x - 1)) * 4;
                        const nextIndex = (y * canvas.width + (x + 1)) * 4;
                        
                        const prevR = data[prevIndex];
                        const prevG = data[prevIndex + 1];
                        const prevB = data[prevIndex + 2];
                        
                        const nextR = data[nextIndex];
                        const nextG = data[nextIndex + 1];
                        const nextB = data[nextIndex + 2];
                        
                        const contrast = Math.abs(r - prevR) + Math.abs(g - prevG) + Math.abs(b - prevB) +
                                       Math.abs(r - nextR) + Math.abs(g - nextG) + Math.abs(b - nextB);
                        
                        if (contrast > 200) {
                          contrastPixels++;
                        }
                      }
                    }
                    
                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º—É –≤—ã—Ä–µ–∑–∞ - –∏—â–µ–º –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–µ –ª–∏–Ω–∏–∏ —Å –∞–Ω–æ–º–∞–ª—å–Ω—ã–º–∏ –ø–∏–∫—Å–µ–ª—è–º–∏
                    let verticalLines = 0;
                    for (let checkX = Math.max(0, x - 5); checkX <= Math.min(canvas.width - 1, x + 5); checkX++) {
                      let lineAnomalies = 0;
                      for (let y = 0; y < canvas.height; y++) {
                        const index = (y * canvas.width + checkX) * 4;
                        const alpha = data[index + 3];
                        const brightness = (data[index] + data[index + 1] + data[index + 2]) / 3;
                        
                        if (alpha < 100 || brightness > 180 || brightness < 70) {
                          lineAnomalies++;
                        }
                      }
                      if (lineAnomalies > canvas.height * 0.2) {
                        verticalLines++;
                      }
                    }
                    
                    // –í—ã—á–∏—Å–ª—è–µ–º "—Å–∫–æ—Ä" –¥–ª—è —ç—Ç–æ–π –ø–æ–∑–∏—Ü–∏–∏ (—É—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–Ω—Ç—Ä–∞—Å—Ç)
                    const totalPixels = canvas.height;
                    const score = (transparentPixels * 6) + (lightPixels * 2) + (darkPixels * 2) + (edgePixels * 1) + (verticalLines * 5) + (contrastPixels * 4);
                    
                    // –ï—Å–ª–∏ —Å–∫–æ—Ä –ª—É—á—à–µ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ, —Å–æ—Ö—Ä–∞–Ω—è–µ–º
                    if (score > bestMatch.score) {
                      bestMatch = { x: x, score: score };
                    }
                    
                    // –ï—Å–ª–∏ –≤ –∫–æ–ª–æ–Ω–∫–µ –º–Ω–æ–≥–æ –∞–Ω–æ–º–∞–ª—å–Ω—ã—Ö –ø–∏–∫—Å–µ–ª–µ–π –ò –µ—Å—Ç—å –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–µ –ª–∏–Ω–∏–∏, —ç—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤—ã—Ä–µ–∑
                    // –û—á–µ–Ω—å –º—è–≥–∫–∏–µ –∫—Ä–∏—Ç–µ—Ä–∏–∏ –¥–ª—è –ø–æ–∏—Å–∫–∞ –≤—ã—Ä–µ–∑–∞
                    if ((transparentPixels > totalPixels * 0.001 || 
                         lightPixels > totalPixels * 0.005 || 
                         darkPixels > totalPixels * 0.005 ||
                         contrastPixels > totalPixels * 0.002) && verticalLines >= 1) {
                      cutoutX = x;
                      foundCutout = true;
                      console.log(`–ù–∞–π–¥–µ–Ω –≤—ã—Ä–µ–∑ –Ω–∞ X: ${x}, –ø—Ä–æ–∑—Ä–∞—á–Ω—ã—Ö: ${transparentPixels}, —Å–≤–µ—Ç–ª—ã—Ö: ${lightPixels}, —Ç–µ–º–Ω—ã—Ö: ${darkPixels}, –∫–æ–Ω—Ç—Ä–∞—Å—Ç–Ω—ã—Ö: ${contrastPixels}, –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã—Ö –ª–∏–Ω–∏–π: ${verticalLines}, —Å–∫–æ—Ä: ${score}`);
                      break;
                    }
                  }
                  
                  // –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ —Ç–æ—á–Ω—ã–π –≤—ã—Ä–µ–∑, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ª—É—á—à–∏–π –º–∞—Ç—á
                  if (!foundCutout && bestMatch.score > 0) {
                    cutoutX = bestMatch.x;
                    foundCutout = true;
                    console.log(`–ò—Å–ø–æ–ª—å–∑—É–µ–º –ª—É—á—à–∏–π –º–∞—Ç—á –Ω–∞ X: ${cutoutX}, —Å–∫–æ—Ä: ${bestMatch.score}`);
                  }
                  
                  if (foundCutout) {
                    // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –ø–æ–∑–∏—Ü–∏—é –≤—ã—Ä–µ–∑–∞ –≤ –ø–∏–∫—Å–µ–ª–∏ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ —Ä–∞–∑–º–µ—Ä–∞ —ç–ª–µ–º–µ–Ω—Ç–∞
                    const elementWidth = bgElement.offsetWidth;
                    const offsetRatio = cutoutX / canvas.width;
                    const targetOffset = offsetRatio * elementWidth;
                    
                    resolve({ 
                      success: true, 
                      offset: targetOffset,
                      cutoutX: cutoutX,
                      canvasWidth: canvas.width,
                      elementWidth: elementWidth
                    });
                  } else {
                    resolve({ success: false, error: 'Cutout not found' });
                  }
                } catch (error) {
                  resolve({ success: false, error: error.message });
                }
              };
              
              img.onerror = () => {
                resolve({ success: false, error: 'Failed to load image' });
              };
              
              img.src = bgUrl;
            });
          });
          
          if (imageAnalysis.success) {
            targetOffset = Math.round(imageAnalysis.offset);
            console.log(`üîß Profile_${profileId}: –ê–Ω–∞–ª–∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —É—Å–ø–µ—à–µ–Ω!`);
            console.log(`üîß Profile_${profileId}: –í—ã—Ä–µ–∑ –Ω–∞–π–¥–µ–Ω –Ω–∞ X: ${imageAnalysis.cutoutX}px`);
            console.log(`üîß Profile_${profileId}: –®–∏—Ä–∏–Ω–∞ canvas: ${imageAnalysis.canvasWidth}px`);
            console.log(`üîß Profile_${profileId}: –®–∏—Ä–∏–Ω–∞ —ç–ª–µ–º–µ–Ω—Ç–∞: ${imageAnalysis.elementWidth}px`);
            console.log(`üîß Profile_${profileId}: –¶–µ–ª–µ–≤–æ–µ —Å–º–µ—â–µ–Ω–∏–µ: ${targetOffset}px`);
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—ã—Ä–µ–∑ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑—É–º–Ω—ã—Ö –ø—Ä–µ–¥–µ–ª–∞—Ö
            const cutoutRatio = imageAnalysis.cutoutX / imageAnalysis.canvasWidth;
            console.log(`üîß Profile_${profileId}: –ü–æ–∑–∏—Ü–∏—è –≤—ã—Ä–µ–∑–∞: ${Math.round(cutoutRatio * 100)}% –æ—Ç —à–∏—Ä–∏–Ω—ã –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è`);
            
     // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ—á–Ω–æ–µ —Å–º–µ—â–µ–Ω–∏–µ –±–µ–∑ –∫–æ—Ä—Ä–µ–∫—Ü–∏–∏
     const bgWidth = bgBox.width;
     targetOffset = Math.round(cutoutRatio * bgWidth);
     console.log(`üîß Profile_${profileId}: –¢–æ—á–Ω–æ–µ —Å–º–µ—â–µ–Ω–∏–µ: ${targetOffset}px (${Math.round(cutoutRatio * 100)}%)`);
     
     // –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–±–æ–ª—å—à–æ–π –æ—Ç—Å—Ç—É–ø –¥–ª—è —Ç–æ—á–Ω–æ—Å—Ç–∏
     targetOffset = Math.max(targetOffset, 20); // –ú–∏–Ω–∏–º—É–º 20px
     targetOffset = Math.min(targetOffset, bgWidth - 20); // –ú–∞–∫—Å–∏–º—É–º —à–∏—Ä–∏–Ω–∞ - 20px
     console.log(`üîß Profile_${profileId}: –§–∏–Ω–∞–ª—å–Ω–æ–µ —Å–º–µ—â–µ–Ω–∏–µ: ${targetOffset}px`);
          } else {
            console.log(`üîß Profile_${profileId}: –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: ${imageAnalysis.error}`);
            
            // –£–º–Ω—ã–π fallback –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–∞–∑–º–µ—Ä–æ–≤ —ç–ª–µ–º–µ–Ω—Ç–æ–≤
            const sliceWidth = sliceBox.width;
            const bgWidth = bgBox.width;
            
            // –í—ã—á–∏—Å–ª—è–µ–º –ø—Ä–∏–º–µ—Ä–Ω—É—é –ø–æ–∑–∏—Ü–∏—é –≤—ã—Ä–µ–∑–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–∞–∑–º–µ—Ä–æ–≤
            // –í—ã—Ä–µ–∑ –º–æ–∂–µ—Ç –±—ã—Ç—å –≥–¥–µ —É–≥–æ–¥–Ω–æ, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–ª—É—á–∞–π–Ω—É—é –ø–æ–∑–∏—Ü–∏—é
            const estimatedCutoutPosition = bgWidth * (0.05 + Math.random() * 0.9); // 5%-95% –æ—Ç —à–∏—Ä–∏–Ω—ã —Ñ–æ–Ω–∞
            targetOffset = Math.round(estimatedCutoutPosition);
            
            console.log(`üîß Profile_${profileId}: –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–º–Ω—ã–π fallback: ${targetOffset}px (${Math.round(estimatedCutoutPosition/bgWidth*100)}% –æ—Ç —à–∏—Ä–∏–Ω—ã —Ñ–æ–Ω–∞)`);
          }
        } catch (error) {
          console.log(`üîß Profile_${profileId}: –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: ${error.message}`);
          // Fallback –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–∞–∑–º–µ—Ä–æ–≤ —Ñ–æ–Ω–∞
          const bgWidth = bgBox.width;
          targetOffset = Math.round(bgWidth * 0.3); // 30% –æ—Ç —à–∏—Ä–∏–Ω—ã —Ñ–æ–Ω–∞
          console.log(`üîß Profile_${profileId}: Fallback —Å–º–µ—â–µ–Ω–∏–µ: ${targetOffset}px`);
        }
      } else {
        // –§—Ä–∞–≥–º–µ–Ω—Ç —É–∂–µ –≤ –ø–æ–∑–∏—Ü–∏–∏, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ —Å–º–µ—â–µ–Ω–∏–µ
        targetOffset = sliceOffsetX;
        console.log(`üîß Profile_${profileId}: –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ —Å–º–µ—â–µ–Ω–∏–µ: ${targetOffset}px`);
      }
      
      console.log(`üîß Profile_${profileId}: –¶–µ–ª–µ–≤–æ–µ —Å–º–µ—â–µ–Ω–∏–µ: ${targetOffset}px`);
      
      // –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∞–ª—å–Ω—É—é –ø–æ–∑–∏—Ü–∏—é —Å–ª–∞–π–¥–µ—Ä–∞
      const sliderBox = await slider.boundingBox();
      if (!sliderBox) {
        console.log(`‚ö† Profile_${profileId}: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–æ–∑–∏—Ü–∏—é —Å–ª–∞–π–¥–µ—Ä–∞`);
        return false;
      }
      
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —Å–∞–º–æ–≥–æ —Å–ª–∞–π–¥–µ—Ä–∞ –¥–ª—è –∫–ª–∏–∫–∞
      const startX = sliderBox.x + sliderBox.width / 2; // –¶–µ–Ω—Ç—Ä —Å–ª–∞–π–¥–µ—Ä–∞
      const startY = sliderBox.y + sliderBox.height / 2; // –¶–µ–Ω—Ç—Ä —Å–ª–∞–π–¥–µ—Ä–∞
      
      console.log(`üîß Profile_${profileId}: –†–µ–∞–ª—å–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è —Å–ª–∞–π–¥–µ—Ä–∞: ${sliderBox.x}, ${sliderBox.y}`);
      console.log(`üîß Profile_${profileId}: –¶–µ–Ω—Ç—Ä —Å–ª–∞–π–¥–µ—Ä–∞: ${startX}, ${startY}`);
      
      // –í—ã—á–∏—Å–ª—è–µ–º —Ü–µ–ª–µ–≤—É—é –ø–æ–∑–∏—Ü–∏—é –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–º–µ—â–µ–Ω–∏—è –æ—Ç —Å–ª–∞–π–¥–µ—Ä–∞
      let targetX = startX + targetOffset; // –û—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –Ω–∞—á–∞–ª—å–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏ —Å–ª–∞–π–¥–µ—Ä–∞
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ü–µ–ª–µ–≤–∞—è –ø–æ–∑–∏—Ü–∏—è –Ω–µ –≤—ã—Ö–æ–¥–∏—Ç –∑–∞ –≥—Ä–∞–Ω–∏—Ü—ã track
      if (targetX <= trackBox.x) {
        console.log(`üîß Profile_${profileId}: –¶–µ–ª–µ–≤–∞—è –ø–æ–∑–∏—Ü–∏—è ${targetX} <= –Ω–∞—á–∞–ª–∞ track ${trackBox.x}, –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º`);
        targetX = trackBox.x + trackBox.width * 0.8; // 80% –æ—Ç —à–∏—Ä–∏–Ω—ã track
        console.log(`üîß Profile_${profileId}: –ù–æ–≤–∞—è —Ü–µ–ª–µ–≤–∞—è –ø–æ–∑–∏—Ü–∏—è: ${targetX}`);
      } else if (targetX > trackBox.x + trackBox.width) {
        console.log(`üîß Profile_${profileId}: –¶–µ–ª–µ–≤–∞—è –ø–æ–∑–∏—Ü–∏—è ${targetX} –≤—ã—Ö–æ–¥–∏—Ç –∑–∞ –≥—Ä–∞–Ω–∏—Ü—ã track, –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º`);
        targetX = trackBox.x + trackBox.width - 20; // –ö–æ–Ω–µ—Ü track - –æ—Ç—Å—Ç—É–ø
        console.log(`üîß Profile_${profileId}: –ù–æ–≤–∞—è —Ü–µ–ª–µ–≤–∞—è –ø–æ–∑–∏—Ü–∏—è: ${targetX}`);
      }
      
      console.log(`üîß Profile_${profileId}: –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã track:`, trackBox);
      console.log(`üîß Profile_${profileId}: –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã slice:`, sliceBox);
      console.log(`üîß Profile_${profileId}: –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã bg:`, bgBox);
      console.log(`üîß Profile_${profileId}: –ù–∞—á–∞–ª—å–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è: ${startX}, ${startY}`);
      console.log(`üîß Profile_${profileId}: –¶–µ–ª–µ–≤–∞—è –ø–æ–∑–∏—Ü–∏—è: ${targetX}, ${startY}`);
      
      // –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ - —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã–º
      const dragDistance = targetX - startX;
      console.log(`üîß Profile_${profileId}: –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏—è: ${dragDistance}px`);
      if (dragDistance <= 0 || dragDistance < 50) {
        console.log(`üîß Profile_${profileId}: –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏—è ${dragDistance}px, –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º`);
        // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –¥–æ –º–∏–Ω–∏–º—É–º 100px
        targetX = startX + Math.max(100, Math.abs(targetOffset) * 1.5);
        console.log(`üîß Profile_${profileId}: –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è —Ü–µ–ª–µ–≤–∞—è –ø–æ–∑–∏—Ü–∏—è: ${targetX}, —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ: ${targetX - startX}px`);
      }
      
      // –ü–æ–ø—Ä–æ–±—É–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å dragAndDrop –¥–ª—è –±–æ–ª–µ–µ –Ω–∞–¥–µ–∂–Ω–æ–≥–æ –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏—è
      console.log(`üîß Profile_${profileId}: –ü—Ä–æ–±—É–µ–º dragAndDrop –æ—Ç ${startX},${startY} –¥–æ ${targetX},${startY}`);
      
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ—Å—Ç–æ–π –∏ –Ω–∞–¥–µ–∂–Ω—ã–π –º–µ—Ç–æ–¥ - –∫–ª–∏–∫–∞–µ–º –∏ –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–µ–º –ø–æ track
      console.log(`üîß Profile_${profileId}: –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ—Å—Ç–æ–π –º–µ—Ç–æ–¥ –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏—è`);
      
      // –ù–∞–≤–æ–¥–∏–º –º—ã—à—å –Ω–∞ —Å–ª–∞–π–¥–µ—Ä
      await page.mouse.move(startX, startY, { steps: 3 });
      await page.waitForTimeout(200);
      
      // –ù–∞–∂–∏–º–∞–µ–º –∏ —É–¥–µ—Ä–∂–∏–≤–∞–µ–º
      console.log(`üîß Profile_${profileId}: –ù–∞–∂–∏–º–∞–µ–º –∏ —É–¥–µ—Ä–∂–∏–≤–∞–µ–º –º—ã—à—å`);
      await page.mouse.down();
      await page.waitForTimeout(100);
      
      // –ü—Ä–æ—Å—Ç–æ–µ –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏–µ - –¥–≤–∏–≥–∞–µ–º—Å—è –ø–æ –ø—Ä—è–º–æ–π –ª–∏–Ω–∏–∏
      const finalDragDistance = targetX - startX;
      console.log(`üîß Profile_${profileId}: –ü–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–µ–º –Ω–∞ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ: ${finalDragDistance}px`);
      
      // –î–≤–∏–≥–∞–µ–º—Å—è –ø–ª–∞–≤–Ω–æ –∫ —Ü–µ–ª–µ–≤–æ–π –ø–æ–∑–∏—Ü–∏–∏ —Å –±–æ–ª—å—à–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º —à–∞–≥–æ–≤ –¥–ª—è —Ç–æ—á–Ω–æ—Å—Ç–∏
      await page.mouse.move(targetX, startY, { steps: 50 });
      await page.waitForTimeout(500);
      
      // –û—Ç–ø—É—Å–∫–∞–µ–º –º—ã—à—å
      console.log(`üîß Profile_${profileId}: –û—Ç–ø—É—Å–∫–∞–µ–º –º—ã—à—å`);
      await page.mouse.up();
      await page.waitForTimeout(500);
      
      console.log(`üîß Profile_${profileId}: –ü–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ`);
      
      // –ñ–¥–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–∑–∏—Ü–∏—é —Å–ª–∞–π–¥–µ—Ä–∞
      await page.waitForTimeout(1000);

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–¥–≤–∏–Ω—É–ª—Å—è –ª–∏ —Å–ª–∞–π–¥–µ—Ä
      const newSliderBox = await slider.boundingBox();
      if (newSliderBox) {
        const sliderMoved = Math.abs(newSliderBox.x - sliderBox.x) > 10;
        console.log(`üîß Profile_${profileId}: –°–ª–∞–π–¥–µ—Ä —Å–¥–≤–∏–Ω—É–ª—Å—è: ${sliderMoved}, –Ω–æ–≤–∞—è –ø–æ–∑–∏—Ü–∏—è: ${newSliderBox.x}`);
      }

      // –î–µ–ª–∞–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç –ø–æ—Å–ª–µ –¥–≤–∏–∂–µ–Ω–∏—è –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
      console.log(`üì∏ Profile_${profileId}: –î–µ–ª–∞–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç –ø–æ—Å–ª–µ –¥–≤–∏–∂–µ–Ω–∏—è —Å–ª–∞–π–¥–µ—Ä–∞...`);
      const screenshotAfter = await page.screenshot({ type: 'png' });
      
      // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º, –ø–æ–ø–∞–ª–∏ –ª–∏ –º—ã –≤ –≤—ã—Ä–µ–∑
      const analysisResult = await page.evaluate(() => {
        const slice = document.querySelector('.geetest_slice');
        const bg = document.querySelector('.geetest_bg');
        
        if (!slice || !bg) {
          console.log('üîß –≠–ª–µ–º–µ–Ω—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –ø–æ—Å–ª–µ –¥–≤–∏–∂–µ–Ω–∏—è');
          return { success: false, reason: 'Elements not found after movement' };
        }
        
        const sliceBox = slice.getBoundingClientRect();
        const bgBox = bg.getBoundingClientRect();
        
        console.log(`üîß –≠–ª–µ–º–µ–Ω—Ç—ã –Ω–∞–π–¥–µ–Ω—ã: slice.x=${sliceBox.x}, bg.x=${bgBox.x}`);
        
        return {
          sliceX: sliceBox.x,
          sliceY: sliceBox.y,
          bgX: bgBox.x,
          bgY: bgBox.y
        };
      });
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞–π–¥–µ–Ω—ã –ª–∏ —ç–ª–µ–º–µ–Ω—Ç—ã
      if (analysisResult.success === false) {
        console.log(`‚ùå Profile_${profileId}: –≠–ª–µ–º–µ–Ω—Ç—ã –∫–∞–ø—á–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –ø–æ—Å–ª–µ –¥–≤–∏–∂–µ–Ω–∏—è: ${analysisResult.reason}`);
        console.log(`‚ö† Profile_${profileId}: –í–æ–∑–º–æ–∂–Ω–æ, –∫–∞–ø—á–∞ –∏—Å—á–µ–∑–ª–∞ –∏–ª–∏ –∏–∑–º–µ–Ω–∏–ª–∞—Å—å`);
        
        // –ñ–¥–µ–º –µ—â–µ –Ω–µ–º–Ω–æ–≥–æ –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º, –∏—Å—á–µ–∑–ª–∞ –ª–∏ –∫–∞–ø—á–∞
        await page.waitForTimeout(2000);
        const captchaStillVisible = await page.$('.geetest_box');
        if (!captchaStillVisible) {
          console.log(`‚úÖ Profile_${profileId}: Geetest CAPTCHA —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–π–¥–µ–Ω–∞ (—ç–ª–µ–º–µ–Ω—Ç—ã –∏—Å—á–µ–∑–ª–∏)`);
          return true;
        } else {
          console.log(`‚ö† Profile_${profileId}: CAPTCHA –Ω–µ –ø—Ä–æ–π–¥–µ–Ω–∞, —ç–ª–µ–º–µ–Ω—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã`);
          return false;
        }
      }
      
      // –í—ã—á–∏—Å–ª—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≤—ã—Ä–µ–∑–∞ –∏—Å–ø–æ–ª—å–∑—É—è –°–í–ï–ñ–ò–ï –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã bg
      const targetCutoutX = analysisResult.bgX + targetOffset; // –ü–æ–∑–∏—Ü–∏—è –≤—ã—Ä–µ–∑–∞ –≤ bg (—Å–≤–µ–∂–∏–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã)
      const targetCutoutY = analysisResult.bgY + sliceOffsetY; // –ü–æ–∑–∏—Ü–∏—è –≤—ã—Ä–µ–∑–∞ –ø–æ Y (—Å–≤–µ–∂–∏–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã)
      
      console.log(`üîß Profile_${profileId}: –í—ã—á–∏—Å–ª—è–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≤—ã—Ä–µ–∑–∞:`);
      console.log(`üîß Profile_${profileId}: bg.x=${analysisResult.bgX}, targetOffset=${targetOffset}, targetCutoutX=${targetCutoutX}`);
      console.log(`üîß Profile_${profileId}: bg.y=${analysisResult.bgY}, sliceOffsetY=${sliceOffsetY}, targetCutoutY=${targetCutoutY}`);
      
      // –í Geetest slice –¥–≤–∏–∂–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –ø–æ X, –Ω–æ Y –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞ slice –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
      // –ü–æ—ç—Ç–æ–º—É –º—ã –Ω–µ –º–æ–∂–µ–º –∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä–æ–≤–∞—Ç—å Y –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—É slice
      console.log(`üîß Profile_${profileId}: –í Geetest slice –¥–≤–∏–∂–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –ø–æ X, Y –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏`);
      
      // –í—ã—á–∏—Å–ª—è–µ–º —Ä–∞–∑–Ω–æ—Å—Ç–∏
      const xDiff = Math.abs(analysisResult.sliceX - targetCutoutX);
      const yDiff = Math.abs(analysisResult.sliceY - targetCutoutY);
      
      console.log(`üîß Profile_${profileId}: –ê–Ω–∞–ª–∏–∑ –ø–æ–ø–∞–¥–∞–Ω–∏—è:`);
      console.log(`üîß Profile_${profileId}: slice.x=${analysisResult.sliceX}, bg.x=${analysisResult.bgX}, target.x=${targetCutoutX}, —Ä–∞–∑–Ω–∏—Ü–∞ X=${xDiff}`);
      console.log(`üîß Profile_${profileId}: slice.y=${analysisResult.sliceY}, bg.y=${analysisResult.bgY}, target.y=${targetCutoutY}, —Ä–∞–∑–Ω–∏—Ü–∞ Y=${yDiff}`);
      
      // –ï—Å–ª–∏ —Ä–∞–∑–Ω–∏—Ü–∞ –ø–æ X –º–µ–Ω—å—à–µ 0.0005px –∏ –ø–æ Y –º–µ–Ω—å—à–µ 0.0005px, —Å—á–∏—Ç–∞–µ–º —á—Ç–æ –ø–æ–ø–∞–ª–∏
      const success = xDiff < 0.0005 && yDiff < 0.0005;
      
      if (success) {
        console.log(`‚úÖ Profile_${profileId}: –ü–∞–∑–ª –ø–æ–ø–∞–ª –≤ –≤—ã—Ä–µ–∑!`);
        
        // –ñ–¥–µ–º –µ—â–µ –Ω–µ–º–Ω–æ–≥–æ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        await page.waitForTimeout(2000);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏—Å—á–µ–∑–ª–∞ –ª–∏ –∫–∞–ø—á–∞
        const captchaStillVisible = await page.$('.geetest_box');
        if (!captchaStillVisible) {
          console.log(`‚úÖ Profile_${profileId}: Geetest CAPTCHA —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–π–¥–µ–Ω–∞`);
          return true;
        } else {
          console.log(`‚ö† Profile_${profileId}: –ü–∞–∑–ª –ø–æ–ø–∞–ª, –Ω–æ –∫–∞–ø—á–∞ –Ω–µ –∏—Å—á–µ–∑–ª–∞`);
          return false;
        }
      } else {
        console.log(`‚ùå Profile_${profileId}: –ü–∞–∑–ª –Ω–µ –ø–æ–ø–∞–ª –≤ –≤—ã—Ä–µ–∑. –†–∞–∑–Ω–∏—Ü–∞ X: ${xDiff}px, Y: ${yDiff}px`);
        
        // –ï—Å–ª–∏ —Ä–∞–∑–Ω–∏—Ü–∞ –ø–æ Y –æ—á–µ–Ω—å –º–∞–ª–µ–Ω—å–∫–∞—è, –∑–Ω–∞—á–∏—Ç –º—ã –ø–æ—á—Ç–∏ –ø–æ–ø–∞–ª–∏ –ø–æ Y
        if (yDiff < 10) {
          console.log(`üîß Profile_${profileId}: –†–∞–∑–Ω–∏—Ü–∞ –ø–æ Y –æ—á–µ–Ω—å –º–∞–ª–µ–Ω—å–∫–∞—è (${yDiff}px), –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –ø–æ X`);
        }
        
        // –í Geetest slice –¥–≤–∏–∂–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –ø–æ X, –∫–æ—Ä—Ä–µ–∫—Ü–∏—è –ø–æ Y –Ω–µ–≤–æ–∑–º–æ–∂–Ω–∞
        if (yDiff > 0.0002) {
          console.log(`üîß Profile_${profileId}: –†–∞–∑–Ω–∏—Ü–∞ –ø–æ Y ${yDiff}px, –Ω–æ –≤ Geetest slice –¥–≤–∏–∂–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –ø–æ X`);
          console.log(`üîß Profile_${profileId}: –ö–æ—Ä—Ä–µ–∫—Ü–∏—è –ø–æ Y –Ω–µ–≤–æ–∑–º–æ–∂–Ω–∞, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ç–æ–ª—å–∫–æ —Å X`);
        }
        
        // –ï—Å–ª–∏ –Ω–µ –ø–æ–ø–∞–ª–∏, –ø—Ä–æ–±—É–µ–º —Å–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ–∑–∏—Ü–∏—é
        const correctionX = targetCutoutX - analysisResult.sliceX;
        console.log(`üîß Profile_${profileId}: –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º –ø–æ–∑–∏—Ü–∏—é –Ω–∞ ${correctionX}px (–æ—Ç ${analysisResult.sliceX} –¥–æ ${targetCutoutX})`);
        
        // –ï—Å–ª–∏ –∫–æ—Ä—Ä–µ–∫—Ü–∏—è –æ—á–µ–Ω—å –º–∞–ª–µ–Ω—å–∫–∞—è, –¥–µ–ª–∞–µ–º –µ—ë –±–æ–ª–µ–µ —Ç–æ—á–Ω–æ–π
        if (Math.abs(correctionX) < 50) {
          console.log(`üîß Profile_${profileId}: –ú–∞–ª–µ–Ω—å–∫–∞—è –∫–æ—Ä—Ä–µ–∫—Ü–∏—è, –¥–µ–ª–∞–µ–º –µ—ë –±–æ–ª–µ–µ —Ç–æ—á–Ω–æ–π`);

          // –î–≤–∏–≥–∞–µ–º —Å–ª–∞–π–¥–µ—Ä –Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É—é—â–µ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ —Ç–µ–∫—É—â–µ–π –ø–æ–∑–∏—Ü–∏–∏
          const currentSliderBox = await slider.boundingBox();
          if (currentSliderBox) {
            const currentSliderCenterX = currentSliderBox.x + currentSliderBox.width / 2;
            const correctionTargetX = currentSliderCenterX + correctionX;
            console.log(`üîß Profile_${profileId}: –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º —Å ${currentSliderCenterX} –¥–æ ${correctionTargetX}`);

            // –î–µ–ª–∞–µ–º –∫–æ—Ä—Ä–µ–∫—Ü–∏—é –±–æ–ª–µ–µ –ø–ª–∞–≤–Ω–æ–π
            await page.mouse.move(correctionTargetX, startY, { steps: 5 });
            await page.waitForTimeout(200);
          }
        } else {
          console.log(`üîß Profile_${profileId}: –ë–æ–ª—å—à–∞—è –∫–æ—Ä—Ä–µ–∫—Ü–∏—è, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º`);
        }
        
        // –ï—Å–ª–∏ –º—ã –æ—á–µ–Ω—å –±–ª–∏–∑–∫–æ –∫ —Ü–µ–ª–∏ (—Ä–∞–∑–Ω–∏—Ü–∞ < 10px), –¥–µ–ª–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∫–æ—Ä—Ä–µ–∫—Ü–∏—é
        if (xDiff < 10 && yDiff < 10) {
          console.log(`üîß Profile_${profileId}: –û—á–µ–Ω—å –±–ª–∏–∑–∫–æ –∫ —Ü–µ–ª–∏, –¥–µ–ª–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∫–æ—Ä—Ä–µ–∫—Ü–∏—é`);
          
          // –î–µ–ª–∞–µ–º –µ—â–µ –æ–¥–Ω—É –∫–æ—Ä—Ä–µ–∫—Ü–∏—é –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —Ç–æ—á–Ω–æ—Å—Ç–∏ (—Ç–æ–ª—å–∫–æ –ø–æ X)
          const finalCorrectionX = targetCutoutX - analysisResult.sliceX;
          
          if (Math.abs(finalCorrectionX) > 0.0002) {
            console.log(`üîß Profile_${profileId}: –§–∏–Ω–∞–ª—å–Ω–∞—è –∫–æ—Ä—Ä–µ–∫—Ü–∏—è X: ${finalCorrectionX}px`);
            
            const currentSliderBox = await slider.boundingBox();
            if (currentSliderBox) {
              const currentSliderCenterX = currentSliderBox.x + currentSliderBox.width / 2;
              const finalTargetX = currentSliderCenterX + finalCorrectionX;
              console.log(`üîß Profile_${profileId}: –§–∏–Ω–∞–ª—å–Ω–∞—è –∫–æ—Ä—Ä–µ–∫—Ü–∏—è —Å ${currentSliderCenterX} –¥–æ ${finalTargetX}`);
              
              // –û—á–µ–Ω—å –ø–ª–∞–≤–Ω–∞—è —Ñ–∏–Ω–∞–ª—å–Ω–∞—è –∫–æ—Ä—Ä–µ–∫—Ü–∏—è —Ç–æ–ª—å–∫–æ –ø–æ X
              await page.mouse.move(finalTargetX, startY, { steps: 3 });
              await page.waitForTimeout(100);
            }
          }
        }
        
        // –î–µ–ª–∞–µ–º –µ—â–µ –æ–¥–∏–Ω —Å–∫—Ä–∏–Ω—à–æ—Ç –ø–æ—Å–ª–µ –∫–æ—Ä—Ä–µ–∫—Ü–∏–∏
        console.log(`üì∏ Profile_${profileId}: –î–µ–ª–∞–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç –ø–æ—Å–ª–µ –∫–æ—Ä—Ä–µ–∫—Ü–∏–∏...`);
        const screenshotAfterCorrection = await page.screenshot({ type: 'png' });
        
        // –ñ–¥–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        await page.waitForTimeout(2000);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏—Å—á–µ–∑–ª–∞ –ª–∏ –∫–∞–ø—á–∞
        const captchaStillVisible = await page.$('.geetest_box');
        if (!captchaStillVisible) {
          console.log(`‚úÖ Profile_${profileId}: Geetest CAPTCHA —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–π–¥–µ–Ω–∞ –ø–æ—Å–ª–µ –∫–æ—Ä—Ä–µ–∫—Ü–∏–∏`);
          return true;
        } else {
          console.log(`‚ö† Profile_${profileId}: CAPTCHA –Ω–µ –ø—Ä–æ–π–¥–µ–Ω–∞ –¥–∞–∂–µ –ø–æ—Å–ª–µ –∫–æ—Ä—Ä–µ–∫—Ü–∏–∏`);
          return false;
        }
      }
      
    } catch (error) {
      console.error(`‚úó Profile_${profileId}: –û—à–∏–±–∫–∞ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è Geetest CAPTCHA:`, error.message);
      return false;
    }
  }

  // –õ–æ–∫–∞–ª—å–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ Geetest v4 "Select in this order" –±–µ–∑ —Å—Ç–æ—Ä–æ–Ω–Ω–∏—Ö —Å–µ—Ä–≤–∏—Å–æ–≤ (–ø–µ—Ä–µ–±–æ—Ä –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–µ–π)
  async solveGeetestV4SelectOrder(page, profileId) {
    try {
      console.log(`ü§ñ Profile_${profileId}: –õ–æ–∫–∞–ª—å–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ —Ä–µ—à–∏—Ç—å Geetest v4 (select in this order)...`);
      // –ù–∞—Ö–æ–¥–∏–º —Ü–µ–ª–µ–≤–æ–π —Ñ—Ä–µ–π–º —Å –∫–∞–ø—á–µ–π (–≤–¥—Ä—É–≥ –æ–Ω–∞ –≤ iframe)
      let target = page;
      try {
        // –ë—ã—Å—Ç—Ä—ã–π –æ–ø—Ä–æ—Å –≤—Å–µ—Ö —Ñ—Ä–µ–π–º–æ–≤
        for (const f of page.frames()) {
          try {
            const hasBox = await f.$('.geetest_box');
            if (hasBox) { target = f; break; }
          } catch (_) {}
        }
      } catch (_) {}

      await target.waitForSelector('.geetest_box', { timeout: 10000 });

      const okButtonSelectors = ['text=OK', '.geetest_commit', '.geetest_btn_confirm', 'button:has-text("OK")'];
      const refreshSelectors = ['.geetest_refresh', '[class*="refresh"]'];

      // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è: k-–ø–µ—Ä–µ—Å—Ç–∞–Ω–æ–≤–∫–∏ –∏–∑ –º–∞—Å—Å–∏–≤–∞ (–±–µ–∑ –ø–æ–≤—Ç–æ—Ä–æ–≤)
      const kPermutations = (arr, k) => {
        const result = [];
        const used = Array(arr.length).fill(false);
        const current = [];
        const dfs = () => {
          if (current.length === k) { result.push(current.slice()); return; }
          for (let i = 0; i < arr.length; i++) {
            if (used[i]) continue;
            used[i] = true;
            current.push(arr[i]);
            dfs();
            current.pop();
            used[i] = false;
          }
        };
        dfs();
        return result;
      };

      let latestCroppedScreenshot = null; // –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏/—Ç–µ–ª–µ–≥—Ä–∞–º–∞ –ø—Ä–∏ –Ω–µ—É–¥–∞—á–µ

      // –î–æ 6 –∏—Ç–µ—Ä–∞—Ü–∏–π: –Ω–∞ –∫–∞–∂–¥–æ–π –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ–º –æ–±–ª–∞—Å—Ç—å, –¥–µ—Ç–µ–∫—Ç–∏–º —Ü–µ–ª–∏ –∏ –ø—Ä–æ–±—É–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–µ–π
      for (let round = 0; round < 6; round++) {
        if (page.isClosed && page.isClosed()) { console.log(`‚ö† Profile_${profileId}: –°—Ç—Ä–∞–Ω–∏—Ü–∞ –∑–∞–∫—Ä—ã—Ç–∞ (start round ${round+1})`); return false; }
        if (page.context && page.context().isClosed && page.context().isClosed()) { console.log(`‚ö† Profile_${profileId}: –ö–æ–Ω—Ç–µ–∫—Å—Ç –∑–∞–∫—Ä—ã—Ç (start round ${round+1})`); return false; }

        // –ù–∞—Ö–æ–¥–∏–º –æ–±–ª–∞—Å—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ –≤–Ω—É—Ç—Ä–∏ .geetest_box –Ω–∞ –∫–∞–∂–¥–æ–π –∏—Ç–µ—Ä–∞—Ü–∏–∏ (–≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ —Ü–µ–ª–µ–≤–æ–≥–æ —Ñ—Ä–µ–π–º–∞)
        const imgRect = await target.evaluate(() => {
          const box = document.querySelector('.geetest_box');
          if (!box) return null;
          const candidates = Array.from(box.querySelectorAll('canvas, img, div'));
          let best = null;
          let bestEl = null;
          const sx = window.scrollX, sy = window.scrollY;
          for (const el of candidates) {
            const style = window.getComputedStyle(el);
            const hasBg = style.backgroundImage && style.backgroundImage !== 'none';
            const isCanvasOrImg = el.tagName === 'CANVAS' || el.tagName === 'IMG';
            if (!isCanvasOrImg && !hasBg) continue;
            const r = el.getBoundingClientRect();
            if (r.width < 120 || r.height < 80) continue;
            const area = r.width * r.height;
            if (!best || area > best.area) {
              best = {
                client: { x: r.left, y: r.top, width: r.width, height: r.height },
                page: { x: r.left + sx, y: r.top + sy, width: r.width, height: r.height },
                area
              };
              bestEl = el;
            }
          }
          try { if (bestEl) bestEl.setAttribute('data-gt-main', '1'); } catch(_) {}
          return best ? best : null;
        });

        if (!imgRect) {
          console.log(`‚ö† Profile_${profileId}: –ù–µ –Ω–∞–π–¥–µ–Ω–∞ –æ–±–ª–∞—Å—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–∞–ø—á–∏ (–∏—Ç–µ—Ä–∞—Ü–∏—è ${round+1})`);
          // –û–±–Ω–æ–≤–∏–º –≤–∏–¥–∂–µ—Ç –∏ –ø–æ–ø—Ä–æ–±—É–µ–º –µ—â—ë —Ä–∞–∑ –≤ —Å–ª–µ–¥—É—é—â–µ–π –∏—Ç–µ—Ä–∞—Ü–∏–∏
          try {
            const sels = ['.geetest_refresh', '[class*="refresh"]'];
            for (const rsel of sels) { try { await target.click(rsel, { timeout: 200 }); } catch (e) {} }
            await page.waitForTimeout(600);
          } catch (_) {}
          continue;
        }

        const imgBoxClient = imgRect.client; // –¥–ª—è –∫–ª–∏–∫–æ–≤/elementFromPoint (–≤–Ω—É—Ç—Ä–∏ —Ñ—Ä–µ–π–º–∞)
        const imgBoxPage = imgRect.page;     // –¥–ª—è screenshot clip

        // –°–º–µ—â–µ–Ω–∏–µ iframe –≤ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞—Ö —Å—Ç—Ä–∞–Ω–∏—Ü—ã (–Ω—É–∂–Ω–æ –¥–ª—è page.mouse.*)
        let frameOffsetClient = { x: 0, y: 0 };
        try {
          if (target !== page) {
            const fe = await target.frameElement();
            if (fe) {
              const fb = await fe.boundingBox();
              if (fb) frameOffsetClient = { x: fb.x, y: fb.y };
            }
          }
        } catch(_) {}

        // –°–æ–±–∏—Ä–∞–µ–º –≥–µ–æ–º–µ—Ç—Ä–∏—é –≤–∏–¥–∂–µ—Ç–∞ –∏ –∏–∫–æ–Ω–æ–∫ –ø–æ—Ä—è–¥–∫–∞ (–≤ –≤–µ—Ä—Ö–Ω–µ–π —á–∞—Å—Ç–∏)
        const widgetInfo = await target.evaluate(() => {
          const w = document.querySelector('.geetest_box');
          if (!w) return null;
          const wr = w.getBoundingClientRect();
          const sx = window.scrollX, sy = window.scrollY;
          const all = Array.from(w.querySelectorAll('img, svg, [class*="icon"], [class*="order"], [class*="tip"], [class*="target"]'));
          const iconsClient = [];
          const iconsPage = [];
          for (const el of all) {
            const r = el.getBoundingClientRect();
            // –§–∏–ª—å—Ç—Ä—É–µ–º –º–µ–ª–∫–∏–µ —ç–ª–µ–º–µ–Ω—Ç—ã –≤ –≤–µ—Ä—Ö–Ω–µ–π –ø–æ–ª–æ—Å–µ
            if (r.width >= 14 && r.width <= 48 && r.height >= 14 && r.height <= 48 && (r.top - wr.top) < 130) {
              iconsClient.push({ x: r.left, y: r.top, w: r.width, h: r.height });
              iconsPage.push({ x: r.left + sx, y: r.top + sy, w: r.width, h: r.height });
            }
          }
          iconsClient.sort((a,b)=>a.x-b.x);
          iconsPage.sort((a,b)=>a.x-b.x);
          return {
            client: { x: wr.left, y: wr.top, width: wr.width, height: wr.height },
            page: { x: wr.left + sx, y: wr.top + sy, width: wr.width, height: wr.height },
            iconsClient,
            iconsPage
          };
        });
        if (!widgetInfo) {
          console.log(`‚ö† Profile_${profileId}: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –≥–µ–æ–º–µ—Ç—Ä–∏—é –≤–∏–¥–∂–µ—Ç–∞ (–∏—Ç–µ—Ä–∞—Ü–∏—è ${round+1})`);
        }

        // –ü—ã—Ç–∞–µ–º—Å—è –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ç—Ä–µ–±—É–µ–º–æ–µ —á–∏—Å–ª–æ —Ü–µ–ª–µ–π (–∏–∫–æ–Ω–∫–∏ –≤ –∑–∞–≥–æ–ª–æ–≤–∫–µ), fallback = 3
        const requiredTargets = await target.evaluate(() => {
          const header = document.querySelector('.geetest_box');
          if (!header) return 3;
          const headerRect = header.getBoundingClientRect();
          const icons = header.querySelectorAll('img, svg, [class*="icon"], [class*="tip"], [class*="order"], [class*="target"]');
          const count = [...icons].filter(el => {
            const r = el.getBoundingClientRect();
            return (r.top - headerRect.top) < 100 && r.height < 80 && r.width < 80;
          }).length;
          if (count >= 2 && count <= 5) return count;
          return 3;
        });

        // –î–µ–ª–∞–µ–º —Å–Ω–∏–º–æ–∫ –æ–±–ª–∞—Å—Ç–∏ ‚Äî –ø—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω–æ —á–µ—Ä–µ–∑ —Å–∞–º —ç–ª–µ–º–µ–Ω—Ç (—É—á–∏—Ç—ã–≤–∞–µ—Ç –º–∞—Å—à—Ç–∞–± –∏ iframe)
        let pngBuffer;
        try {
          const imgElHandle = await target.$('[data-gt-main="1"]');
          if (imgElHandle) pngBuffer = await imgElHandle.screenshot({ type: 'png' });
        } catch(_) {}
        if (!pngBuffer) {
          pngBuffer = await page.screenshot({ type: 'png', clip: { x: imgBoxPage.x, y: imgBoxPage.y, width: imgBoxPage.width, height: imgBoxPage.height } });
        }
        latestCroppedScreenshot = pngBuffer;
        const base64 = pngBuffer.toString('base64');
        let widgetB64 = null; let iconsRel = [];
        try {
          if (widgetInfo) {
            try {
              const widgetHandle = await target.$('.geetest_box');
              if (widgetHandle) {
                const widgetBuffer = await widgetHandle.screenshot({ type: 'png' });
                widgetB64 = widgetBuffer.toString('base64');
              }
            } catch(_) {}
            if (!widgetB64) {
              const widgetBuffer = await page.screenshot({ type: 'png', clip: { x: widgetInfo.page.x, y: widgetInfo.page.y, width: widgetInfo.page.width, height: widgetInfo.page.height } });
              widgetB64 = widgetBuffer.toString('base64');
            }
            widgetB64 = widgetBuffer.toString('base64');
            if (Array.isArray(widgetInfo.iconsPage)) {
              // –ü–µ—Ä–µ–≤–æ–¥–∏–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∏–∫–æ–Ω–æ–∫ (page) –≤ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–µ –∫ widget (page)
              iconsRel = widgetInfo.iconsPage.map(ic => ({
                x: Math.max(0, ic.x - widgetInfo.page.x),
                y: Math.max(0, ic.y - widgetInfo.page.y),
                w: ic.w,
                h: ic.h
              }));
            }
          }
        } catch (e) {
          // –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –ø—Ä–æ–±–ª–µ–º—ã —Å–∫—Ä–∏–Ω—à–æ—Ç–∞ –≤–∏–¥–∂–µ—Ç–∞
        }

        // –î–µ—Ç–µ–∫—Ç–∏—Ä—É–µ–º "–º–∏—à–µ–Ω–∏" —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–º–∏ –¥–∏–∞–ø–∞–∑–æ–Ω–∞–º–∏ HSV –∏ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–º –ø–æ—Ä–æ–≥–æ–º –ø–ª–æ—â–∞–¥–∏
        const det = await target.evaluate(async ({ imgB64, widgetB64, icons }) => {
          function rgbToHsv(r, g, b) {
            r /= 255; g /= 255; b /= 255;
            const max = Math.max(r,g,b), min = Math.min(r,g,b);
            let h, s, v = max;
            const d = max - min;
            s = max === 0 ? 0 : d / max;
            if (max === min) { h = 0; }
            else {
              switch (max) {
                case r: h = (g - b) / d + (g < b ? 6 : 0); break;
                case g: h = (b - r) / d + 2; break;
                case b: h = (r - g) / d + 4; break;
              }
              h /= 6;
            }
            return [h*360, s, v];
          }

          function hueInRanges(h, ranges) {
            return ranges.some(([h1, h2]) => {
              if (h1 <= h2) return h >= h1 && h <= h2; // –æ–±—ã—á–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª
              // –æ–±–µ—Ä–Ω—É—Ç—ã–π —á–µ—Ä–µ–∑ 360 (–Ω–∞–ø—Ä–∏–º–µ—Ä 345..360)
              return h >= h1 || h <= h2;
            });
          }

          function morphClose(mask, w, h) {
            // 3x3 dilation followed by erosion to fill small gaps
            const dilated = new Uint8Array(w*h);
            for (let y=0; y<h; y++) {
              for (let x=0; x<w; x++) {
                let on = 0;
                for (let dy=-1; dy<=1; dy++) {
                  for (let dx=-1; dx<=1; dx++) {
                    const nx = x+dx, ny = y+dy;
                    if (nx<0||ny<0||nx>=w||ny>=h) continue;
                    if (mask[ny*w+nx]) { on=1; break; }
                  }
                  if (on) break;
                }
                dilated[y*w+x] = on;
              }
            }
            const eroded = new Uint8Array(w*h);
            for (let y=0; y<h; y++) {
              for (let x=0; x<w; x++) {
                let all = 1;
                for (let dy=-1; dy<=1; dy++) {
                  for (let dx=-1; dx<=1; dx++) {
                    const nx = x+dx, ny = y+dy;
                    if (nx<0||ny<0||nx>=w||ny>=h) { all=0; break; }
                    if (!dilated[ny*w+nx]) { all=0; break; }
                  }
                  if (!all) break;
                }
                eroded[y*w+x] = all ? 1 : 0;
              }
            }
            return eroded;
          }

          function detectClusters(ctx, w, h) {
            const img = ctx.getImageData(0, 0, w, h);
            const data = img.data;
            let mask = new Uint8Array(w*h);
            // –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ —Ü–≤–µ—Ç–æ–≤—ã–µ –¥–∏–∞–ø–∞–∑–æ–Ω—ã: –∫—Ä–∞—Å–Ω—ã–π, –æ—Ä–∞–Ω–∂–µ–≤—ã–π/–∂–µ–ª—Ç—ã–π, –∑–µ–ª—ë–Ω—ã–π, —Å–∏–Ω–∏–π/—Ü–∏–∞–Ω, —Ñ–∏–æ–ª–µ—Ç–æ–≤—ã–π
            const hueRanges = [
              [345, 360],
              [0, 15],
              [15, 55],
              [50, 75],
              [75, 160],
              [160, 280],
              [280, 320]
            ];
            for (let y=0; y<h; y++) {
              for (let x=0; x<w; x++) {
                const i = (y*w + x) * 4;
                const [H,S,V] = rgbToHsv(data[i], data[i+1], data[i+2]);
                if (hueInRanges(H, hueRanges) && S > 0.18 && V > 0.28) mask[y*w + x] = 1;
              }
            }

            // –ú–æ—Ä—Ñ–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–µ –∑–∞–º—ã–∫–∞–Ω–∏–µ –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ —à—É–º–∞
            mask = morphClose(mask, w, h);
            // –ü—Ä–æ—Å—Ç–∞—è –∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏—è (BFS)
            const visited = new Uint8Array(w*h);
            const clusters = [];
            const qx = new Int32Array(w*h);
            const qy = new Int32Array(w*h);
            const minArea = Math.max(50, Math.floor(0.00025 * w * h));
            for (let y=0; y<h; y++) {
              for (let x=0; x<w; x++) {
                const idx = y*w + x;
                if (!mask[idx] || visited[idx]) continue;
                let head = 0, tail = 0;
                qx[tail] = x; qy[tail] = y; tail++;
                visited[idx] = 1;
                let sumX = 0, sumY = 0, cnt = 0, minX=x, minY=y, maxX=x, maxY=y;
                while (head < tail) {
                  const cx = qx[head];
                  const cy = qy[head];
                  head++;
                  sumX += cx; sumY += cy; cnt++;
                  if (cx<minX) minX=cx; if (cx>maxX) maxX=cx;
                  if (cy<minY) minY=cy; if (cy>maxY) maxY=cy;
                  for (let dy=-1; dy<=1; dy++) {
                    for (let dx=-1; dx<=1; dx++) {
                      if (dx===0 && dy===0) continue;
                      const nx = cx + dx, ny = cy + dy;
                      if (nx<0||ny<0||nx>=w||ny>=h) continue;
                      const nidx = ny*w + nx;
                      if (!mask[nidx] || visited[nidx]) continue;
                      visited[nidx] = 1;
                      qx[tail] = nx; qy[tail] = ny; tail++;
                    }
                  }
                }
                const area = cnt;
                const bboxW = maxX - minX + 1;
                const bboxH = maxY - minY + 1;
                if (area >= minArea && bboxW > 8 && bboxH > 8) {
                  // –¥–æ—É—Ç–æ—á–Ω—è–µ–º —Ü–µ–Ω—Ç—Ä –≤ –æ–∫—Ä–µ—Å—Ç–Ω–æ—Å—Ç–∏ 12px –ø–æ –º–∞—Å–∫–µ
                  const cx0 = Math.round(sumX/area), cy0 = Math.round(sumY/area);
                  let wx=0, wy=0, wsum=0;
                  const r = 12;
                  for (let dy=-r; dy<=r; dy++) {
                    for (let dx=-r; dx<=r; dx++) {
                      const x2 = cx0+dx, y2 = cy0+dy;
                      if (x2<0||y2<0||x2>=w||y2>=h) continue;
                      const m = mask[y2*w + x2];
                      if (!m) continue;
                      const wgt = 1;
                      wx += x2 * wgt; wy += y2 * wgt; wsum += wgt;
                    }
                  }
                  const rcx = wsum ? wx/wsum : cx0;
                  const rcy = wsum ? wy/wsum : cy0;
                  // –æ—Ü–µ–Ω–∏–º —Å—Ä–µ–¥–Ω–∏–π –æ—Ç—Ç–µ–Ω–æ–∫ –≤–æ–∫—Ä—É–≥ —Ü–µ–Ω—Ç—Ä–∞
                  let hueSum = 0, hueCnt = 0;
                  for (let dy=-8; dy<=8; dy++) {
                    for (let dx=-8; dx<=8; dx++) {
                      const x2 = Math.round(rcx)+dx, y2 = Math.round(rcy)+dy;
                      if (x2<0||y2<0||x2>=w||y2>=h) continue;
                      const ii = (y2*w + x2) * 4;
                      const [h,s,v] = rgbToHsv(data[ii], data[ii+1], data[ii+2]);
                      if (s > 0.12 && v > 0.2) { hueSum += h; hueCnt++; }
                    }
                  }
                  const meanHue = hueCnt ? (hueSum / hueCnt) : 0;
                  clusters.push({ cx: rcx, cy: rcy, area, hue: meanHue, bbox: { x:minX, y:minY, w:bboxW, h:bboxH } });
                }
              }
            }
            // –°–ª–∏—è–Ω–∏–µ –±–ª–∏–∑–∫–æ —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–Ω—ã—Ö –∫–ª–∞—Å—Ç–µ—Ä–æ–≤ (–¥–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏—è)
            const mergeDistance = Math.max(12, Math.floor(0.03 * Math.min(w, h)));
            const merged = [];
            clusters.sort((a,b)=>b.area-a.area);
            for (const c of clusters) {
              let mergedInto = false;
              for (const m of merged) {
                const dx = c.cx - m.cx;
                const dy = c.cy - m.cy;
                if (dx*dx + dy*dy <= mergeDistance*mergeDistance) {
                  // area-weighted centroid
                  const total = m.area + c.area;
                  m.cx = (m.cx*m.area + c.cx*c.area) / total;
                  m.cy = (m.cy*m.area + c.cy*c.area) / total;
                  m.area = total;
                  mergedInto = true;
                  break;
                }
              }
              if (!mergedInto) merged.push({ ...c });
            }
            merged.sort((a,b)=>b.area-a.area);
            return merged.slice(0, 8);
          }
          // –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –ø–∞—Ç—á–∞ –≤ –±–∏–Ω–∞—Ä–Ω—É—é –∫–∞—Ä—Ç—É –∫–æ–Ω—Ç—É—Ä–æ–≤ 24x24
          function edgeMaskFromPatch(patchCanvas) {
            const w = 24, h = 24;
            const tmp = document.createElement('canvas'); tmp.width=w; tmp.height=h;
            const tctx = tmp.getContext('2d');
            tctx.drawImage(patchCanvas, 0, 0, w, h);
            const d = tctx.getImageData(0,0,w,h).data;
            const mask = new Uint8Array(w*h);
            // –ø—Ä–æ—Å—Ç–æ–π –≥—Ä–∞–¥–∏–µ–Ω—Ç
            const idx = (x,y)=> (y*w + x)*4;
            const gray = new Float32Array(w*h);
            for (let y=0;y<h;y++) for (let x=0;x<w;x++) {
              const i=idx(x,y); const r=d[i], g=d[i+1], b=d[i+2]; gray[y*w+x]=(r+g+b)/3;
            }
            for (let y=1;y<h-1;y++) for (let x=1;x<w-1;x++) {
              const gx = -gray[y*w+(x-1)] + gray[y*w+(x+1)];
              const gy = -gray[(y-1)*w+x] + gray[(y+1)*w+x];
              const mag = Math.abs(gx)+Math.abs(gy);
              if (mag > 40) mask[y*w+x]=1;
            }
            return { w, h, mask };
          }

          function hamming(a,b) {
            const n = Math.min(a.mask.length, b.mask.length); let s=0; for (let i=0;i<n;i++) s += (a.mask[i]^b.mask[i]); return s / n;
          }

          return await new Promise((resolve) => {
            const img = new Image();
            const widgetImg = new Image();
            let imgLoaded=false, widgetLoaded = !widgetB64; // –µ—Å–ª–∏ –Ω–µ—Ç –≤–∏–¥–∂–µ—Ç–∞, —Å—á–∏—Ç–∞–µ–º –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–º
            const tryResolve = () => {
              if (!imgLoaded || !widgetLoaded) return;
              // –ü–æ–¥–≥–æ—Ç–æ–≤–∏–º –∫–∞–Ω–≤–∞—Å—ã
              const canvas = document.createElement('canvas');
              canvas.width = img.width; canvas.height = img.height;
              const ctx = canvas.getContext('2d');
              ctx.drawImage(img, 0, 0);
              const clusters = detectClusters(ctx, canvas.width, canvas.height);

              let iconMasks = [];
              if (widgetB64 && icons && icons.length) {
                const wCanvas = document.createElement('canvas');
                wCanvas.width = widgetImg.width; wCanvas.height = widgetImg.height;
                const wctx = wCanvas.getContext('2d');
                wctx.drawImage(widgetImg, 0, 0);
                iconMasks = icons.map(ic => {
                  const p = document.createElement('canvas');
                  p.width = Math.max(1, Math.min(wCanvas.width, Math.round(ic.w)));
                  p.height = Math.max(1, Math.min(wCanvas.height, Math.round(ic.h)));
                  try { p.getContext('2d').drawImage(wCanvas, Math.round(ic.x), Math.round(ic.y), Math.round(ic.w), Math.round(ic.h), 0, 0, p.width, p.height); } catch(_){}
                  return edgeMaskFromPatch(p);
                });
              }

              // –ü–æ–¥–≥–æ—Ç–æ–≤–∏–º –º–∞—Å–∫–∏ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ (–ø–æ –∏—Ö bbox —Å –Ω–µ–±–æ–ª—å—à–∏–º –ø–æ–ª–µ–º)
              const candMasks = clusters.map(c => {
                const pad = 6;
                const x = Math.max(0, Math.round(c.bbox.x - pad));
                const y = Math.max(0, Math.round(c.bbox.y - pad));
                const w = Math.min(canvas.width - x, Math.round(c.bbox.w + pad*2));
                const h = Math.min(canvas.height - y, Math.round(c.bbox.h + pad*2));
                const p = document.createElement('canvas'); p.width=Math.max(1,w); p.height=Math.max(1,h);
                try { p.getContext('2d').drawImage(canvas, x, y, w, h, 0, 0, p.width, p.height); } catch(_){}
                return edgeMaskFromPatch(p);
              });

              // –°–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –∏–∫–æ–Ω–æ–∫ —Å –∫–∞–Ω–¥–∏–¥–∞—Ç–∞–º–∏ (–∂–∞–¥–Ω–æ)
              const orderIndices = [];
              if (iconMasks.length >= 2 && candMasks.length >= iconMasks.length) {
                const used = new Set();
                for (let i=0;i<iconMasks.length;i++) {
                  let best=-1, bestD=1e9;
                  for (let j=0;j<candMasks.length;j++) {
                    if (used.has(j)) continue;
                    const d = hamming(iconMasks[i], candMasks[j]);
                    if (d < bestD) { bestD = d; best = j; }
                  }
                  if (best>=0) { used.add(best); orderIndices.push(best); }
                }
              }

              resolve({
                width: canvas.width,
                height: canvas.height,
                points: clusters.map(c=>({ x:c.cx, y:c.cy, area:c.area, hue: c.hue })),
                iconOrder: orderIndices
              });
            };
            img.onload = () => { imgLoaded=true; tryResolve(); };
            widgetImg.onload = () => { widgetLoaded=true; tryResolve(); };
            img.onerror = () => resolve([]);
            widgetImg.onerror = () => { widgetLoaded=true; tryResolve(); };
            img.src = `data:image/png;base64,${imgB64}`;
            if (widgetB64) widgetImg.src = `data:image/png;base64,${widgetB64}`;
          });
        }, { imgB64: base64, widgetB64, icons: iconsRel });

        if (!det || !det.points || det.points.length === 0) {
          console.log(`‚ö† Profile_${profileId}: –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ü–µ–ª–∏ –≤ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏ (–∏—Ç–µ—Ä–∞—Ü–∏—è ${round+1})`);
          // –ü—Ä–æ–±—É–µ–º –æ–±–Ω–æ–≤–∏—Ç—å –∏ –ø–µ—Ä–µ–π—Ç–∏ –∫ —Å–ª–µ–¥—É—é—â–µ–π –∏—Ç–µ—Ä–∞—Ü–∏–∏
          for (const rsel of refreshSelectors) { try { await target.click(rsel, { timeout: 200 }); } catch(e) {} }
          await page.waitForTimeout(600);
          continue;
        }

        // –ë–µ—Ä–µ–º –¥–æ 8 –∫—Ä—É–ø–Ω—ã—Ö –º–∏—à–µ–Ω–µ–π –∫–∞–∫ –ø—É–ª –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤
        const candidates = det.points.slice(0, Math.min(8, det.points.length));
        // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç—Ç–µ–Ω–∫–æ–≤ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        try {
          const hues = candidates.map(p => Math.round(p.hue || 0)).join(', ');
          console.log(`üéØ Profile_${profileId}: –ö–∞–Ω–¥–∏–¥–∞—Ç—ã=${candidates.length}, –æ—Ç—Ç–µ–Ω–∫–∏: [${hues}]`);
        } catch (_) {}

        // –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã –ø–µ—Ä–µ–≤–æ–¥–∞ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –∏–∑ canvas (device pixels) –≤ DOM (CSS px)
        const scaleX = det.width > 0 ? (det.width / imgBoxClient.width) : 1;
        const scaleY = det.height > 0 ? (det.height / imgBoxClient.height) : 1;

        // –§–æ—Ä–º–∏—Ä—É–µ–º –Ω–∞–±–æ—Ä –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–µ–π –¥–ª—è –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –¥–ª–∏–Ω –Ω–∞ —Å–ª—É—á–∞–π –ª–æ–∂–Ω–æ–≥–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è requiredTargets
        const ks = [];
        // –Ω–æ—Ä–º–∞–ª–∏–∑—É–µ–º —Ç—Ä–µ–±—É–µ–º–æ–µ —á–∏—Å–ª–æ –∫–ª–∏–∫–æ–≤ (–º–∏–Ω–∏–º—É–º 1)
        const normRequired = Math.max(1, Math.min(candidates.length, requiredTargets || 3));
        // –ø—Ä–æ–±—É–µ–º –≤–æ–∫—Ä—É–≥ —Ç—Ä–µ–±—É–µ–º–æ–≥–æ
        ks.push(normRequired);
        ks.push(normRequired + 1);
        ks.push(normRequired - 1);
        // –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –±–µ–∑–æ–ø–∞—Å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
        ks.push(3, 2, 1);
        // –≤–∞–ª–∏–¥–∏—Ä—É–µ–º –∏ —É–Ω–∏–∫–∞–ª–∏–∑–∏—Ä—É–µ–º
        const uniqKs = Array.from(new Set(ks.filter(k => k >= 1 && k <= Math.max(1, candidates.length))))
          .sort((a,b)=>a-b);

        let sequences = [];
        // –°–Ω–∞—á–∞–ª–∞ –ø—ã—Ç–∞–µ–º—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø–æ—Ä—è–¥–æ–∫ –ø–æ –∏–∫–æ–Ω–∫–∞–º, –µ—Å–ª–∏ —É–¥–∞–ª–æ—Å—å —Å–æ–ø–æ—Å—Ç–∞–≤–∏—Ç—å
        if (Array.isArray(det.iconOrder) && det.iconOrder.length >= 1) {
          const mapped = det.iconOrder
            .filter(idx => idx >=0 && idx < candidates.length)
            .map(idx => candidates[idx]);
          if (mapped.length >= 1) {
            // –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–æ –±–ª–∏–∑–∫–æ–≥–æ –∫ —Ç—Ä–µ–±—É–µ–º–æ–º—É —á–∏—Å–ª–∞
            sequences.push(mapped.slice(0, Math.min(mapped.length, normRequired)));
          }
        }
        for (const k of uniqKs) {
          const kseq = kPermutations(candidates, Math.min(k, candidates.length));
          // –≠–≤—Ä–∏—Å—Ç–∏–∫–∞ —Å–ª–µ–≤–∞-–Ω–∞–ø—Ä–∞–≤–æ ‚Äî –¥–æ–±–∞–≤–ª—è–µ–º –∫–∞–∫ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—É—é –¥–ª—è –∫–∞–∂–¥–æ–π –¥–ª–∏–Ω—ã
          if (candidates.length >= k) {
            const leftToRight = candidates.slice(0, k).sort((a,b)=>a.x-b.x);
            sequences.unshift(leftToRight);
          }
          sequences.push(...kseq);
        }
        // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–µ–π
        if (sequences.length > 200) sequences = sequences.slice(0, 200);

        if (sequences.length === 0) {
          // –∫—Ä–∞–π–Ω–∏–π —Ñ–æ–ª–±—ç–∫: –∫–ª–∏–∫–Ω–µ–º —Å–ª–µ–≤–∞-–Ω–∞–ø—Ä–∞–≤–æ –ø–æ 1-3 –∫—Ä—É–ø–Ω–µ–π—à–∏–º
          const fallbackK = Math.min(3, Math.max(1, candidates.length));
          const leftToRight = candidates.slice().sort((a,b)=>a.x-b.x).slice(0, fallbackK);
          sequences.push(leftToRight);
          console.log(`‚öôÔ∏è Profile_${profileId}: –§–æ–ª–±—ç–∫ ‚Äî —Ñ–æ—Ä–º–∏—Ä—É–µ–º ${fallbackK} –∫–ª–∏–∫–∞(–æ–≤) —Å–ª–µ–≤–∞-–Ω–∞–ø—Ä–∞–≤–æ`);
        }

        console.log(`üîß Profile_${profileId}: –ö–∞–Ω–¥–∏–¥–∞—Ç–æ–≤: ${candidates.length}, –ø—Ä–æ–±—É–µ–º –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–µ–π: ${sequences.length} (–∏—Ç–µ—Ä–∞—Ü–∏—è ${round+1})`);

        if (sequences.length === 0) {
          console.log(`‚ùå Profile_${profileId}: –ù–µ—Ç –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–µ–π –¥–ª—è –∫–ª–∏–∫–æ–≤ ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∏—Ç–µ—Ä–∞—Ü–∏—é`);
          continue;
        }

        // elementFromPoint –∏ –º—ã—à—å —Ä–∞–±–æ—Ç–∞—é—Ç –≤ client-–∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞—Ö; scroll –Ω–µ –Ω—É–∂–µ–Ω

        for (let attempt = 0; attempt < Math.min(sequences.length, 120); attempt++) {
          if (page.isClosed && page.isClosed()) { console.log(`‚ö† Profile_${profileId}: –°—Ç—Ä–∞–Ω–∏—Ü–∞ –∑–∞–∫—Ä—ã—Ç–∞ –≤–æ –≤—Ä–µ–º—è –ø–æ–ø—ã—Ç–∫–∏ ${attempt+1}`); return false; }
          if (page.context && page.context().isClosed && page.context().isClosed()) { console.log(`‚ö† Profile_${profileId}: –ö–æ–Ω—Ç–µ–∫—Å—Ç –∑–∞–∫—Ä—ã—Ç –≤–æ –≤—Ä–µ–º—è –ø–æ–ø—ã—Ç–∫–∏ ${attempt+1}`); return false; }
          const seq = sequences[attempt];
          console.log(`üîß Profile_${profileId}: –ü–æ–ø—ã—Ç–∫–∞ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ ${attempt+1}/${sequences.length} (–∏—Ç–µ—Ä–∞—Ü–∏—è ${round+1})`);
          if (!seq || !Array.isArray(seq) || seq.length === 0) {
            console.log(`‚ö† Profile_${profileId}: –ü—É—Å—Ç–∞—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å ‚Äî –ø—Ä–æ–ø—É—Å–∫`);
            continue;
          }

          // –ö–ª–∏–∫–∞–µ–º –ø–æ —Ü–µ–Ω—Ç—Ä–∞–º —Å –Ω–µ–±–æ–ª—å—à–∏–º –¥–∂–∏—Ç—Ç–µ—Ä–æ–º, —Å—Ç—Ä–æ–≥–æ –≤–Ω—É—Ç—Ä–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
          for (const p of seq) {
            if (page.isClosed && page.isClosed()) {
              console.log(`‚ö† Profile_${profileId}: –°—Ç—Ä–∞–Ω–∏—Ü–∞ –∑–∞–∫—Ä—ã—Ç–∞ –≤–æ –≤—Ä–µ–º—è –∫–ª–∏–∫–∞`);
              return false;
            }
            try {
              const relX = p.x / (scaleX || 1);
              const relY = p.y / (scaleY || 1);
              let clickX = imgBoxClient.x + relX + (Math.random()*4-2);
              let clickY = imgBoxClient.y + relY + (Math.random()*4-2);
              clickX = Math.max(imgBoxClient.x + 5, Math.min(imgBoxClient.x + imgBoxClient.width - 5, clickX));
              clickY = Math.max(imgBoxClient.y + 5, Math.min(imgBoxClient.y + imgBoxClient.height - 5, clickY));

              // Guard: —É–±–µ–¥–∏–º—Å—è, —á—Ç–æ —Ü–µ–ª—å –ø–æ–¥ –∫—É—Ä—Å–æ—Ä–æ–º –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –∫–∞–ø—á–µ (client coords)
              const inside = await target.evaluate(({cx, cy}) => {
                const el = document.elementFromPoint(cx, cy);
                const box = document.querySelector('.geetest_box');
                return !!(el && box && (el === box || box.contains(el)));
              }, { cx: Math.round(clickX - frameOffsetClient.x), cy: Math.round(clickY - frameOffsetClient.y) });
              if (!inside) {
                // –°–¥–≤–∏–≥–∞–µ–º —Ç–æ—á–∫—É –±–ª–∏–∂–µ –∫ —Ü–µ–Ω—Ç—Ä—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏ –ø—Ä–æ–±—É–µ–º –µ—â–µ —Ä–∞–∑
                const centerX = imgBoxClient.x + imgBoxClient.width/2;
                const centerY = imgBoxClient.y + imgBoxClient.height/2;
                clickX = (clickX + centerX) / 2;
                clickY = (clickY + centerY) / 2;
              }
              console.log(`üñ±Ô∏è Profile_${profileId}: –∫–ª–∏–∫ –ø–æ (${Math.round(clickX)}, ${Math.round(clickY)}) [inside=${inside}]`);
              // –ü–æ–ø—Ä–æ–±—É–µ–º –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å —Ñ–æ–∫—É—Å –æ–∫–Ω–∞/—Ñ—Ä–µ–π–º–∞ –ø–µ—Ä–µ–¥ –∫–ª–∏–∫–æ–º
              try { await target.evaluate(() => { if (document && document.body) document.body.focus(); }); } catch (_) {}
              await page.mouse.move(clickX, clickY, { steps: 6 });
              await page.waitForTimeout(160 + Math.random()*120);
              await page.mouse.click(clickX, clickY, { delay: 30 + Math.random()*60 });
              await page.waitForTimeout(220 + Math.random()*160);
            } catch (e) {
              const msg = e && e.message ? e.message : '';
              if (/closed/i.test(msg)) {
                console.log(`‚ö† Profile_${profileId}: –ö–ª–∏–∫ –ø—Ä–µ—Ä–≤–∞–Ω ‚Äî –∫–æ–Ω—Ç–µ–∫—Å—Ç/—Å—Ç—Ä–∞–Ω–∏—Ü–∞ –∑–∞–∫—Ä—ã—Ç—ã`);
                return false;
              }
              console.log(`‚ö† Profile_${profileId}: –û—à–∏–±–∫–∞ –∫–ª–∏–∫–∞: ${msg}`);
            }
          }

          // –ñ–º–µ–º OK (–µ—Å–ª–∏ –≤–∏–¥–Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∞—è –∫–Ω–æ–ø–∫–∞ –≤–Ω—É—Ç—Ä–∏ –≤–∏–¥–∂–µ—Ç–∞)
          try {
            const okSel = await target.evaluate((sels) => {
              for (const s of sels) {
                const el = document.querySelector(s);
                if (!el) continue;
                const r = el.getBoundingClientRect();
                const st = window.getComputedStyle(el);
                const visible = r.width > 0 && r.height > 0 && st.display !== 'none' && st.visibility !== 'hidden';
                const box = document.querySelector('.geetest_box');
                if (visible && box && (el === box || box.contains(el))) return s;
              }
              return null;
            }, okButtonSelectors);
            if (okSel) { await target.click(okSel, { timeout: 300 }); }
          } catch (e) {}

          // –ñ–¥–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞/–∏—Å—á–µ–∑–Ω–æ–≤–µ–Ω–∏—è
          await page.waitForTimeout(850);
          try {
            await target.waitForSelector('.geetest_box', { state: 'detached', timeout: 4500 });
            console.log(`‚úÖ Profile_${profileId}: Geetest –ø—Ä–æ–π–¥–µ–Ω–∞ (select-in-order)`);
            return true;
          } catch (_) {}

          // –ï—Å–ª–∏ —è–≤–Ω–æ –ø—Ä–æ—Å–∏—Ç –ø–æ–≤—Ç–æ—Ä–∏—Ç—å ‚Äî –æ–±–Ω–æ–≤–ª—è–µ–º –∏ –ø—Ä–µ—Ä—ã–≤–∞–µ–º –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π —Ü–∏–∫–ª, —á—Ç–æ–±—ã –ø–µ—Ä–µ—Å—á–∏—Ç–∞—Ç—å —Ü–µ–ª–∏
          try {
            const hint = await target.$('text=Please try again');
            if (hint) { for (const rsel of refreshSelectors) { try { await target.click(rsel, { timeout: 200 }); } catch(e) {} } break; }
          } catch (e) {}
        }
      }

      // –ï—Å–ª–∏ –¥–æ—à–ª–∏ —Å—é–¥–∞ ‚Äî –Ω–µ —É–¥–∞–ª–æ—Å—å
      console.log(`‚ö† Profile_${profileId}: –õ–æ–∫–∞–ª—å–Ω—ã–π —Ä–µ—à–∞—Ç–µ–ª—å Geetest v4 –Ω–µ —Å–ø—Ä–∞–≤–∏–ª—Å—è`);
      // –û—Ç–ø—Ä–∞–≤–∏–º –¥–µ–±–∞–≥-—Å–∫—Ä–∏–Ω—à–æ—Ç –æ–±–ª–∞—Å—Ç–∏ –≤ Telegram (–µ—Å–ª–∏ –±–æ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω)
      try {
        if (this.telegramBot && latestCroppedScreenshot) {
          await this.telegramBot.sendPhoto(config.telegramBot.chatId, latestCroppedScreenshot, {
            caption: `‚ö† Profile_${profileId}: –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–π—Ç–∏ select-in-order. –ù—É–∂–Ω–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ—Ä–æ–≥–æ–≤.`,
            filename: `gtv4_fail_${profileId}_${Date.now()}.png`
          });
        }
      } catch (e) {
        // –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏
      }
      return false;
    } catch (error) {
      console.error(`‚úó Profile_${profileId}: –û—à–∏–±–∫–∞ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ä–µ—à–µ–Ω–∏—è Geetest v4:`, error.message);
      return false;
    }
  }

  // –ê–∫—Ç–∏–≤–∞—Ü–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–∞ (—Å —Ç–∞–π–º–∞—É—Ç–æ–º –∏ –æ—Ç–ª–∞–¥–∫–æ–π)
  async activatePromoCode(page, profileId, promoCode) {
    try {
      console.log(`üéØ Profile_${profileId}: –ê–∫—Ç–∏–≤–∞—Ü–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–∞: ${promoCode}`);
      console.log(`üîß –û—Ç–ª–∞–¥–∫–∞: Profile_${profileId}: –ù–∞—á–∏–Ω–∞–µ–º –∞–∫—Ç–∏–≤–∞—Ü–∏—é –ø—Ä–æ–º–æ–∫–æ–¥–∞ ${promoCode}`);

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª–µ –≤–≤–æ–¥–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç (—Å —Ç–∞–π–º–∞—É—Ç–æ–º)
      const inputSelector = 'input[data-testid="voucher-form-promocode"]';
      console.log(`üîß –û—Ç–ª–∞–¥–∫–∞: Profile_${profileId}: –ò—â–µ–º –ø–æ–ª–µ –≤–≤–æ–¥–∞ —Å —Å–µ–ª–µ–∫—Ç–æ—Ä–æ–º: ${inputSelector}`);
      
      const inputExists = await page.$(inputSelector, { timeout: 5000 });
      
      if (!inputExists) {
        console.log(`‚ö† Profile_${profileId}: –ü–æ–ª–µ –≤–≤–æ–¥–∞ –ø—Ä–æ–º–æ–∫–æ–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ`);
        console.log(`üîß –û—Ç–ª–∞–¥–∫–∞: Profile_${profileId}: –ü–æ–ª–µ –≤–≤–æ–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –≤–æ–∑–º–æ–∂–Ω–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞`);
        return false;
      }

      console.log(`üîß Profile_${profileId}: –ü–æ–ª–µ –≤–≤–æ–¥–∞ –Ω–∞–π–¥–µ–Ω–æ, –≤–≤–æ–¥–∏–º –ø—Ä–æ–º–æ–∫–æ–¥`);
      console.log(`üîß –û—Ç–ª–∞–¥–∫–∞: Profile_${profileId}: –í–≤–æ–¥–∏–º –ø—Ä–æ–º–æ–∫–æ–¥: ${promoCode}`);
      
      // –û—á–∏—â–∞–µ–º –ø–æ–ª–µ –∏ –≤–≤–æ–¥–∏–º –ø—Ä–æ–º–æ–∫–æ–¥ (—Å —Ç–∞–π–º–∞—É—Ç–æ–º)
      await page.fill(inputSelector, promoCode, { timeout: 5000 });
      console.log(`üîß Profile_${profileId}: –ü—Ä–æ–º–æ–∫–æ–¥ –≤–≤–µ–¥–µ–Ω –≤ –ø–æ–ª–µ`);
      console.log(`üîß –û—Ç–ª–∞–¥–∫–∞: Profile_${profileId}: –ü—Ä–æ–º–æ–∫–æ–¥ —É—Å–ø–µ—à–Ω–æ –≤–≤–µ–¥–µ–Ω`);

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–Ω–æ–ø–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç - –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π XPath
      const buttonXPath = '/html/body/div[1]/div[3]/div/div/div[2]/div[2]/div/form/button/div/div';
      console.log(`üîß –û—Ç–ª–∞–¥–∫–∞: Profile_${profileId}: –ò—â–µ–º –∫–Ω–æ–ø–∫—É –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ —Å XPath: ${buttonXPath}`);
      
      const buttonExists = await page.$(`xpath=${buttonXPath}`, { timeout: 5000 });
      
      if (!buttonExists) {
        console.log(`‚ö† Profile_${profileId}: –ö–Ω–æ–ø–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –ø–æ XPath`);
        console.log(`üîß –û—Ç–ª–∞–¥–∫–∞: Profile_${profileId}: –ü—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–µ–ª–µ–∫—Ç–æ—Ä`);
        
        // –ü—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–µ–ª–µ–∫—Ç–æ—Ä
        const altButton = await page.$('div.base_content-NnRvn', { timeout: 5000 });
        if (!altButton) {
          console.log(`‚ö† Profile_${profileId}: –ö–Ω–æ–ø–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –Ω–∏ –æ–¥–Ω–∏–º —Å–µ–ª–µ–∫—Ç–æ—Ä–æ–º`);
          console.log(`üîß –û—Ç–ª–∞–¥–∫–∞: Profile_${profileId}: –ö–Ω–æ–ø–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –≤–æ–∑–º–æ–∂–Ω–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –∏–∑–º–µ–Ω–∏–ª–∞—Å—å`);
          return false;
        }
        console.log(`üîß Profile_${profileId}: –ö–Ω–æ–ø–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –Ω–∞–π–¥–µ–Ω–∞ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–º —Å–µ–ª–µ–∫—Ç–æ—Ä–æ–º`);
        console.log(`üîß –û—Ç–ª–∞–¥–∫–∞: Profile_${profileId}: –ù–∞–∂–∏–º–∞–µ–º –∫–Ω–æ–ø–∫—É –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ (–∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–µ–ª–µ–∫—Ç–æ—Ä)`);
        await page.click('div.base_content-NnRvn', { timeout: 5000 });
      } else {
        console.log(`üîß Profile_${profileId}: –ö–Ω–æ–ø–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –Ω–∞–π–¥–µ–Ω–∞ –ø–æ XPath, –Ω–∞–∂–∏–º–∞–µ–º`);
        console.log(`üîß –û—Ç–ª–∞–¥–∫–∞: Profile_${profileId}: –ù–∞–∂–∏–º–∞–µ–º –∫–Ω–æ–ø–∫—É –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ (XPath)`);
        await page.click(`xpath=${buttonXPath}`, { timeout: 5000 });
      }

      console.log(`üîß Profile_${profileId}: –ö–Ω–æ–ø–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –Ω–∞–∂–∞—Ç–∞, –Ω–∞—á–∏–Ω–∞–µ–º –ø–æ–∏—Å–∫ –∫–∞–ø—á–∏...`);
      
      // –ü–æ–∏—Å–∫ –∫–∞–ø—á–∏ –∫–∞–∂–¥—ã–µ 0.001 —Å–µ–∫—É–Ω–¥—ã
      let captchaFound = false;
      let attempts = 0;
      const maxAttempts = 5000; // –ú–∞–∫—Å–∏–º—É–º 5 —Å–µ–∫—É–Ω–¥ –ø–æ–∏—Å–∫–∞
      
      while (!captchaFound && attempts < maxAttempts) {
        try {
          const captchaElement = await page.$('.geetest_box');
          if (captchaElement) {
            console.log(`üîê Profile_${profileId}: –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ Geetest CAPTCHA (–ø–æ–ø—ã—Ç–∫–∞ ${attempts}), –Ω–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–µ...`);
            captchaFound = true;
            
            // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º AI-—Ä–µ—à–∞—Ç–µ–ª—å –¥–ª—è Geetest v4 select-in-order
            let captchaSolved = await this.solveGeetestV4SelectOrder(page, profileId);
            if (!captchaSolved) {
              // –§–æ–ª–±—ç–∫ –Ω–∞ —Å–ª–∞–π–¥–µ—Ä
              captchaSolved = await this.solveGeetestCaptcha(page, profileId);
            }
            
            if (captchaSolved) {
              console.log(`‚úÖ Profile_${profileId}: –ü—Ä–æ–º–æ–∫–æ–¥ ${promoCode} –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω —Å –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–µ–º –∫–∞–ø—á–∏`);
            } else {
              console.log(`‚ö† Profile_${profileId}: –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–π—Ç–∏ –∫–∞–ø—á—É –¥–ª—è –ø—Ä–æ–º–æ–∫–æ–¥–∞ ${promoCode}`);
              return false;
            }
            break;
          }
        } catch (error) {
          // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø–æ–∏—Å–∫–∞
        }
        
        attempts++;
        await page.waitForTimeout(1); // –ñ–¥–µ–º 0.001 —Å–µ–∫—É–Ω–¥—ã
      }
      
      if (!captchaFound) {
        // –ö–∞–ø—á–∞ –Ω–µ –ø–æ—è–≤–∏–ª–∞—Å—å, –ø—Ä–æ–º–æ–∫–æ–¥ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –±–µ–∑ –∫–∞–ø—á–∏
        console.log(`‚úÖ Profile_${profileId}: –ü—Ä–æ–º–æ–∫–æ–¥ ${promoCode} –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –±–µ–∑ –∫–∞–ø—á–∏ (–∫–∞–ø—á–∞ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –∑–∞ ${attempts} –ø–æ–ø—ã—Ç–æ–∫)`);
      }
      
      console.log(`‚úì Profile_${profileId}: –ü—Ä–æ–º–æ–∫–æ–¥ ${promoCode} –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω`);
      console.log(`üîß –û—Ç–ª–∞–¥–∫–∞: Profile_${profileId}: –ê–∫—Ç–∏–≤–∞—Ü–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–∞ ${promoCode} –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ`);
      
      // –ñ–¥–µ–º 2.1 —Å–µ–∫—É–Ω–¥—ã –∏ –¥–µ–ª–∞–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç
      setTimeout(async () => {
        try {
          const activationTime = new Date().toLocaleString('ru-RU');
          console.log(`üì∏ Profile_${profileId}: –î–µ–ª–∞–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç –ø–æ—Å–ª–µ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏...`);
          
          // –î–µ–ª–∞–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç
          const screenshot = await page.screenshot({ 
            type: 'png',
            fullPage: false,
            clip: { x: 0, y: 0, width: 1920, height: 1080 }
          });

          // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å —Ñ–æ—Ç–æ
          if (this.telegramBot) {
            const message = `üéØ –ü—Ä–æ–º–æ–∫–æ–¥ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!\n\n` +
              `üë§ –ü—Ä–æ—Ñ–∏–ª—å: ${profileId}\n` +
              `üé´ –ü—Ä–æ–º–æ–∫–æ–¥: ${promoCode}\n` +
              `‚è±Ô∏è –í—Ä–µ–º—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏: ${activationTime}\n` +
              `üìÖ –î–∞—Ç–∞: ${new Date().toLocaleString('ru-RU')}`;

            await this.telegramBot.sendPhoto(config.telegramBot.chatId, screenshot, {
              caption: message,
              filename: `activation_${profileId}_${Date.now()}.png`
            });
            console.log(`üì§ Profile_${profileId}: –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å —Ñ–æ—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Telegram`);
          }
        } catch (error) {
          console.log(`‚ö† Profile_${profileId}: –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:`, error.message);
        }
      }, 2100); // 2.1 —Å–µ–∫—É–Ω–¥—ã
      
      return true;
    } catch (error) {
      console.error(`‚úó Profile_${profileId}: –û—à–∏–±–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø—Ä–æ–º–æ–∫–æ–¥–∞ ${promoCode}:`, error.message);
      console.log(`üîß –û—Ç–ª–∞–¥–∫–∞: Profile_${profileId}: –ü–æ–ª–Ω–∞—è –æ—à–∏–±–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏:`, error);
      return false;
    }
  }

  // –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤ –∏ –∏—Ö –∞–∫—Ç–∏–≤–∞—Ü–∏—è —á–µ—Ä–µ–∑ EventHandler
  async monitorPromoCodes() {
    console.log('üîç –ó–∞–ø—É—Å–∫ REAL-TIME –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —á–µ—Ä–µ–∑ EventHandler...');
    
    // –§—É–Ω–∫—Ü–∏—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤ (–ø–æ–ª–Ω–æ—Å—Ç—å—é –Ω–µ–±–ª–æ–∫–∏—Ä—É—é—â–∞—è)
    const activatePromoCodes = (promoCodes) => {
      if (promoCodes.length > 0) {
        console.log(`üì® –ü–æ–ª—É—á–µ–Ω–æ ${promoCodes.length} –Ω–æ–≤—ã—Ö –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤:`, promoCodes);
        console.log(`üîß –û—Ç–ª–∞–¥–∫–∞: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –±—Ä–∞—É–∑–µ—Ä–æ–≤: ${this.pages.length}`);

        // –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –ø—Ä–æ–º–æ–∫–æ–¥—ã –≤–æ –≤—Å–µ—Ö –±—Ä–∞—É–∑–µ—Ä–∞—Ö –ú–ì–ù–û–í–ï–ù–ù–û (–ø–æ–ª–Ω–æ—Å—Ç—å—é –Ω–µ–±–ª–æ–∫–∏—Ä—É—é—â–µ)
        for (const { page, profileId } of this.pages) {
          console.log(`üîß –û—Ç–ª–∞–¥–∫–∞: –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –±—Ä–∞—É–∑–µ—Ä Profile_${profileId}`);
          
          for (const promoCode of promoCodes) {
            console.log(`üéØ –ú–ì–ù–û–í–ï–ù–ù–û –∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –ø—Ä–æ–º–æ–∫–æ–¥ ${promoCode} –≤ Profile_${profileId}`);
            console.log(`üîß –û—Ç–ª–∞–¥–∫–∞: –ó–∞–ø—É—Å–∫–∞–µ–º –∞–∫—Ç–∏–≤–∞—Ü–∏—é –ø—Ä–æ–º–æ–∫–æ–¥–∞ ${promoCode} –≤ —Ñ–æ–Ω–µ...`);
            
            // –ó–∞–ø—É—Å–∫–∞–µ–º –∞–∫—Ç–∏–≤–∞—Ü–∏—é –≤ —Ñ–æ–Ω–µ, –ù–ï –ñ–î–ï–ú –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
            setImmediate(() => {
              this.activatePromoCode(page, profileId, promoCode).then(result => {
                console.log(`üîß –û—Ç–ª–∞–¥–∫–∞: –ê–∫—Ç–∏–≤–∞—Ü–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–∞ ${promoCode} –≤ Profile_${profileId} –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º:`, result);
              }).catch(error => {
                console.log(`‚ö† –û—à–∏–±–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø—Ä–æ–º–æ–∫–æ–¥–∞ ${promoCode} –≤ Profile_${profileId}:`, error.message);
                console.log(`üîß –û—Ç–ª–∞–¥–∫–∞: –ü–æ–ª–Ω–∞—è –æ—à–∏–±–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏:`, error);
              });
            });
          }
        }
        
        console.log(`üîß –û—Ç–ª–∞–¥–∫–∞: –í—Å–µ –ø—Ä–æ–º–æ–∫–æ–¥—ã –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –Ω–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏—é`);
      } else {
        console.log(`üîß –û—Ç–ª–∞–¥–∫–∞: –ù–µ—Ç –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤ –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏`);
      }
    };

    // –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    const handleNewMessage = async (message) => {
      try {
        console.log('üîß –û—Ç–ª–∞–¥–∫–∞: –ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–æ:', message.id, message.message);
        console.log('üîß –û—Ç–ª–∞–¥–∫–∞: –¢–µ–∫—É—â–∏–π lastMessageId:', this.lastMessageId);
        
        if (message.id > this.lastMessageId) {
          console.log('üîß –û—Ç–ª–∞–¥–∫–∞: –û–±–Ω–æ–≤–ª—è–µ–º lastMessageId —Å', this.lastMessageId, '–Ω–∞', message.id);
          this.lastMessageId = message.id;
          const text = message.message || '';
          
          // –ö–ê–ñ–î–û–ï –°–û–û–ë–©–ï–ù–ò–ï = –í–ê–£–ß–ï–† (–±–µ–∑ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤)
          console.log('üîß –û—Ç–ª–∞–¥–∫–∞: –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è:', text);
          
          // –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã –∏ –±–µ—Ä–µ–º –≤–µ—Å—å —Ç–µ–∫—Å—Ç –∫–∞–∫ –≤–∞—É—á–µ—Ä
          const promoCode = text.trim();
          
          if (promoCode && promoCode.length > 0) {
            console.log('üéØ –ù–∞–π–¥–µ–Ω –≤–∞—É—á–µ—Ä –≤ real-time:', promoCode);
            console.log('üîß –û—Ç–ª–∞–¥–∫–∞: –ó–∞–ø—É—Å–∫–∞–µ–º –∞–∫—Ç–∏–≤–∞—Ü–∏—é –≤–∞—É—á–µ—Ä–∞...');
            activatePromoCodes([promoCode]); // –£–±–∏—Ä–∞–µ–º await - –Ω–µ–±–ª–æ–∫–∏—Ä—É—é—â–∏–π –≤—ã–∑–æ–≤
            console.log('üîß –û—Ç–ª–∞–¥–∫–∞: –ê–∫—Ç–∏–≤–∞—Ü–∏—è –≤–∞—É—á–µ—Ä–∞ –∑–∞–ø—É—â–µ–Ω–∞ –≤ —Ñ–æ–Ω–µ');
          } else {
            console.log('üîß –û—Ç–ª–∞–¥–∫–∞: –ü—É—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º');
          }
        } else {
          console.log('üîß –û—Ç–ª–∞–¥–∫–∞: –°–æ–æ–±—â–µ–Ω–∏–µ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ (ID <= lastMessageId)');
        }
      } catch (error) {
        console.log('‚ö† –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:', error.message);
        console.log('üîß –û—Ç–ª–∞–¥–∫–∞: –ü–æ–ª–Ω–∞—è –æ—à–∏–±–∫–∞:', error);
      }
    };

    // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    this.telegramClient.addEventHandler(async (event) => {
      if (event.className === 'UpdateNewChannelMessage') {
        const message = event.message;
        console.log('üîß –û—Ç–ª–∞–¥–∫–∞: UpdateNewChannelMessage –ø–æ–ª—É—á–µ–Ω–æ, message:', message);
        
        if (message && message.peerId) {
          console.log('üîß –û—Ç–ª–∞–¥–∫–∞: peerId:', message.peerId);
          
          if (message.peerId.channelId) {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –Ω–∞—à–µ–≥–æ –∫–∞–Ω–∞–ª–∞
            const channelId = message.peerId.channelId.toString();
            console.log('üîß –û—Ç–ª–∞–¥–∫–∞: –ü–æ–ª—É—á–µ–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–∑ –∫–∞–Ω–∞–ª–∞:', channelId, '–û–∂–∏–¥–∞–µ–º:', this.channelId);
            
            if (channelId === this.channelId) {
              console.log('‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –Ω—É–∂–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞!');
              await handleNewMessage(message);
            } else {
              console.log('‚ö† –°–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –¥—Ä—É–≥–æ–≥–æ –∫–∞–Ω–∞–ª–∞, –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º');
            }
          } else {
            console.log('‚ö† –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –∏–∑ –∫–∞–Ω–∞–ª–∞, –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º');
          }
        } else {
          console.log('‚ö† –ù–µ—Ç message –∏–ª–∏ peerId –≤ —Å–æ–±—ã—Ç–∏–∏');
        }
      }
    });

    console.log('üîÑ REAL-TIME –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–∞–ø—É—â–µ–Ω. –û–∂–∏–¥–∞–µ–º –Ω–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è...');
  }

  // –ó–∞–∫—Ä—ã—Ç–∏–µ –≤—Å–µ—Ö –±—Ä–∞—É–∑–µ—Ä–æ–≤
  async closeAllBrowsers() {
    console.log('–ó–∞–∫—Ä—ã—Ç–∏–µ –≤—Å–µ—Ö –±—Ä–∞—É–∑–µ—Ä–æ–≤...');
    
    // –°–Ω–∞—á–∞–ª–∞ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Å–µ –∫—É–∫–∏ (–µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–æ –≤ –∫–æ–Ω—Ñ–∏–≥–µ)
    if (config.cookies.saveOnClose) {
      for (let i = 0; i < this.pages.length; i++) {
        try {
          const { context, profileId, cookiesPath, page } = this.pages[i];
          
          // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫—É–∫–∏ –ø–µ—Ä–µ–¥ –∑–∞–∫—Ä—ã—Ç–∏–µ–º
          console.log(`–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫—É–∫–∏ –¥–ª—è Profile_${profileId}...`);
          
          // –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –∫—É–∫–∏ –Ω–∞–ø—Ä—è–º—É—é –∏–∑ –±—Ä–∞—É–∑–µ—Ä–∞
          try {
            const cookies = await context.cookies();
            if (cookies && cookies.length > 0) {
              await fs.ensureDir(path.dirname(cookiesPath));
              await fs.writeJson(cookiesPath, cookies, { spaces: 2 });
              console.log(`‚úì –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ ${cookies.length} –∫—É–∫–∏ –≤ ${path.basename(cookiesPath)}`);
            }
          } catch (error) {
            console.log(`‚ö† –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫—É–∫–∏: ${error.message}`);
          }
        } catch (error) {
          console.error(`‚úó –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫—É–∫–∏ Profile_${i + 1}:`, error.message);
        }
      }
    }
    
    // –ó–∞—Ç–µ–º –∑–∞–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ –±—Ä–∞—É–∑–µ—Ä—ã
    for (let i = 0; i < this.browsers.length; i++) {
      try {
        const { profileId } = this.pages[i];
        await this.browsers[i].close();
        console.log(`‚úì –ë—Ä–∞—É–∑–µ—Ä Profile_${profileId} –∑–∞–∫—Ä—ã—Ç`);
      } catch (error) {
        console.error(`‚úó –û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –±—Ä–∞—É–∑–µ—Ä–∞ ${i + 1}:`, error.message);
      }
    }
  }

  // –û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –∑–∞–ø—É—Å–∫–∞
  async start() {
    try {
      console.log('=== –ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞ mellstroy loot ===');

      // –°–Ω–∞—á–∞–ª–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Telegram
      console.log('üì± –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram...');
      const telegramConnected = await this.initTelegram();
      if (!telegramConnected) {
        console.log('‚ö† Telegram –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω, –Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ä–∞–±–æ—Ç—É...');
      }

      // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Telegram –±–æ—Ç–∞
      console.log('ü§ñ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram –±–æ—Ç–∞...');
      const botConnected = await this.initTelegramBot();
      if (!botConnected) {
        console.log('‚ö† Telegram –±–æ—Ç –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω, –Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ä–∞–±–æ—Ç—É...');
      }

      // –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π –ø—Ä–æ—Ñ–∏–ª–µ–π
      await this.createProfileDirectories();

      // –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö –±—Ä–∞—É–∑–µ—Ä–æ–≤
      await this.launchAllBrowsers();

      if (this.pages.length === 0) {
        throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –Ω–∏ –æ–¥–Ω–æ–≥–æ –±—Ä–∞—É–∑–µ—Ä–∞');
      }

      // –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ mellstroy
      await this.navigateToMellstroy();

      // –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤ (–µ—Å–ª–∏ Telegram –ø–æ–¥–∫–ª—é—á–µ–Ω)
      if (telegramConnected) {
        await this.monitorPromoCodes();
      } else {
        console.log('‚ö† –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤ –æ—Ç–∫–ª—é—á–µ–Ω (Telegram –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω)');
      }
      
      console.log('=== –°–∫—Ä–∏–ø—Ç –∑–∞–ø—É—â–µ–Ω —É—Å–ø–µ—à–Ω–æ ===');
      console.log(`–ê–∫—Ç–∏–≤–Ω—ã—Ö –±—Ä–∞—É–∑–µ—Ä–æ–≤: ${this.pages.length}`);
      console.log('–ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏...');

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ Telegram –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
      if (botConnected) {
        setTimeout(() => {
          this.sendStatusMessage();
        }, 3000); // –ñ–¥–µ–º 3 —Å–µ–∫—É–Ω–¥—ã –ø–æ—Å–ª–µ –∑–∞–ø—É—Å–∫–∞
      }
      
      // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
      const gracefulShutdown = async (signal) => {
        console.log(`\n–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª ${signal}...`);
        console.log('–ó–∞–∫—Ä—ã—Ç–∏–µ –±—Ä–∞—É–∑–µ—Ä–æ–≤...');
        await this.closeAllBrowsers();
        console.log('–°–∫—Ä–∏–ø—Ç –∑–∞–≤–µ—Ä—à–µ–Ω.');
        process.exit(0);
      };
      
      // –û–±—Ä–∞–±–æ—Ç–∫–∞ Ctrl+C (SIGINT)
      process.on('SIGINT', () => gracefulShutdown('SIGINT'));
      
      // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞ (SIGTERM)
      process.on('SIGTERM', () => gracefulShutdown('SIGTERM'));
      
      // –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –∏—Å–∫–ª—é—á–µ–Ω–∏–π
      process.on('uncaughtException', async (error) => {
        console.error('–ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ:', error);
        await this.closeAllBrowsers();
        process.exit(1);
      });
      
      // –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –ø—Ä–æ–º–∏—Å–æ–≤
      process.on('unhandledRejection', async (reason, promise) => {
        console.error('–ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –ø—Ä–æ–º–∏—Å–∞:', reason);
        await this.closeAllBrowsers();
        process.exit(1);
      });
      
    } catch (error) {
      console.error('–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
      await this.closeAllBrowsers();
      process.exit(1);
    }
  }
}

// –ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞
const script = new MellstroyLootScript();
script.start().catch(console.error);
 