const express = require('express');
const fs = require('fs-extra');
const path = require('path');
const TelegramBot = require('node-telegram-bot-api');
const axios = require('axios');

const app = express();
const PORT = 3000;

// ะะพะดะบะปััะตะฝะธะต ะบ ะฑะพัั ะดะปั ะพัะฟัะฐะฒะบะธ ัะฒะตะดะพะผะปะตะฝะธะน
const BOT_TOKEN = '7549540016:AAEuxl7RZbz7xLEbXrI3pF099doTN7Wsu58';
const bot = new TelegramBot(BOT_TOKEN, { polling: false });

// Middleware
app.use(express.json());
app.use(express.urlencoded({ extended: true }));
app.use(express.static(path.join(__dirname, 'public')));

// ะัะพััะฐั ะฐะฒัะพัะธะทะฐัะธั
const ADMIN_PASSWORD = 'admin123';
let isAuthenticated = false;

// ะคัะฝะบัะธะธ ะดะปั ัะฐะฑะพัั ั ะดะฐะฝะฝัะผะธ
async function readListings() {
  try {
    const listingsPath = path.join(__dirname, 'data', 'listings.json');
    return await fs.readJson(listingsPath);
  } catch (_) {
    return [];
  }
}

async function writeListings(listings) {
  const listingsPath = path.join(__dirname, 'data', 'listings.json');
  await fs.ensureDir(path.dirname(listingsPath));
  await fs.writeJson(listingsPath, listings, { spaces: 2 });
}

async function readUsers() {
  try {
    const usersPath = path.join(__dirname, 'data', 'users.json');
    return await fs.readJson(usersPath);
  } catch (_) {
    return {};
  }
}

// API ะดะปั ะฐะฒัะพัะธะทะฐัะธะธ
app.post('/api/login', (req, res) => {
  const { password } = req.body;
  
  if (password === ADMIN_PASSWORD) {
    isAuthenticated = true;
    res.json({ success: true });
  } else {
    res.status(401).json({ error: 'ะะตะฒะตัะฝัะน ะฟะฐัะพะปั' });
  }
});

app.post('/api/logout', (req, res) => {
  isAuthenticated = false;
  res.json({ success: true });
});

app.get('/api/auth/status', (req, res) => {
  res.json({ authenticated: isAuthenticated });
});

// Middleware ะดะปั ะฟัะพะฒะตัะบะธ ะฐะฒัะพัะธะทะฐัะธะธ
const requireAuth = (req, res, next) => {
  if (isAuthenticated) {
    next();
  } else {
    res.status(401).json({ error: 'ะะตะพะฑัะพะดะธะผะฐ ะฐะฒัะพัะธะทะฐัะธั' });
  }
};

// API ะดะปั ะฟะพะปััะตะฝะธั ะฒัะตั ะพะฑััะฒะปะตะฝะธะน
app.get('/api/listings', requireAuth, async (req, res) => {
  try {
    const listings = await readListings();
    
    // ะกะพััะธััะตะผ ะฟะพ ะดะฐัะต ัะพะทะดะฐะฝะธั (ะฝะพะฒัะต ัะฝะฐัะฐะปะฐ)
    listings.sort((a, b) => new Date(b.createdAt) - new Date(a.createdAt));
    
    res.json({
      success: true,
      listings: listings,
      total: listings.length
    });
  } catch (error) {
    console.error('ะัะธะฑะบะฐ ะฟะพะปััะตะฝะธั ะพะฑััะฒะปะตะฝะธะน:', error);
    res.status(500).json({ error: 'ะัะธะฑะบะฐ ะฟะพะปััะตะฝะธั ะพะฑััะฒะปะตะฝะธะน' });
  }
});

// API ะดะปั ัะดะฐะปะตะฝะธั ะพะฑััะฒะปะตะฝะธั ั ัะฒะตะดะพะผะปะตะฝะธะตะผ ะฐะฒัะพัะฐ
app.delete('/api/listings/:id', requireAuth, async (req, res) => {
  try {
    const { id } = req.params;
    const { reason } = req.body;
    const listings = await readListings();
    
    const listingIndex = listings.findIndex(l => l.id === id);
    if (listingIndex === -1) {
      return res.status(404).json({ error: 'ะะฑััะฒะปะตะฝะธะต ะฝะต ะฝะฐะนะดะตะฝะพ' });
    }
    
    const deletedListing = listings.splice(listingIndex, 1)[0];
    await writeListings(listings);
    
    // ะัะฟัะฐะฒะปัะตะผ ัะฒะตะดะพะผะปะตะฝะธะต ะฐะฒัะพัั
    try {
      const notificationMessage = `๐ซ ะะฐัะต ะพะฑััะฒะปะตะฝะธะต ัะดะฐะปะตะฝะพ\n\n` +
        `๐ ะขะพะฒะฐั: ${deletedListing.title || 'ะะตะท ะฝะฐะทะฒะฐะฝะธั'}\n` +
        `๐ฐ ะฆะตะฝะฐ: ${deletedListing.price || 'ะะต ัะบะฐะทะฐะฝะฐ'} โฝ\n` +
        `๐ ะะฐัะฐ ัะพะทะดะฐะฝะธั: ${new Date(deletedListing.createdAt).toLocaleString('ru-RU')}\n\n` +
        `โ ะัะธัะธะฝะฐ ัะดะฐะปะตะฝะธั:\n${reason || 'ะะฐัััะตะฝะธะต ะฟัะฐะฒะธะป ัะพะพะฑัะตััะฒะฐ'}\n\n` +
        `ะัะปะธ ั ะฒะฐั ะตััั ะฒะพะฟัะพัั, ะพะฑัะฐัะธัะตัั ะบ ะฐะดะผะธะฝะธัััะฐัะพัั.`;
      
      await bot.sendMessage(deletedListing.userId, notificationMessage);
      console.log(`โ ะฃะฒะตะดะพะผะปะตะฝะธะต ะพัะฟัะฐะฒะปะตะฝะพ ะฟะพะปัะทะพะฒะฐัะตะปั ${deletedListing.userId}`);
    } catch (botError) {
      console.error('โ ะัะธะฑะบะฐ ะพัะฟัะฐะฒะบะธ ัะฒะตะดะพะผะปะตะฝะธั:', botError.message);
    }
    
    res.json({ 
      success: true, 
      message: 'ะะฑััะฒะปะตะฝะธะต ัะดะฐะปะตะฝะพ ะธ ะฐะฒัะพั ัะฒะตะดะพะผะปะตะฝ',
      listing: deletedListing
    });
  } catch (error) {
    console.error('ะัะธะฑะบะฐ ัะดะฐะปะตะฝะธั ะพะฑััะฒะปะตะฝะธั:', error);
    res.status(500).json({ error: 'ะัะธะฑะบะฐ ัะดะฐะปะตะฝะธั ะพะฑััะฒะปะตะฝะธั' });
  }
});

// API ะดะปั ะฟะพะปััะตะฝะธั ััะฐัะธััะธะบะธ
app.get('/api/stats', requireAuth, async (req, res) => {
  try {
    const listings = await readListings();
    const users = await readUsers();
    
    const stats = {
      totalListings: listings.length,
      totalUsers: Object.keys(users).length,
      todayListings: listings.filter(l => {
        const today = new Date();
        const listingDate = new Date(l.createdAt);
        return listingDate.toDateString() === today.toDateString();
      }).length
    };
    
    res.json({ success: true, stats });
  } catch (error) {
    res.status(500).json({ error: 'ะัะธะฑะบะฐ ะฟะพะปััะตะฝะธั ััะฐัะธััะธะบะธ' });
  }
});

// API ะดะปั ะฟัะพะบัะธัะพะฒะฐะฝะธั ะธะทะพะฑัะฐะถะตะฝะธะน Telegram
app.get('/api/photo/:fileId', requireAuth, async (req, res) => {
  try {
    const { fileId } = req.params;
    
    // ะะพะปััะฐะตะผ ะฟััั ะบ ัะฐะนะปั ะพั Telegram
    const file = await bot.getFile(fileId);
    if (!file || !file.file_path) {
      return res.status(404).send('ะคะฐะนะป ะฝะต ะฝะฐะนะดะตะฝ');
    }
    
    // ะคะพัะผะธััะตะผ URL ะดะปั ัะบะฐัะธะฒะฐะฝะธั
    const telegramFileUrl = `https://api.telegram.org/file/bot${BOT_TOKEN}/${file.file_path}`;
    
    // ะกะบะฐัะธะฒะฐะตะผ ะธะทะพะฑัะฐะถะตะฝะธะต
    const response = await axios.get(telegramFileUrl, { 
      responseType: 'arraybuffer',
      timeout: 10000 
    });
    
    // ะัะฟัะฐะฒะปัะตะผ ะธะทะพะฑัะฐะถะตะฝะธะต ะบะปะธะตะฝัั
    res.set('Content-Type', response.headers['content-type'] || 'image/jpeg');
    res.send(Buffer.from(response.data));
    
  } catch (error) {
    console.error('ะัะธะฑะบะฐ ะฟะพะปััะตะฝะธั ัะพัะพ:', error.message);
    res.status(500).send('ะัะธะฑะบะฐ ะทะฐะณััะทะบะธ ะธะทะพะฑัะฐะถะตะฝะธั');
  }
});

// ะะปะฐะฒะฝะฐั ัััะฐะฝะธัะฐ
app.get('/', (req, res) => {
  res.sendFile(path.join(__dirname, 'public', 'index.html'));
});

// ะะฐะฟััะบ ัะตัะฒะตัะฐ
app.listen(PORT, () => {
  console.log(`๐ ะะตะฑ-ะฟะฐะฝะตะปั ะผะพะดะตัะฐัะธะธ ะทะฐะฟััะตะฝะฐ ะฝะฐ http://localhost:${PORT}`);
  console.log(`๐ ะะฐัะพะปั ะฐะดะผะธะฝะธัััะฐัะพัะฐ: ${ADMIN_PASSWORD}`);
});

module.exports = app;