class FeedControls {
  constructor() {
    this.userStates = new Map();
  }

  // –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –ª–µ–Ω—Ç—ã
  buildFeedKeyboard(ownerOnly = false, postLike = false) {
    if (ownerOnly) {
      return {
        reply_markup: {
          keyboard: [[{ text: 'üí§' }]],
          resize_keyboard: true,
          remove_keyboard: false
        }
      };
    }

    if (postLike) {
      return {
        reply_markup: {
          keyboard: [
            [{ text: 'üöÄ' }],
            [{ text: 'üí§' }]
          ],
          resize_keyboard: true
        }
      };
    }

    return {
      reply_markup: {
        keyboard: [
          [{ text: 'üëé' }, { text: '‚ù§Ô∏è' }],
          [{ text: 'üí§' }]
        ],
        resize_keyboard: true
      }
    };
  }

  // –í–∫–ª—é—á–µ–Ω–∏–µ —Ä–µ–∂–∏–º–∞ –ø–æ—Å–ª–µ –ª–∞–π–∫–∞
  async enablePostLike(bot, chatId, users, uid, writeUsers) {
    users[uid] = users[uid] || { profile: {}, platinum: false };
    users[uid].feed = users[uid].feed || {};
    users[uid].feed.mode = 'post_like';
    await writeUsers(users);
    
    await bot.sendMessage(chatId, '–ù–∞–∂–º–∏—Ç–µ üöÄ —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –Ω–æ–≤–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ', this.buildFeedKeyboard(false, true));
  }

  // –°–±—Ä–æ—Å —Ä–µ–∂–∏–º–∞ –∏ –ø–æ–∫–∞–∑ –±–∞–∑–æ–≤–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
  async resetModeAndShowBase(bot, chatId, users, uid, writeUsers) {
    users[uid] = users[uid] || { profile: {}, platinum: false };
    if (users[uid].feed) {
      users[uid].feed.mode = null;
    }
    await writeUsers(users);
    
    await bot.sendMessage(chatId, '\u200B', this.buildFeedKeyboard(false, false));
  }

  // –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–∑ —Å–µ—Å—Å–∏–∏
  async applyFromState(bot, chatId, users, uid) {
    const user = users[uid];
    if (!user || !user.feed) return;

    const ownerOnly = !!(user.feed.filters && user.feed.filters.ownerOnly);
    const postLike = user.feed.mode === 'post_like';

    try {
      await bot.sendMessage(chatId, '\u200B', this.buildFeedKeyboard(ownerOnly, postLike));
    } catch (error) {
      // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π
      if (!error.message.includes('message is not modified')) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è:', error);
      }
    }
  }

  // –ù–∞—á–∞–ª–æ —Å–æ–∑–¥–∞–Ω–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è
  async startAdCreation(bot, chatId) {
    this.userStates.set(chatId, { step: 'style' });
    
    const styles = require('./config').marketBot.styles;
    const buttons = styles.map(style => [{ text: style, callback_data: `style_${style}` }]);
    
    await bot.sendMessage(chatId, 'üé® –í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∏–ª—å –æ–¥–µ–∂–¥—ã:', {
      reply_markup: { inline_keyboard: buttons }
    });
  }

  // –ü–æ–∫–∞–∑–∞—Ç—å –ª–µ–Ω—Ç—É –æ–±—ä—è–≤–ª–µ–Ω–∏–π
  async showFeed(bot, chatId) {
    await bot.sendMessage(chatId, 'üìã –õ–µ–Ω—Ç–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏–π:\n\n–ü–æ–∫–∞ –∑–¥–µ—Å—å –ø—É—Å—Ç–æ...', {
      reply_markup: {
        inline_keyboard: [
          [{ text: 'üîÑ –û–±–Ω–æ–≤–∏—Ç—å', callback_data: 'refresh_feed' }],
          [{ text: '‚óÄÔ∏è –ù–∞–∑–∞–¥', callback_data: 'back_to_main' }]
        ]
      }
    });
  }
}

module.exports = new FeedControls();