const express = require('express');
const session = require('express-session');
const fs = require('fs-extra');
const path = require('path');

const app = express();
const PORT = 3000;

// Middleware
app.use(express.json());
app.use(express.urlencoded({ extended: true }));
app.use(express.static('public'));

// –ü—É—Ç–∏ –∫ –¥–∞–Ω–Ω—ã–º
const dataDir = path.resolve('./data');
const usersPath = path.join(dataDir, 'users.json');
const listingsPath = path.join(dataDir, 'listings.json');
const searchesPath = path.join(dataDir, 'searches.json');
const blockedUsersPath = path.join(dataDir, 'blocked_users.json');

// –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –¥–∞–Ω–Ω—ã–º–∏
async function readListings() {
  try {
    return await fs.readJson(listingsPath);
  } catch (_) {
    return [];
  }
}

async function writeListings(listings) {
  await fs.writeJson(listingsPath, listings, { spaces: 2 });
}

async function readUsers() {
  try {
    return await fs.readJson(usersPath);
  } catch (_) {
    return {};
  }
}

async function writeUsers(users) {
  await fs.writeJson(usersPath, users, { spaces: 2 });
}

async function readSearches() {
  try {
    return await fs.readJson(searchesPath);
  } catch (_) {
    return [];
  }
}

async function readBlockedUsers() {
  try {
    return await fs.readJson(blockedUsersPath);
  } catch (_) {
    return [];
  }
}

async function writeBlockedUsers(blockedUsers) {
  await fs.writeJson(blockedUsersPath, blockedUsers, { spaces: 2 });
}


// –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
app.get('/', (req, res) => {
  res.send(`
    <!DOCTYPE html>
    <html lang="ru">
    <head>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>–ú–æ–¥–µ—Ä–∞—Ü–∏—è Shomy Bay</title>
        <style>
            body {
                font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
                margin: 0;
                padding: 20px;
                background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
                min-height: 100vh;
            }
            .container {
                max-width: 1200px;
                margin: 0 auto;
                background: white;
                border-radius: 15px;
                box-shadow: 0 20px 40px rgba(0,0,0,0.1);
                overflow: hidden;
            }
            .header {
                background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
                color: white;
                padding: 30px;
                text-align: center;
            }
            .header h1 {
                margin: 0;
                font-size: 2.5em;
                font-weight: 300;
            }
            .nav {
                display: flex;
                background: #f8f9fa;
                border-bottom: 1px solid #e9ecef;
            }
            .nav-item {
                flex: 1;
                padding: 20px;
                text-align: center;
                text-decoration: none;
                color: #495057;
                font-weight: 500;
                transition: all 0.3s;
                border-right: 1px solid #e9ecef;
            }
            .nav-item:last-child {
                border-right: none;
            }
            .nav-item:hover {
                background: #e9ecef;
                color: #667eea;
            }
            .nav-item.active {
                background: #667eea;
                color: white;
            }
            .content {
                padding: 30px;
            }
            .stats {
                display: grid;
                grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
                gap: 20px;
                margin-bottom: 30px;
            }
            .stat-card {
                background: #f8f9fa;
                padding: 20px;
                border-radius: 10px;
                text-align: center;
                border-left: 4px solid #667eea;
            }
            .stat-number {
                font-size: 2em;
                font-weight: bold;
                color: #667eea;
                margin-bottom: 5px;
            }
            .stat-label {
                color: #6c757d;
                font-size: 0.9em;
            }
            .btn {
                background: #667eea;
                color: white;
                border: none;
                padding: 12px 24px;
                border-radius: 8px;
                cursor: pointer;
                font-size: 16px;
                transition: all 0.3s;
                text-decoration: none;
                display: inline-block;
                margin: 5px;
            }
            .btn:hover {
                background: #5a6fd8;
                transform: translateY(-2px);
            }
            .btn-danger {
                background: #dc3545;
            }
            .btn-danger:hover {
                background: #c82333;
            }
            .btn-success {
                background: #28a745;
            }
            .btn-success:hover {
                background: #218838;
            }
        </style>
    </head>
    <body>
        <div class="container">
            <div class="header">
                <h1>üéØ Shomy Bay –ú–æ–¥–µ—Ä–∞—Ü–∏—è</h1>
                <p>–ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è–º–∏ –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏</p>
            </div>
            <div class="nav">
                <a href="/" class="nav-item active">üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</a>
                <a href="/listings" class="nav-item">üìù –û–±—ä—è–≤–ª–µ–Ω–∏—è</a>
                <a href="/users" class="nav-item">üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏</a>
                <a href="/searches" class="nav-item">üîç –ü–æ–∏—Å–∫–∏</a>
            </div>
            <div class="content">
                <div class="stats" id="stats">
                    <div class="stat-card">
                        <div class="stat-number" id="total-listings">-</div>
                        <div class="stat-label">–í—Å–µ–≥–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–π</div>
                    </div>
                    <div class="stat-card">
                        <div class="stat-number" id="total-users">-</div>
                        <div class="stat-label">–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π</div>
                    </div>
                    <div class="stat-card">
                        <div class="stat-number" id="total-searches">-</div>
                        <div class="stat-label">–ü–æ–∏—Å–∫–æ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤</div>
                    </div>
                    <div class="stat-card">
                        <div class="stat-number" id="recent-listings">-</div>
                        <div class="stat-label">–ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24—á</div>
                    </div>
                </div>
                <div style="text-align: center; margin-top: 30px;">
                    <a href="/listings" class="btn">üìù –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è–º–∏</a>
                    <a href="/users" class="btn">üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏</a>
                </div>
            </div>
        </div>
        <script>
            // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            fetch('/api/stats')
                .then(response => response.json())
                .then(data => {
                    document.getElementById('total-listings').textContent = data.listings;
                    document.getElementById('total-users').textContent = data.users;
                    document.getElementById('total-searches').textContent = data.searches;
                    document.getElementById('recent-listings').textContent = data.recentListings;
                })
                .catch(error => console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error));
        </script>
    </body>
    </html>
  `);
});

// –°—Ç—Ä–∞–Ω–∏—Ü–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
app.get('/users', (req, res) => {
  res.sendFile(path.join(__dirname, 'public', 'users.html'));
});

// Serve sell listings page
app.get('/sell', (req, res) => {
  res.sendFile(path.join(__dirname, 'public', 'sell.html'));
});

// Serve seek listings page
app.get('/seek', (req, res) => {
  res.sendFile(path.join(__dirname, 'public', 'seek.html'));
});

// API –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
app.get('/api/stats', async (req, res) => {
  try {
    const listings = await readListings();
    const users = await readUsers();
    const searches = await readSearches();
    
    const now = new Date();
    const yesterday = new Date(now.getTime() - 24 * 60 * 60 * 1000);
    
    const recentListings = listings.filter(l => {
      const createdAt = new Date(l.createdAt);
      return createdAt > yesterday;
    }).length;
    
    res.json({
      success: true,
      stats: {
        totalListings: listings.length,
        todayListings: recentListings,
        totalUsers: Object.keys(users).length,
        totalSearches: searches.length
      }
    });
  } catch (error) {
    res.status(500).json({ error: error.message });
  }
});

// –°—Ç—Ä–∞–Ω–∏—Ü–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏–π
app.get('/listings', async (req, res) => {
  try {
    const listings = await readListings();
    const users = await readUsers();
    
    const listingsHtml = listings.map(listing => {
      const user = users[listing.userId] || {};
      const createdAt = new Date(listing.createdAt).toLocaleString('ru-RU');
      
      return `
        <div class="listing-card" style="border: 1px solid #e9ecef; border-radius: 10px; padding: 20px; margin-bottom: 20px; background: white;">
          <div style="display: flex; gap: 20px;">
            ${listing.photos && listing.photos.length > 0 ? 
              `<img src="https://api.telegram.org/file/bot7549540016:AAEuxl7RZbz7xLEbXrI3pF099doTN7Wsu58/${listing.photos[0]}" 
                   style="width: 150px; height: 150px; object-fit: cover; border-radius: 8px;" 
                   onerror="this.style.display='none'">` : 
              '<div style="width: 150px; height: 150px; background: #f8f9fa; border-radius: 8px; display: flex; align-items: center; justify-content: center; color: #6c757d;">–ù–µ—Ç —Ñ–æ—Ç–æ</div>'
            }
            <div style="flex: 1;">
              <h3 style="margin: 0 0 10px 0; color: #333;">${listing.title || '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'}</h3>
              <p style="margin: 5px 0; color: #666;"><strong>–°—Ç–∏–ª—å:</strong> ${listing.style || '–ù–µ —É–∫–∞–∑–∞–Ω'}</p>
                     <p style="margin: 5px 0; color: #666;"><strong>–¶–µ–Ω–∞:</strong> ${listing.price ? `${listing.price} ‚ÇΩ` : '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}</p>
              <p style="margin: 5px 0; color: #666;"><strong>–û–ø–∏—Å–∞–Ω–∏–µ:</strong> ${listing.description || '–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è'}</p>
              <p style="margin: 5px 0; color: #666;"><strong>–ü—Ä–æ–¥–∞–≤–µ—Ü:</strong> ${listing.username || listing.userId}</p>
              <p style="margin: 5px 0; color: #999; font-size: 0.9em;"><strong>–°–æ–∑–¥–∞–Ω–æ:</strong> ${createdAt}</p>
              <div style="margin-top: 15px;">
                <button class="btn btn-success" onclick="approveListing('${listing.id}')">‚úÖ –û–¥–æ–±—Ä–∏—Ç—å</button>
                <button class="btn btn-danger" onclick="rejectListing('${listing.id}')">‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å</button>
                <button class="btn" onclick="viewListing('${listing.id}')">üëÅÔ∏è –ü–æ–¥—Ä–æ–±–Ω–µ–µ</button>
              </div>
            </div>
          </div>
        </div>
      `;
    }).join('');
    
    res.send(`
      <!DOCTYPE html>
      <html lang="ru">
      <head>
          <meta charset="UTF-8">
          <meta name="viewport" content="width=device-width, initial-scale=1.0">
          <title>–û–±—ä—è–≤–ª–µ–Ω–∏—è - Shomy Bay</title>
          <style>
              body {
                  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
                  margin: 0;
                  padding: 20px;
                  background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
                  min-height: 100vh;
              }
              .container {
                  max-width: 1200px;
                  margin: 0 auto;
                  background: white;
                  border-radius: 15px;
                  box-shadow: 0 20px 40px rgba(0,0,0,0.1);
                  overflow: hidden;
              }
              .header {
                  background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
                  color: white;
                  padding: 30px;
                  text-align: center;
              }
              .nav {
                  display: flex;
                  background: #f8f9fa;
                  border-bottom: 1px solid #e9ecef;
              }
              .nav-item {
                  flex: 1;
                  padding: 20px;
                  text-align: center;
                  text-decoration: none;
                  color: #495057;
                  font-weight: 500;
                  transition: all 0.3s;
                  border-right: 1px solid #e9ecef;
              }
              .nav-item:last-child {
                  border-right: none;
              }
              .nav-item:hover {
                  background: #e9ecef;
                  color: #667eea;
              }
              .nav-item.active {
                  background: #667eea;
                  color: white;
              }
              .content {
                  padding: 30px;
              }
              .btn {
                  background: #667eea;
                  color: white;
                  border: none;
                  padding: 12px 24px;
                  border-radius: 8px;
                  cursor: pointer;
                  font-size: 16px;
                  transition: all 0.3s;
                  text-decoration: none;
                  display: inline-block;
                  margin: 5px;
              }
              .btn:hover {
                  background: #5a6fd8;
                  transform: translateY(-2px);
              }
              .btn-danger {
                  background: #dc3545;
              }
              .btn-danger:hover {
                  background: #c82333;
              }
              .btn-success {
                  background: #28a745;
              }
              .btn-success:hover {
                  background: #218838;
              }
          </style>
      </head>
      <body>
          <div class="container">
              <div class="header">
                  <h1>üìù –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è–º–∏</h1>
                  <p>–ú–æ–¥–µ—Ä–∞—Ü–∏—è –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π</p>
              </div>
              <div class="nav">
                  <a href="/" class="nav-item">üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</a>
                  <a href="/listings" class="nav-item active">üìù –û–±—ä—è–≤–ª–µ–Ω–∏—è</a>
                  <a href="/users" class="nav-item">üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏</a>
                  <a href="/searches" class="nav-item">üîç –ü–æ–∏—Å–∫–∏</a>
              </div>
              <div class="content">
                  <div style="margin-bottom: 20px;">
                      <a href="/" class="btn">‚Üê –ù–∞–∑–∞–¥ –∫ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ</a>
                  </div>
                  <div id="listings">
                      ${listingsHtml || '<p>–û–±—ä—è–≤–ª–µ–Ω–∏–π –ø–æ–∫–∞ –Ω–µ—Ç</p>'}
                  </div>
              </div>
          </div>
          <script>
              function approveListing(id) {
                  if (confirm('–û–¥–æ–±—Ä–∏—Ç—å —ç—Ç–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ? –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–ª—É—á–∏—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ.')) {
                      fetch('/api/listings/' + id + '/approve', { method: 'POST' })
                          .then(response => response.json())
                          .then(data => {
                              alert('–û–±—ä—è–≤–ª–µ–Ω–∏–µ –æ–¥–æ–±—Ä–µ–Ω–æ! –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–≤–µ–¥–æ–º–ª–µ–Ω.');
                              location.reload();
                          })
                          .catch(error => {
                              alert('–û—à–∏–±–∫–∞: ' + error.message);
                          });
                  }
              }
              
              function rejectListing(id) {
                  const reason = prompt('–£–∫–∞–∂–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ):', '–Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ø—Ä–∞–≤–∏–ª–∞–º —Ä–∞–∑–º–µ—â–µ–Ω–∏—è');
                  if (reason !== null) {
                      fetch('/api/listings/' + id + '/reject', { 
                          method: 'POST',
                          headers: {
                              'Content-Type': 'application/json'
                          },
                          body: JSON.stringify({ reason: reason || '–Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ø—Ä–∞–≤–∏–ª–∞–º —Ä–∞–∑–º–µ—â–µ–Ω–∏—è' })
                      })
                          .then(response => response.json())
                          .then(data => {
                              alert('–û–±—ä—è–≤–ª–µ–Ω–∏–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ! –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–ª—É—á–∏–ª —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ.');
                              location.reload();
                          })
                          .catch(error => {
                              alert('–û—à–∏–±–∫–∞: ' + error.message);
                          });
                  }
              }
              
              function viewListing(id) {
                  alert('–§—É–Ω–∫—Ü–∏—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ –¥–ª—è ID: ' + id);
              }
          </script>
      </body>
      </html>
    `);
  } catch (error) {
    res.status(500).send('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏–π: ' + error.message);
  }
});

// API –¥–ª—è –æ–¥–æ–±—Ä–µ–Ω–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è
app.post('/api/listings/:id/approve', async (req, res) => {
  try {
    const listings = await readListings();
    const listing = listings.find(l => l.id === req.params.id);
    if (!listing) {
      return res.status(404).json({ error: '–û–±—ä—è–≤–ª–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ' });
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª–µ –æ–¥–æ–±—Ä–µ–Ω–∏—è
    listing.approved = true;
    listing.approvedAt = new Date().toISOString();
    
    await writeListings(listings);
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ –æ–¥–æ–±—Ä–µ–Ω–∏–∏
    try {
      const axios = require('axios');
      const botToken = '7549540016:AAEuxl7RZbz7xLEbXrI3pF099doTN7Wsu58';
      const message = `‚úÖ –í–∞—à–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ "${listing.title || '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'}" –æ–¥–æ–±—Ä–µ–Ω–æ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º!\n\n–¢–µ–ø–µ—Ä—å –æ–Ω–æ –≤–∏–¥–Ω–æ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –≤ –ª–µ–Ω—Ç–µ. –£–¥–∞—á–∏ –≤ –ø—Ä–æ–¥–∞–∂–µ! üéâ`;
      
      await axios.post(`https://api.telegram.org/bot${botToken}/sendMessage`, {
        chat_id: listing.userId,
        text: message
      });
      
      console.log(`üì§ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ–¥–æ–±—Ä–µ–Ω–∏–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${listing.userId} –¥–ª—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è ${listing.id}`);
    } catch (notificationError) {
      console.log('–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ–¥–æ–±—Ä–µ–Ω–∏–∏:', notificationError.message);
    }
    
    res.json({ success: true, message: '–û–±—ä—è–≤–ª–µ–Ω–∏–µ –æ–¥–æ–±—Ä–µ–Ω–æ. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–≤–µ–¥–æ–º–ª–µ–Ω.' });
  } catch (error) {
    res.status(500).json({ error: error.message });
  }
});

// API –¥–ª—è –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è
app.post('/api/listings/:id/reject', async (req, res) => {
  try {
    const listings = await readListings();
    const listingIndex = listings.findIndex(l => l.id === req.params.id);
    if (listingIndex === -1) {
      return res.status(404).json({ error: '–û–±—ä—è–≤–ª–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ' });
    }
    
    const listing = listings[listingIndex];
    const userId = listing.userId;
    const reason = req.body.reason || '–Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ø—Ä–∞–≤–∏–ª–∞–º —Ä–∞–∑–º–µ—â–µ–Ω–∏—è';
    
    // –£–¥–∞–ª—è–µ–º –æ–±—ä—è–≤–ª–µ–Ω–∏–µ
    listings.splice(listingIndex, 1);
    await writeListings(listings);
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —á–µ—Ä–µ–∑ –±–æ—Ç–∞
    try {
      const axios = require('axios');
      const botToken = '7549540016:AAEuxl7RZbz7xLEbXrI3pF099doTN7Wsu58';
      const message = `‚ùå –í–∞—à–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ "${listing.title || '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'}" –Ω–µ –ø—Ä–æ—à–ª–æ –º–æ–¥–µ—Ä–∞—Ü–∏—é –∏ –±—ã–ª–æ —É–¥–∞–ª–µ–Ω–æ.\n\n–ü—Ä–∏—á–∏–Ω–∞: ${reason}\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ, —Å–æ–±–ª—é–¥–∞—è —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è.`;
      
      await axios.post(`https://api.telegram.org/bot${botToken}/sendMessage`, {
        chat_id: userId,
        text: message
      });
      
      console.log(`üì§ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${userId} –æ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è ${listing.id}`);
    } catch (notificationError) {
      console.log('–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é:', notificationError.message);
    }
    
    res.json({ success: true, message: '–û–±—ä—è–≤–ª–µ–Ω–∏–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ –∏ —É–¥–∞–ª–µ–Ω–æ. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–≤–µ–¥–æ–º–ª–µ–Ω.' });
  } catch (error) {
    res.status(500).json({ error: error.message });
  }
});

// –°—Ç—Ä–∞–Ω–∏—Ü–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
app.get('/users', async (req, res) => {
  try {
    const users = await readUsers();
    const listings = await readListings();
    
    const blockedUsers = await readBlockedUsers();
    
    const usersHtml = Object.entries(users).map(([userId, userData]) => {
      const userListings = listings.filter(l => String(l.userId) === userId);
      const lastActivity = userData.feed ? 
        new Date(Math.max(...(userData.feed.seen || []).map(id => {
          const listing = listings.find(l => l.id === id);
          return listing ? new Date(listing.createdAt).getTime() : 0;
        }))).toLocaleString('ru-RU') : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
      
      const isBlocked = blockedUsers.includes(userId);
      const blockStatus = isBlocked ? 
        '<span style="color: #dc3545; font-weight: bold;">üö´ –ó–ê–ë–õ–û–ö–ò–†–û–í–ê–ù</span>' : 
        '<span style="color: #28a745; font-weight: bold;">‚úÖ –ê–ö–¢–ò–í–ï–ù</span>';
      
      const blockButton = isBlocked ? 
        `<button class="btn btn-success" onclick="unbanUser('${userId}')">üîì –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å</button>` :
        `<button class="btn btn-danger" onclick="banUser('${userId}')">üö´ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å</button>`;
      
      const username = userData.profile?.username || userData.username || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
      const firstName = userData.profile?.firstName || userData.first_name || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
      
      return `
        <div class="user-card" style="border: 1px solid #e9ecef; border-radius: 10px; padding: 20px; margin-bottom: 20px; background: white; ${isBlocked ? 'opacity: 0.7; background: #f8f9fa;' : ''}">
          <div style="display: flex; justify-content: space-between; align-items: start;">
            <div>
              <h3 style="margin: 0 0 10px 0; color: #333;">ID: ${userId} ${blockStatus}</h3>
              <p style="margin: 5px 0; color: #666;"><strong>Username:</strong> @${username}</p>
              <p style="margin: 5px 0; color: #666;"><strong>–ò–º—è:</strong> ${firstName}</p>
              <p style="margin: 5px 0; color: #666;"><strong>–û–±—ä—è–≤–ª–µ–Ω–∏–π:</strong> ${userListings.length}</p>
              <p style="margin: 5px 0; color: #666;"><strong>–ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:</strong> ${lastActivity}</p>
              <p style="margin: 5px 0; color: #666;"><strong>–°—Ç–∞—Ç—É—Å —Å–µ—Å—Å–∏–∏:</strong> ${userData.session ? userData.session.flow : '–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π —Å–µ—Å—Å–∏–∏'}</p>
              ${userData.feed ? `
                <p style="margin: 5px 0; color: #666;"><strong>–í –ª–µ–Ω—Ç–µ:</strong> ${userData.feed.list ? userData.feed.list.length : 0} –æ–±—ä—è–≤–ª–µ–Ω–∏–π</p>
                <p style="margin: 5px 0; color: #666;"><strong>–ü—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–æ:</strong> ${userData.feed.seen ? userData.feed.seen.length : 0} –æ–±—ä—è–≤–ª–µ–Ω–∏–π</p>
              ` : ''}
              ${isBlocked && userData.blockedAt ? `<p style="margin: 5px 0; color: #dc3545;"><strong>–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω:</strong> ${new Date(userData.blockedAt).toLocaleString('ru-RU')}</p>` : ''}
            </div>
            <div>
              <button class="btn" onclick="viewUserListings('${userId}')">üìù –û–±—ä—è–≤–ª–µ–Ω–∏—è</button>
              <button class="btn" onclick="viewUserFeed('${userId}')">üëÅÔ∏è –õ–µ–Ω—Ç–∞</button>
              ${blockButton}
            </div>
          </div>
        </div>
      `;
    }).join('');
    
    res.send(`
      <!DOCTYPE html>
      <html lang="ru">
      <head>
          <meta charset="UTF-8">
          <meta name="viewport" content="width=device-width, initial-scale=1.0">
          <title>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ - Shomy Bay</title>
          <style>
              body {
                  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
                  margin: 0;
                  padding: 20px;
                  background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
                  min-height: 100vh;
              }
              .container {
                  max-width: 1200px;
                  margin: 0 auto;
                  background: white;
                  border-radius: 15px;
                  box-shadow: 0 20px 40px rgba(0,0,0,0.1);
                  overflow: hidden;
              }
              .header {
                  background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
                  color: white;
                  padding: 30px;
                  text-align: center;
              }
              .nav {
                  display: flex;
                  background: #f8f9fa;
                  border-bottom: 1px solid #e9ecef;
              }
              .nav-item {
                  flex: 1;
                  padding: 20px;
                  text-align: center;
                  text-decoration: none;
                  color: #495057;
                  font-weight: 500;
                  transition: all 0.3s;
                  border-right: 1px solid #e9ecef;
              }
              .nav-item:last-child {
                  border-right: none;
              }
              .nav-item:hover {
                  background: #e9ecef;
                  color: #667eea;
              }
              .nav-item.active {
                  background: #667eea;
                  color: white;
              }
              .content {
                  padding: 30px;
              }
              .btn {
                  background: #667eea;
                  color: white;
                  border: none;
                  padding: 12px 24px;
                  border-radius: 8px;
                  cursor: pointer;
                  font-size: 16px;
                  transition: all 0.3s;
                  text-decoration: none;
                  display: inline-block;
                  margin: 5px;
              }
              .btn:hover {
                  background: #5a6fd8;
                  transform: translateY(-2px);
              }
              .btn-danger {
                  background: #dc3545;
              }
              .btn-danger:hover {
                  background: #c82333;
              }
              .btn-success {
                  background: #28a745;
              }
              .btn-success:hover {
                  background: #218838;
              }
          </style>
      </head>
      <body>
          <div class="container">
              <div class="header">
                  <h1>üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏</h1>
                  <p>–ü—Ä–æ—Å–º–æ—Ç—Ä –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ –±–æ—Ç–∞</p>
              </div>
              <div class="nav">
                  <a href="/" class="nav-item">üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</a>
                  <a href="/listings" class="nav-item">üìù –û–±—ä—è–≤–ª–µ–Ω–∏—è</a>
                  <a href="/users" class="nav-item active">üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏</a>
                  <a href="/searches" class="nav-item">üîç –ü–æ–∏—Å–∫–∏</a>
              </div>
              <div class="content">
                  <div style="margin-bottom: 20px;">
                      <a href="/" class="btn">‚Üê –ù–∞–∑–∞–¥ –∫ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ</a>
                      <button class="btn btn-primary" onclick="updateUserData()" style="margin-left: 10px;">
                          üîÑ –û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
                      </button>
                  </div>
                  <div id="users">
                      ${usersHtml || '<p>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ–∫–∞ –Ω–µ—Ç</p>'}
                  </div>
              </div>
          </div>
          <script>
              function viewUserListings(userId) {
                  alert('–û–±—ä—è–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ' + userId + ' (—Ñ—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ)');
              }
              
              function viewUserFeed(userId) {
                  alert('–õ–µ–Ω—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ' + userId + ' (—Ñ—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ)');
              }
              
              async function banUser(userId) {
                  if (confirm('–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ' + userId + '?')) {
                      try {
                          const response = await fetch('/api/users/' + userId + '/block', { 
                              method: 'POST',
                              headers: { 'Content-Type': 'application/json' }
                          });
                          const data = await response.json();
                          
                          if (data.success) {
                              alert('‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω!');
                              location.reload();
                          } else {
                              alert('‚ùå ' + data.message);
                          }
                      } catch (error) {
                          alert('‚ùå –û—à–∏–±–∫–∞: ' + error.message);
                      }
                  }
              }
              
              async function unbanUser(userId) {
                  if (confirm('–†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ' + userId + '?')) {
                      try {
                          const response = await fetch('/api/users/' + userId + '/unblock', { 
                              method: 'POST',
                              headers: { 'Content-Type': 'application/json' }
                          });
                          const data = await response.json();
                          
                          if (data.success) {
                              alert('‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω!');
                              location.reload();
                          } else {
                              alert('‚ùå ' + data.message);
                          }
                      } catch (error) {
                          alert('‚ùå –û—à–∏–±–∫–∞: ' + error.message);
                      }
                  }
              }
              
              async function updateUserData() {
                  if (confirm('–û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ Telegram? –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è.')) {
                      try {
                          const button = event.target;
                          button.disabled = true;
                          button.textContent = 'üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ...';
                          
                          const response = await fetch('/api/users/update-from-telegram', { 
                              method: 'POST',
                              headers: { 'Content-Type': 'application/json' }
                          });
                          const data = await response.json();
                          
                          if (data.success) {
                              alert('‚úÖ ' + data.message);
                              location.reload();
                          } else {
                              alert('‚ùå ' + data.message);
                          }
                      } catch (error) {
                          alert('‚ùå –û—à–∏–±–∫–∞: ' + error.message);
                      } finally {
                          const button = event.target;
                          button.disabled = false;
                          button.textContent = 'üîÑ –û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π';
                      }
                  }
              }
          </script>
      </body>
      </html>
    `);
  } catch (error) {
    res.status(500).send('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ' + error.message);
  }
});

// –°—Ç—Ä–∞–Ω–∏—Ü–∞ –ø–æ–∏—Å–∫–æ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
app.get('/searches', async (req, res) => {
  try {
    const searches = await readSearches();
    
    const searchesHtml = searches.map(search => {
      const createdAt = new Date(search.createdAt).toLocaleString('ru-RU');
      
      return `
        <div class="search-card" style="border: 1px solid #e9ecef; border-radius: 10px; padding: 20px; margin-bottom: 20px; background: white;">
          <h3 style="margin: 0 0 10px 0; color: #333;">${search.query}</h3>
          <p style="margin: 5px 0; color: #666;"><strong>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</strong> ${search.username || search.userId}</p>
          <p style="margin: 5px 0; color: #666;"><strong>–î–µ—Ç–∞–ª–∏:</strong> ${search.details || '–ù–µ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏'}</p>
          <p style="margin: 5px 0; color: #999; font-size: 0.9em;"><strong>–°–æ–∑–¥–∞–Ω–æ:</strong> ${createdAt}</p>
          <div style="margin-top: 15px;">
            <button class="btn" onclick="viewSearch('${search.id}')">üëÅÔ∏è –ü–æ–¥—Ä–æ–±–Ω–µ–µ</button>
            <button class="btn btn-danger" onclick="deleteSearch('${search.id}')">üóëÔ∏è –£–¥–∞–ª–∏—Ç—å</button>
          </div>
        </div>
      `;
    }).join('');
    
    res.send(`
      <!DOCTYPE html>
      <html lang="ru">
      <head>
          <meta charset="UTF-8">
          <meta name="viewport" content="width=device-width, initial-scale=1.0">
          <title>–ü–æ–∏—Å–∫–∏ - Shomy Bay</title>
          <style>
              body {
                  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
                  margin: 0;
                  padding: 20px;
                  background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
                  min-height: 100vh;
              }
              .container {
                  max-width: 1200px;
                  margin: 0 auto;
                  background: white;
                  border-radius: 15px;
                  box-shadow: 0 20px 40px rgba(0,0,0,0.1);
                  overflow: hidden;
              }
              .header {
                  background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
                  color: white;
                  padding: 30px;
                  text-align: center;
              }
              .nav {
                  display: flex;
                  background: #f8f9fa;
                  border-bottom: 1px solid #e9ecef;
              }
              .nav-item {
                  flex: 1;
                  padding: 20px;
                  text-align: center;
                  text-decoration: none;
                  color: #495057;
                  font-weight: 500;
                  transition: all 0.3s;
                  border-right: 1px solid #e9ecef;
              }
              .nav-item:last-child {
                  border-right: none;
              }
              .nav-item:hover {
                  background: #e9ecef;
                  color: #667eea;
              }
              .nav-item.active {
                  background: #667eea;
                  color: white;
              }
              .content {
                  padding: 30px;
              }
              .btn {
                  background: #667eea;
                  color: white;
                  border: none;
                  padding: 12px 24px;
                  border-radius: 8px;
                  cursor: pointer;
                  font-size: 16px;
                  transition: all 0.3s;
                  text-decoration: none;
                  display: inline-block;
                  margin: 5px;
              }
              .btn:hover {
                  background: #5a6fd8;
                  transform: translateY(-2px);
              }
              .btn-danger {
                  background: #dc3545;
              }
              .btn-danger:hover {
                  background: #c82333;
              }
          </style>
      </head>
      <body>
          <div class="container">
              <div class="header">
                  <h1>üîç –ü–æ–∏—Å–∫–æ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã</h1>
                  <p>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–∏—Å–∫–æ–≤—ã–º–∏ –∑–∞–ø—Ä–æ—Å–∞–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π</p>
              </div>
              <div class="nav">
                  <a href="/" class="nav-item">üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</a>
                  <a href="/listings" class="nav-item">üìù –û–±—ä—è–≤–ª–µ–Ω–∏—è</a>
                  <a href="/users" class="nav-item">üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏</a>
                  <a href="/searches" class="nav-item active">üîç –ü–æ–∏—Å–∫–∏</a>
              </div>
              <div class="content">
                  <div style="margin-bottom: 20px;">
                      <a href="/" class="btn">‚Üê –ù–∞–∑–∞–¥ –∫ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ</a>
                  </div>
                  <div id="searches">
                      ${searchesHtml || '<p>–ü–æ–∏—Å–∫–æ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç</p>'}
                  </div>
              </div>
          </div>
          <script>
              function viewSearch(id) {
                  alert('–î–µ—Ç–∞–ª–∏ –ø–æ–∏—Å–∫–∞ ' + id + ' (—Ñ—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ)');
              }
              
              function deleteSearch(id) {
                  if (confirm('–£–¥–∞–ª–∏—Ç—å —ç—Ç–æ—Ç –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å?')) {
                      fetch('/api/searches/' + id, { method: 'DELETE' })
                          .then(response => response.json())
                          .then(data => {
                              alert('–ü–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å —É–¥–∞–ª–µ–Ω!');
                              location.reload();
                          })
                          .catch(error => {
                              alert('–û—à–∏–±–∫–∞: ' + error.message);
                          });
                  }
              }
          </script>
      </body>
      </html>
    `);
  } catch (error) {
    res.status(500).send('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–∏—Å–∫–æ–≤: ' + error.message);
  }
});

// API –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–∏—Å–∫–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
app.delete('/api/searches/:id', async (req, res) => {
  try {
    const searches = await readSearches();
    const searchIndex = searches.findIndex(s => s.id === req.params.id);
    if (searchIndex === -1) {
      return res.status(404).json({ error: '–ü–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω' });
    }
    
    searches.splice(searchIndex, 1);
    await fs.writeJson(searchesPath, searches, { spaces: 2 });
    res.json({ success: true, message: '–ü–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å —É–¥–∞–ª–µ–Ω' });
  } catch (error) {
    res.status(500).json({ error: error.message });
  }
});

// API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏–π
app.get('/api/listings', async (req, res) => {
  try {
    const listings = await readListings();
    const users = await readUsers();
    const { type } = req.query; // –§–∏–ª—å—Ç—Ä –ø–æ —Ç–∏–ø—É: 'sell' –∏–ª–∏ 'seek'
    
    // –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ —Ç–∏–ø—É, –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω
    let filteredListings = listings;
    if (type) {
      filteredListings = listings.filter(listing => listing.type === type);
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–ª–∞—Ç–∏–Ω–µ –∫ –∫–∞–∂–¥–æ–º—É –æ–±—ä—è–≤–ª–µ–Ω–∏—é
    const listingsWithPlatinum = filteredListings.map(listing => {
      const authorId = String(listing.userId);
      const author = users[authorId];
      const isPlatinum = author && author.platinum;
      
      return {
        ...listing,
        isPlatinum: isPlatinum || false,
        authorUsername: author?.profile?.username || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ',
        authorFirstName: author?.profile?.firstName || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
        typeText: listing.type === 'seek' ? '–ü–æ–∏—Å–∫' : '–ü—Ä–æ–¥–∞–∂–∞'
      };
    });
    
    res.json({
      success: true,
      listings: listingsWithPlatinum
    });
  } catch (error) {
    res.status(500).json({ success: false, error: error.message });
  }
});

// API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏–π –æ –ø—Ä–æ–¥–∞–∂–µ
app.get('/api/listings/sell', async (req, res) => {
  try {
    const listings = await readListings();
    const users = await readUsers();
    
    // –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –æ –ø—Ä–æ–¥–∞–∂–µ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é —Å—á–∏—Ç–∞–µ–º —Å—Ç–∞—Ä—ã–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –ø—Ä–æ–¥–∞–∂–µ–π)
    const sellListings = listings.filter(listing => !listing.type || listing.type === 'sell');
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–ª–∞—Ç–∏–Ω–µ –∫ –∫–∞–∂–¥–æ–º—É –æ–±—ä—è–≤–ª–µ–Ω–∏—é
    const listingsWithPlatinum = sellListings.map(listing => {
      const authorId = String(listing.userId);
      const author = users[authorId];
      const isPlatinum = author && author.platinum;
      
      return {
        ...listing,
        isPlatinum: isPlatinum || false,
        authorUsername: author?.profile?.username || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ',
        authorFirstName: author?.profile?.firstName || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
        typeText: '–ü—Ä–æ–¥–∞–∂–∞'
      };
    });
    
    res.json({
      success: true,
      listings: listingsWithPlatinum
    });
  } catch (error) {
    res.status(500).json({ success: false, error: error.message });
  }
});

// API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏–π –æ –ø–æ–∏—Å–∫–µ
app.get('/api/listings/seek', async (req, res) => {
  try {
    const listings = await readListings();
    const users = await readUsers();
    
    // –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –æ –ø–æ–∏—Å–∫–µ
    const seekListings = listings.filter(listing => listing.type === 'seek');
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–ª–∞—Ç–∏–Ω–µ –∫ –∫–∞–∂–¥–æ–º—É –æ–±—ä—è–≤–ª–µ–Ω–∏—é
    const listingsWithPlatinum = seekListings.map(listing => {
      const authorId = String(listing.userId);
      const author = users[authorId];
      const isPlatinum = author && author.platinum;
      
      return {
        ...listing,
        isPlatinum: isPlatinum || false,
        authorUsername: author?.profile?.username || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ',
        authorFirstName: author?.profile?.firstName || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
        typeText: '–ü–æ–∏—Å–∫'
      };
    });
    
    res.json({
      success: true,
      listings: listingsWithPlatinum
    });
  } catch (error) {
    res.status(500).json({ success: false, error: error.message });
  }
});

// API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
app.get('/api/users', async (req, res) => {
  try {
    const users = await readUsers();
    const usersList = Object.keys(users).map(userId => ({
      id: userId,
      username: users[userId].profile?.username || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ',
      firstName: users[userId].profile?.firstName || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
      platinum: users[userId].platinum || false,
      platinumActivatedAt: users[userId].platinumActivatedAt || null,
      pendingInvoice: users[userId].pendingInvoice || null
    }));
    
    res.json({
      success: true,
      users: usersList
    });
  } catch (error) {
    res.status(500).json({ success: false, error: error.message });
  }
});

// API –¥–ª—è –≤—ã–¥–∞—á–∏/–æ—Ç–∑—ã–≤–∞ –ø–ª–∞—Ç–∏–Ω—ã
app.post('/api/users/:userId/platinum', async (req, res) => {
  try {
    const { userId } = req.params;
    const { action, reason } = req.body; // action: 'grant' –∏–ª–∏ 'revoke'
    
    const users = await readUsers();
    const user = users[userId];
    
    if (!user) {
      return res.status(404).json({ success: false, error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' });
    }
    
    if (action === 'grant') {
      users[userId].platinum = true;
      users[userId].platinumActivatedAt = Date.now();
      users[userId].platinumExpiresAt = Date.now() + (30 * 24 * 60 * 60 * 1000); // 30 –¥–Ω–µ–π –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö
      users[userId].platinumType = 'granted'; // –¢–∏–ø: purchased (–∫—É–ø–ª–µ–Ω–æ) –∏–ª–∏ granted (–≤—ã–¥–∞–Ω–æ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º)
      users[userId].platinumGrantedBy = 'moderator';
      users[userId].platinumGrantReason = reason || '–í—ã–¥–∞–Ω–æ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º';
      
      await writeUsers(users);
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ –≤—ã–¥–∞—á–µ –ø–ª–∞—Ç–∏–Ω—ã
      try {
        const axios = require('axios');
        const botToken = '7549540016:AAEuxl7RZbz7xLEbXrI3pF099doTN7Wsu58';
        const message = `üéâ **–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!**\n\nüíé –í–∞–º –≤—ã–¥–∞–Ω–∞ –ø—Ä–∏–≤–∏–ª–µ–≥–∏—è Platinum!\n\n‚ú® –¢–µ–ø–µ—Ä—å –≤–∞—à–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è:\n‚Ä¢ –û—Ç–æ–±—Ä–∞–∂–∞—é—Ç—Å—è —Å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º +30%\n‚Ä¢ –ü–æ–∫–∞–∑—ã–≤–∞—é—Ç—Å—è –±–æ–ª—å—à–µ–º—É –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –ª—é–¥–µ–π\n‚Ä¢ –ò–º–µ—é—Ç —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –∑–Ω–∞—á–æ–∫ üíé Platinum\n\n–ü—Ä–∏—á–∏–Ω–∞: ${reason || '–í—ã–¥–∞–Ω–æ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º'}\n\n–°–æ–∑–¥–∞–≤–∞–π—Ç–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –∏ –ø–æ–ª—É—á–∞–π—Ç–µ –±–æ–ª—å—à–µ –æ—Ç–∫–ª–∏–∫–æ–≤!`;
        
        await axios.post(`https://api.telegram.org/bot${botToken}/sendMessage`, {
          chat_id: userId,
          text: message,
          parse_mode: 'Markdown'
        });
        
        console.log(`üì§ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –≤—ã–¥–∞—á–µ –ø–ª–∞—Ç–∏–Ω—ã –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${userId}`);
      } catch (notificationError) {
        console.log('–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –≤—ã–¥–∞—á–µ –ø–ª–∞—Ç–∏–Ω—ã:', notificationError.message);
      }
      
      res.json({
        success: true,
        message: '–ü–ª–∞—Ç–∏–Ω–∞ —É—Å–ø–µ—à–Ω–æ –≤—ã–¥–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é',
        user: {
          id: userId,
          username: user.profile?.username || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ',
          platinum: true
        }
      });
    } else if (action === 'revoke') {
      users[userId].platinum = false;
      users[userId].platinumRevokedAt = Date.now();
      users[userId].platinumRevokedBy = 'moderator';
      users[userId].platinumRevokeReason = reason || '–û—Ç–æ–∑–≤–∞–Ω–æ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º';
      
      await writeUsers(users);
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ–± –æ—Ç–∑—ã–≤–µ –ø–ª–∞—Ç–∏–Ω—ã
      try {
        const axios = require('axios');
        const botToken = '7549540016:AAEuxl7RZbz7xLEbXrI3pF099doTN7Wsu58';
        const message = `‚ö†Ô∏è **–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ**\n\nüíé –ü—Ä–∏–≤–∏–ª–µ–≥–∏—è Platinum –±—ã–ª–∞ –æ—Ç–æ–∑–≤–∞–Ω–∞.\n\n–ü—Ä–∏—á–∏–Ω–∞: ${reason || '–û—Ç–æ–∑–≤–∞–Ω–æ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º'}\n\n–í–∞—à–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è —Ç–µ–ø–µ—Ä—å –æ—Ç–æ–±—Ä–∞–∂–∞—é—Ç—Å—è –∫–∞–∫ –æ–±—ã—á–Ω—ã–µ. –ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –ø–æ–¥–¥–µ—Ä–∂–∫–µ.`;
        
        await axios.post(`https://api.telegram.org/bot${botToken}/sendMessage`, {
          chat_id: userId,
          text: message,
          parse_mode: 'Markdown'
        });
        
        console.log(`üì§ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—Ç–∑—ã–≤–µ –ø–ª–∞—Ç–∏–Ω—ã –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${userId}`);
      } catch (notificationError) {
        console.log('–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—Ç–∑—ã–≤–µ –ø–ª–∞—Ç–∏–Ω—ã:', notificationError.message);
      }
      
      res.json({
        success: true,
        message: '–ü–ª–∞—Ç–∏–Ω–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–æ–∑–≤–∞–Ω–∞ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è',
        user: {
          id: userId,
          username: user.profile?.username || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ',
          platinum: false
        }
      });
    } else {
      res.status(400).json({ success: false, error: '–ù–µ–≤–µ—Ä–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ "grant" –∏–ª–∏ "revoke"' });
    }
  } catch (error) {
    res.status(500).json({ success: false, error: error.message });
  }
});

// API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π
app.get('/api/photo/:photoId', async (req, res) => {
  try {
    const photoId = req.params.photoId;
    
    // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ –æ—Ç Telegram
    const TelegramBot = require('node-telegram-bot-api');
    const config = require('./config');
    const bot = new TelegramBot(config.marketBot.token);
    
    try {
      const fileInfo = await bot.getFile(photoId);
      const fileUrl = `https://api.telegram.org/file/bot${config.marketBot.token}/${fileInfo.file_path}`;
      
      // –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ —Ñ–∞–π–ª Telegram
      res.redirect(fileUrl);
    } catch (telegramError) {
      // –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ñ–æ—Ç–æ –æ—Ç Telegram, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∑–∞–≥–ª—É—à–∫—É
      res.status(404).json({ error: 'Photo not found' });
    }
  } catch (error) {
    res.status(500).json({ error: error.message });
  }
});

// API –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ Telegram
app.post('/api/users/update-from-telegram', async (req, res) => {
  try {
    const TelegramBot = require('node-telegram-bot-api');
    const config = require('./config');
    const bot = new TelegramBot(config.marketBot.token);
    
    const users = await readUsers();
    let updatedCount = 0;
    
    for (const userId in users) {
      const user = users[userId];
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –æ–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      if (!user.profile?.username || user.profile.username === '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ') {
        try {
          const userInfo = await bot.getChat(userId);
          if (userInfo) {
            user.profile = user.profile || {};
            user.profile.username = userInfo.username || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
            user.profile.firstName = userInfo.first_name || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
            updatedCount++;
          }
        } catch (error) {
          console.log(`–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}:`, error.message);
        }
      }
    }
    
    await writeUsers(users);
    res.json({ success: true, updatedCount, message: `–û–±–Ω–æ–≤–ª–µ–Ω–æ ${updatedCount} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π` });
  } catch (error) {
    res.status(500).json({ error: error.message });
  }
});

// API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
app.get('/api/blocked-users', async (req, res) => {
  try {
    const blockedUsers = await readBlockedUsers();
    const users = await readUsers();
    
    const blockedUsersWithInfo = blockedUsers.map(userId => {
      const userInfo = users[userId];
      return {
        userId,
        username: userInfo?.profile?.username || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ',
        firstName: userInfo?.profile?.firstName || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ',
        blockedAt: userInfo?.blockedAt || new Date().toISOString()
      };
    });
    
    res.json(blockedUsersWithInfo);
  } catch (error) {
    res.status(500).json({ error: error.message });
  }
});

// API –¥–ª—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
app.post('/api/users/:userId/block', async (req, res) => {
  try {
    const { userId } = req.params;
    const blockedUsers = await readBlockedUsers();
    
    if (!blockedUsers.includes(userId)) {
      blockedUsers.push(userId);
      await writeBlockedUsers(blockedUsers);
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
      const users = await readUsers();
      if (users[userId]) {
        users[userId].blockedAt = new Date().toISOString();
        await writeUsers(users);
      }
      
      res.json({ success: true, message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω' });
    } else {
      res.json({ success: false, message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω' });
    }
  } catch (error) {
    res.status(500).json({ error: error.message });
  }
});

// API –¥–ª—è —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
app.post('/api/users/:userId/unblock', async (req, res) => {
  try {
    const { userId } = req.params;
    const blockedUsers = await readBlockedUsers();
    const index = blockedUsers.indexOf(userId);
    
    if (index > -1) {
      blockedUsers.splice(index, 1);
      await writeBlockedUsers(blockedUsers);
      
      // –£–¥–∞–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–ª–æ–∫–∏—Ä–æ–≤–∫–µ –∏–∑ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const users = await readUsers();
      if (users[userId]) {
        delete users[userId].blockedAt;
        await writeUsers(users);
      }
      
      res.json({ success: true, message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω' });
    } else {
      res.json({ success: false, message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –±—ã–ª –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω' });
    }
  } catch (error) {
    res.status(500).json({ error: error.message });
  }
});

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
app.listen(PORT, () => {
  console.log(`üöÄ –°–µ—Ä–≤–µ—Ä –º–æ–¥–µ—Ä–∞—Ü–∏–∏ –∑–∞–ø—É—â–µ–Ω –Ω–∞ http://localhost:${PORT}`);
  console.log(`üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: http://localhost:${PORT}`);
  console.log(`üìù –û–±—ä—è–≤–ª–µ–Ω–∏—è: http://localhost:${PORT}/listings`);
});
