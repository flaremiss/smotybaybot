const axios = require('axios');
const config = require('./config');

class CryptoBotAPI {
  constructor() {
    this.token = config.cryptoBot.token;
    this.apiUrl = config.cryptoBot.apiUrl;
    this.platinumPriceRub = config.cryptoBot.platinumPriceRub;
    this.supportedCurrencies = config.cryptoBot.supportedCurrencies;
    this.defaultCurrency = config.cryptoBot.defaultCurrency;
    this.exchangeRates = null;
  }

  // –ü–æ–ª—É—á–∏—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –∫—É—Ä—Å—ã –≤–∞–ª—é—Ç
  async updateExchangeRates() {
    try {
      const response = await axios.get(`${this.apiUrl}/getExchangeRates`, {
        headers: {
          'Crypto-Pay-API-Token': this.token
        }
      });

      if (response.data.ok) {
        this.exchangeRates = response.data.result;
        return true;
      }
      return false;
    } catch (error) {
      console.error('‚ùå [CryptoBot] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫—É—Ä—Å–æ–≤:', error.message);
      return false;
    }
  }

  // –ü–æ–ª—É—á–∏—Ç—å –∫—É—Ä—Å –≤–∞–ª—é—Ç—ã –∫ —Ä—É–±–ª—é
  getCurrencyRate(currencyCode) {
    if (!this.exchangeRates) {
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞—Ç–∏—á–Ω—ã–µ –∫—É—Ä—Å—ã –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞
      const currency = this.supportedCurrencies.find(c => c.code === currencyCode);
      return currency ? currency.rate : 1;
    }

    const rate = this.exchangeRates.find(r => 
      r.source === currencyCode && r.target === 'RUB' && r.is_valid
    );
    return rate ? parseFloat(rate.rate) : 1;
  }

  // –†–∞—Å—Å—á–∏—Ç–∞—Ç—å —Å—É–º–º—É –≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –≤–∞–ª—é—Ç–µ
  calculateAmount(currencyCode) {
    const rate = this.getCurrencyRate(currencyCode);
    const amount = this.platinumPriceRub / rate;
    
    // –û–∫—Ä—É–≥–ª—è–µ–º –¥–æ —Ä–∞–∑—É–º–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∑–Ω–∞–∫–æ–≤
    if (amount < 0.01) {
      return Math.ceil(amount * 1000000) / 1000000; // 6 –∑–Ω–∞–∫–æ–≤ –¥–ª—è –æ—á–µ–Ω—å –º–∞–ª—ã—Ö —Å—É–º–º
    } else if (amount < 1) {
      return Math.ceil(amount * 1000) / 1000; // 3 –∑–Ω–∞–∫–∞ –¥–ª—è –º–∞–ª—ã—Ö —Å—É–º–º
    } else {
      return Math.ceil(amount * 100) / 100; // 2 –∑–Ω–∞–∫–∞ –¥–ª—è –æ–±—ã—á–Ω—ã—Ö —Å—É–º–º
    }
  }

  // –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≤–∞–ª—é—Ç
  getAvailableCurrencies() {
    return this.supportedCurrencies.map(currency => ({
      ...currency,
      amount: this.calculateAmount(currency.code),
      rate: this.getCurrencyRate(currency.code)
    }));
  }

  // –°–æ–∑–¥–∞—Ç—å —Å—á–µ—Ç –¥–ª—è –æ–ø–ª–∞—Ç—ã –ø–ª–∞—Ç–∏–Ω—ã
  async createPlatinumInvoice(userId, username = '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å', currencyCode = null) {
    try {
      // –û–±–Ω–æ–≤–ª—è–µ–º –∫—É—Ä—Å—ã –≤–∞–ª—é—Ç
      await this.updateExchangeRates();
      
      // –í—ã–±–∏—Ä–∞–µ–º –≤–∞–ª—é—Ç—É
      const currency = currencyCode || this.defaultCurrency;
      const amount = this.calculateAmount(currency);
      const currencyInfo = this.supportedCurrencies.find(c => c.code === currency);
      
      // CryptoBot API —Ç—Ä–µ–±—É–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≤ URL, –∞ –Ω–µ –≤ —Ç–µ–ª–µ –∑–∞–ø—Ä–æ—Å–∞
      const params = new URLSearchParams({
        asset: currency,
        amount: amount.toString(),
        description: `${currencyInfo?.emoji || 'üíé'} –ü–ª–∞—Ç–∏–Ω–∞ –¥–ª—è @${username} (${this.platinumPriceRub}‚ÇΩ)`,
        hidden_message: `–ü–æ–∫—É–ø–∫–∞ –ø—Ä–∏–≤–∏–ª–µ–≥–∏–∏ –ü–ª–∞—Ç–∏–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}`,
        paid_btn_name: 'openBot',
        paid_btn_url: `https://t.me/${config.marketBot.name.replace(' ', '_')}`,
        payload: JSON.stringify({
          type: 'platinum_purchase',
          userId: userId,
          username: username,
          currency: currency
        })
      });

      const response = await axios.post(`${this.apiUrl}/createInvoice?${params}`, {}, {
        headers: {
          'Crypto-Pay-API-Token': this.token
        }
      });

      console.log('üîç [CryptoBot] –û—Ç–≤–µ—Ç API:', JSON.stringify(response.data, null, 2));
      
      if (response.data.ok) {
        return {
          success: true,
          invoiceId: response.data.result.invoice_id,
          payUrl: response.data.result.pay_url,
          amount: amount,
          currency: currency,
          currencyName: currencyInfo?.name || currency,
          currencyEmoji: currencyInfo?.emoji || 'üíé',
          amountRub: this.platinumPriceRub
        };
      } else {
        console.error('‚ùå [CryptoBot] –û—à–∏–±–∫–∞ API:', response.data.error);
        return {
          success: false,
          error: response.data.error?.message || '–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å—á–µ—Ç–∞'
        };
      }
    } catch (error) {
      console.error('‚ùå [CryptoBot] –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å—á–µ—Ç–∞:', error.message);
      if (error.response) {
        console.error('‚ùå [CryptoBot] –°—Ç–∞—Ç—É—Å:', error.response.status);
        console.error('‚ùå [CryptoBot] –î–∞–Ω–Ω—ã–µ –æ—à–∏–±–∫–∏:', error.response.data);
      }
      return {
        success: false,
        error: error.message
      };
    }
  }

  // –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å —Å—á–µ—Ç–∞
  async checkInvoiceStatus(invoiceId) {
    try {
      const params = new URLSearchParams({
        invoice_ids: invoiceId
      });

      const response = await axios.get(`${this.apiUrl}/getInvoices?${params}`, {
        headers: {
          'Crypto-Pay-API-Token': this.token
        }
      });

      if (response.data.ok && response.data.result.items.length > 0) {
        const invoice = response.data.result.items[0];
        return {
          success: true,
          status: invoice.status,
          paid: invoice.status === 'paid',
          amount: invoice.amount,
          currency: invoice.asset
        };
      } else {
        return {
          success: false,
          error: '–°—á–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω'
        };
      }
    } catch (error) {
      console.error('‚ùå [CryptoBot] –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—á–µ—Ç–∞:', error.message);
      return {
        success: false,
        error: error.message
      };
    }
  }

  // –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–µ
  async getMe() {
    try {
      const response = await axios.get(`${this.apiUrl}/getMe`, {
        headers: {
          'Crypto-Pay-API-Token': this.token
        }
      });

      if (response.data.ok) {
        return {
          success: true,
          bot: response.data.result
        };
      } else {
        return {
          success: false,
          error: response.data.error?.message || '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏'
        };
      }
    } catch (error) {
      console.error('‚ùå [CryptoBot] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏:', error.message);
      return {
        success: false,
        error: error.message
      };
    }
  }

  // –ü–æ–ª—É—á–∏—Ç—å –∫—É—Ä—Å—ã –≤–∞–ª—é—Ç
  async getExchangeRates() {
    try {
      const response = await axios.get(`${this.apiUrl}/getExchangeRates`, {
        headers: {
          'Crypto-Pay-API-Token': this.token
        }
      });

      if (response.data.ok) {
        return {
          success: true,
          rates: response.data.result
        };
      } else {
        return {
          success: false,
          error: response.data.error?.message || '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫—É—Ä—Å–æ–≤'
        };
      }
    } catch (error) {
      console.error('‚ùå [CryptoBot] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫—É—Ä—Å–æ–≤:', error.message);
      return {
        success: false,
        error: error.message
      };
    }
  }
}

module.exports = new CryptoBotAPI();
