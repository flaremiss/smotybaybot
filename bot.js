const fs = require('fs-extra');
const path = require('path');
const TelegramBot = require('node-telegram-bot-api');
const config = require('./config');
const cryptoBot = require('./cryptobot');

// –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
async function readBlockedUsers() {
  try {
    return await fs.readJson('./data/blocked_users.json');
  } catch {
    return [];
  }
}

async function isUserBlocked(userId) {
  const blockedUsers = await readBlockedUsers();
  return blockedUsers.includes(String(userId));
}
const feedControls = require('./feed_controls');

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ—Ö–æ–∂–µ—Å—Ç–∏ —Å–ª–æ–≤ (—É—á–∏—Ç—ã–≤–∞–µ—Ç –æ–ø–µ—á–∞—Ç–∫–∏)
function isSimilar(str1, str2) {
  if (!str1 || !str2) return false;
  
  // –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã –∏ –ø—Ä–∏–≤–æ–¥–∏–º –∫ –Ω–∏–∂–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É
  str1 = str1.toLowerCase().trim();
  str2 = str2.toLowerCase().trim();
  
  // –¢–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
  if (str1 === str2) return true;
  
  // –û–¥–Ω–æ —Å–ª–æ–≤–æ —Å–æ–¥–µ—Ä–∂–∏—Ç –¥—Ä—É–≥–æ–µ
  if (str1.includes(str2) || str2.includes(str1)) return true;
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –õ–µ–≤–µ–Ω—à—Ç–µ–π–Ω–∞ –¥–ª—è –∫–æ—Ä–æ—Ç–∫–∏—Ö —Å–ª–æ–≤
  if (str1.length <= 15 && str2.length <= 15) {
    const distance = levenshteinDistance(str1, str2);
    const maxLength = Math.max(str1.length, str2.length);
    const similarity = 1 - (distance / maxLength);
    
    // –ï—Å–ª–∏ –ø–æ—Ö–æ–∂–µ—Å—Ç—å –±–æ–ª—å—à–µ 70%, —Å—á–∏—Ç–∞–µ–º –ø–æ—Ö–æ–∂–∏–º–∏
    return similarity > 0.7;
  }
  
  return false;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã—á–∏—Å–ª–µ–Ω–∏—è —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è –õ–µ–≤–µ–Ω—à—Ç–µ–π–Ω–∞
function levenshteinDistance(str1, str2) {
  const matrix = [];
  
  for (let i = 0; i <= str2.length; i++) {
    matrix[i] = [i];
  }
  
  for (let j = 0; j <= str1.length; j++) {
    matrix[0][j] = j;
  }
  
  for (let i = 1; i <= str2.length; i++) {
    for (let j = 1; j <= str1.length; j++) {
      if (str2.charAt(i - 1) === str1.charAt(j - 1)) {
        matrix[i][j] = matrix[i - 1][j - 1];
      } else {
        matrix[i][j] = Math.min(
          matrix[i - 1][j - 1] + 1, // –∑–∞–º–µ–Ω–∞
          matrix[i][j - 1] + 1,     // –≤—Å—Ç–∞–≤–∫–∞
          matrix[i - 1][j] + 1      // —É–¥–∞–ª–µ–Ω–∏–µ
        );
      }
    }
  }
  
  return matrix[str2.length][str1.length];
}

// Ensure data directory
const dataDir = path.resolve('./data');
const usersPath = path.join(dataDir, 'users.json');
const listingsPath = path.join(dataDir, 'listings.json');

async function ensureDataFiles() {
  await fs.ensureDir(dataDir);
  if (!(await fs.pathExists(usersPath))) await fs.writeJson(usersPath, {}, { spaces: 2 });
  if (!(await fs.pathExists(listingsPath))) await fs.writeJson(listingsPath, [], { spaces: 2 });
}

async function readUsers() {
  try { return await fs.readJson(usersPath); } catch (_) { return {}; }
}

async function writeUsers(users) {
  await fs.writeJson(usersPath, users, { spaces: 2 });
}

async function readListings() {
  try { return await fs.readJson(listingsPath); } catch (_) { return []; }
}

async function writeListings(listings) {
  await fs.writeJson(listingsPath, listings, { spaces: 2 });
}


function mainMenuKeyboard() {
  return {
    reply_markup: {
      keyboard: [
        [{ text: 'üõí –ö—É–ø–∏—Ç—å' }, { text: 'üí∞ –ü—Ä–æ–¥–∞—Ç—å' }],
        [{ text: 'üîç –ü–æ–∏—Å–∫' }, { text: 'üìã –ú–æ–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è' }],
        [{ text: 'üíé Platinum' }]
      ],
      resize_keyboard: true
    }
  };
}

function subscriptionKeyboard() {
  const titles = config.marketBot.sponsorTitles || ['–º–æ–π –∫–∞–Ω–∞–ª', '—Ç–≤–æ–π –∫–∞–Ω–∞–ª'];
  const channels = config.marketBot.requiredChannels || [];
  const buttons = channels.map((ch, idx) => [{ text: titles[idx] || ch, url: `https://t.me/${ch.replace('@','')}` }]);
  return {
    reply_markup: {
      inline_keyboard: [
        ...buttons,
        [{ text: '‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫–∏', callback_data: 'check_subs' }]
      ]
    }
  };
}

async function isUserSubscribed(bot, userId) {
  const channels = config.marketBot.requiredChannels || [];
  if (channels.length === 0) return true;
  try {
    for (const ch of channels) {
      const res = await bot.getChatMember(ch, userId);
      const status = res && res.status ? res.status : 'left';
      if (['left', 'kicked', 'restricted'].includes(status)) return false;
    }
    return true;
  } catch (_) {
    return false;
  }
}

function listingKeyboard(listingId) {
  // legacy inline keyboard (no longer shown in feed)
  return {
    reply_markup: {
      inline_keyboard: [
        [
          { text: '‚úÖ –î–∞', callback_data: `l_yes:${listingId}` },
          { text: '‚ùå –ù–µ—Ç', callback_data: `l_no:${listingId}` },
          { text: '‚öôÔ∏è –ü–∞—Ä–∞–º–µ—Ç—Ä—ã', callback_data: `l_params:${listingId}` }
        ]
      ]
    }
  };
}

const feedReplyKeyboard = (ownerOnly = false, postLike = false) => feedControls.buildFeedKeyboard(ownerOnly, postLike);

async function setFeedKeyboard(bot, chatId, users, uid, variant) {
  if (variant === 'post_like') return feedControls.enablePostLike(bot, chatId, users, uid, writeUsers);
  return feedControls.resetModeAndShowBase(bot, chatId, users, uid, writeUsers);
}

function removeReplyKeyboard() {
  return { reply_markup: { remove_keyboard: true } };
}

async function hideReplyKeyboard(bot, chatId) {
  try {
    await bot.sendMessage(chatId, '\u200B', { reply_markup: { remove_keyboard: true } });
  } catch (_) {}
}

function formatListingCaption(listing, isPlatinum = false) {
  const parts = [];
  
  // –î–æ–±–∞–≤–ª—è–µ–º –∑–Ω–∞—á–æ–∫ –ø–ª–∞—Ç–∏–Ω—ã –≤ –Ω–∞—á–∞–ª–æ, –µ—Å–ª–∏ –µ—Å—Ç—å
  if (isPlatinum) {
    parts.push('üíé Platinum');
  }
  
  // –¢–∏–ø –æ–±—ä—è–≤–ª–µ–Ω–∏—è (–ö—É–ø–ª—é/–ü—Ä–æ–¥–∞–º)
  if (listing.type === 'seek') {
    parts.push('üîç –ö—É–ø–ª—é');
  } else {
    parts.push('üí∞ –ü—Ä–æ–¥–∞–º');
  }
  
  // –ù–∞–∑–≤–∞–Ω–∏–µ
  if (listing.title) parts.push(String(listing.title));
  
  
  // –†–∞–∑–º–µ—Ä (–µ—Å–ª–∏ –µ—Å—Ç—å)
  if (listing.size) parts.push(`–†–∞–∑–º–µ—Ä: ${String(listing.size)}`);
  
  // –¶–µ–Ω–∞
  if (listing.price) parts.push(`${String(listing.price)} ‚ÇΩ`);
  
  // –°—Ç–∏–ª—å
  if (listing.style) parts.push(String(listing.style));
  
  return parts.join('\n');
}

async function sendListingCard(bot, chatId, listing, ownerOnly = false) {
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –∞–≤—Ç–æ—Ä–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –ø–ª–∞—Ç–∏–Ω–∞
  const users = await readUsers();
  const authorId = String(listing.userId);
  const author = users[authorId];
  const isPlatinum = author && author.platinum;
  
  const caption = formatListingCaption(listing, isPlatinum);
  const kb = feedReplyKeyboard(ownerOnly);
  try {
    if (Array.isArray(listing.photos) && listing.photos.length > 0) {
      await bot.sendPhoto(chatId, listing.photos[0], { caption, ...kb });
    } else {
      await bot.sendMessage(chatId, caption, kb);
    }
  } catch (_) {
    await bot.sendMessage(chatId, caption, kb);
  }
}

function genderKeyboard() {
  return {
    reply_markup: {
      inline_keyboard: [
        [{ text: 'üë® –ú—É–∂—Å–∫–æ–π', callback_data: 'gender:male' }],
        [{ text: 'üë© –ñ–µ–Ω—Å–∫–∏–π', callback_data: 'gender:female' }]
      ]
    }
  };
}

function missingDataKeyboard(missing) {
  const buttons = [];
  
  if (missing.includes('–ü–æ–ª')) {
    buttons.push([
      { text: 'üë® –ú—É–∂—Å–∫–æ–π', callback_data: 'missing_gender:male' },
      { text: 'üë© –ñ–µ–Ω—Å–∫–∏–π', callback_data: 'missing_gender:female' }
    ]);
  }
  
  if (missing.includes('–°—Ç–∏–ª—å')) {
    const styles = ['–∞—Ä—Ö–∏–≤', '–∫–µ–∂—É–∞–ª', '—Å—Ç—Ä–∏—Ç–≤–∏—Ä', 'old money', '–¥—Ä—É–≥–æ–µ'];
    const styleButtons = styles.map(style => ({ text: style, callback_data: `missing_style:${style}` }));
    buttons.push(styleButtons);
  }
  
  if (missing.includes('–¶–µ–Ω–∞')) {
    buttons.push([{ text: 'üí∞ –£–∫–∞–∑–∞—Ç—å —Ü–µ–Ω—É', callback_data: 'missing_price' }]);
  }
  
  if (missing.includes('–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞')) {
    buttons.push([{ text: 'üìù –£–∫–∞–∑–∞—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ', callback_data: 'missing_title' }]);
  }
  
  
  return {
    reply_markup: {
      inline_keyboard: buttons
    }
  };
}

function stylesKeyboard() {
  const styles = config.marketBot.styles || [];
  const rows = [];
  for (let i = 0; i < styles.length; i++) {
    rows.push([{ text: styles[i], callback_data: `style:${i}` }]);
  }
  if (rows.length === 0) rows.push([{ text: '–∞—Ä—Ö–∏–≤', callback_data: 'style:0' }]);
  return { reply_markup: { inline_keyboard: rows } };
}

async function migrateUsersForDedup() {
  try {
    const users = await readUsers();
    let updated = false;
    
    for (const userId in users) {
      const user = users[userId];
      if (user.feed && !Array.isArray(user.feed.seenByContent)) {
        user.feed.seenByContent = [];
        updated = true;
        console.log(`üîß [MIGRATION] –î–æ–±–∞–≤–ª–µ–Ω seenByContent –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}`);
      }
    }
    
    if (updated) {
      await writeUsers(users);
      console.log('‚úÖ [MIGRATION] –ú–∏–≥—Ä–∞—Ü–∏—è seenByContent –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
    }
  } catch (error) {
    console.error('‚ùå [MIGRATION] –û—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏ seenByContent:', error);
  }
}

// –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏—Å—Ç–µ—á–µ–Ω–∏—è Platinum –ø–æ–¥–ø–∏—Å–∫–∏
async function checkPlatinumExpiration() {
  try {
    const users = await readUsers();
    const now = Date.now();
    let expiredCount = 0;
    
    for (const [userId, user] of Object.entries(users)) {
      if (user.platinum && user.platinumExpiresAt && user.platinumExpiresAt <= now) {
        // –ü–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–ª–∞
        user.platinum = false;
        user.platinumExpiredAt = now;
        user.platinumExpiredReason = 'subscription_expired';
        expiredCount++;
        
        console.log(`‚è∞ Platinum –ø–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–ª–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}`);
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        try {
          await bot.sendMessage(userId, 
            '‚è∞ **–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –∏—Å—Ç–µ—á–µ–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏**\n\n' +
            'üíé –í–∞—à–∞ Platinum –ø–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–ª–∞.\n\n' +
            '‚ú® –î–ª—è –ø—Ä–æ–¥–ª–µ–Ω–∏—è –ø—Ä–∏–≤–∏–ª–µ–≥–∏–π:\n' +
            '‚Ä¢ –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n' +
            '‚Ä¢ –ù–∞–∂–º–∏—Ç–µ "üíé Platinum"\n' +
            '‚Ä¢ –í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã\n\n' +
            '–°–ø–∞—Å–∏–±–æ –∑–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –Ω–∞—à–∏—Ö —É—Å–ª—É–≥!',
            { parse_mode: 'Markdown' }
          );
        } catch (error) {
          console.log(`–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –∏—Å—Ç–µ—á–µ–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${userId}:`, error.message);
        }
      }
    }
    
    if (expiredCount > 0) {
      await writeUsers(users);
      console.log(`‚è∞ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∏—Å—Ç–µ–∫—à–∏—Ö –ø–æ–¥–ø–∏—Å–æ–∫: ${expiredCount}`);
    }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∏—Å—Ç–µ—á–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–æ–∫:', error);
  }
}

// –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å—Ç–µ—á–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–æ–∫ –∫–∞–∂–¥—ã–µ 6 —á–∞—Å–æ–≤
setInterval(checkPlatinumExpiration, 6 * 60 * 60 * 1000);

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è Platinum —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async function checkUserPlatinumStatus(userId) {
  try {
    const users = await readUsers();
    const user = users[userId];
    
    if (!user || !user.platinum) {
      return false;
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∏—Å—Ç–µ–∫–ª–∞ –ª–∏ –ø–æ–¥–ø–∏—Å–∫–∞
    if (user.platinumExpiresAt && user.platinumExpiresAt <= Date.now()) {
      // –ü–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–ª–∞
      user.platinum = false;
      user.platinumExpiredAt = Date.now();
      user.platinumExpiredReason = 'subscription_expired';
      await writeUsers(users);
      
      console.log(`‚è∞ Platinum –ø–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–ª–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}`);
      return false;
    }
    
    return true;
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ Platinum —Å—Ç–∞—Ç—É—Å–∞:', error);
    return false;
  }
}

async function start() {
  if (!config.marketBot || !config.marketBot.token || config.marketBot.token === 'YOUR_MARKET_BOT_TOKEN') {
    console.error('–£–∫–∞–∂–∏—Ç–µ —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ –≤ config.marketBot.token');
    process.exit(1);
  }

  await ensureDataFiles();
  
  // –ú–∏–≥—Ä–∞—Ü–∏—è: –¥–æ–±–∞–≤–ª—è–µ–º seenByContent –¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
  await migrateUsersForDedup();
  
  const bot = new TelegramBot(config.marketBot.token, { polling: true });

  try {
    await bot.setMyCommands([
      { command: 'start', description: '–ó–∞–ø—É—Å–∫ –∏ –º–µ–Ω—é' },
      { command: 'menu', description: '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é' },
      { command: 'sell', description: '–°–æ–∑–¥–∞—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ' },
      { command: 'buy', description: '–ö—É–ø–∏—Ç—å' }
    ]);
  } catch (_) {}

  const welcome = `${config.marketBot.description}`;
  
  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Ñ–æ—Ç–æ
  async function sendWelcomeWithPhoto(chatId) {
    try {
      // –ü—É—Ç—å –∫ —Ñ–æ—Ç–æ (–∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à –ø—É—Ç—å –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é)
      const photoPath = './welcome_photo.png'; // –∏–ª–∏ URL: 'https://example.com/welcome.jpg'
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è –ª–æ–∫–∞–ª—å–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤)
      if (!photoPath.startsWith('http')) {
        const fs = require('fs');
        if (!fs.existsSync(photoPath)) {
          console.log(`–§–∞–π–ª ${photoPath} –Ω–µ –Ω–∞–π–¥–µ–Ω, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ`);
          await bot.sendMessage(chatId, welcome, mainMenuKeyboard());
          return;
        }
      }
      
      // –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ —Å –ø–æ–¥–ø–∏—Å—å—é
      await bot.sendPhoto(chatId, photoPath, {
        caption: welcome,
        parse_mode: 'HTML',
        ...mainMenuKeyboard()
      });
      console.log('‚úì –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ñ–æ—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ');
    } catch (error) {
      console.log('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:', error.message);
      // –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
      await bot.sendMessage(chatId, welcome, { 
        parse_mode: 'HTML',
        ...mainMenuKeyboard() 
      });
    }
  }

  bot.onText(/^\/start|^–ù–∞—á–∞—Ç—å$/i, async (msg) => {
    const chatId = msg.chat.id;
    const ok = await isUserSubscribed(bot, msg.from.id);
    if (!ok) {
      await bot.sendMessage(chatId, '–ü—Ä–∏–≤–µ—Ç, –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ –Ω—É–∂–Ω–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Å–ø–æ–Ω—Å–æ—Ä–æ–≤:', subscriptionKeyboard());
      return;
    }
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const blocked = await isUserBlocked(msg.from.id);
    if (blocked) {
      await bot.sendMessage(chatId, 'üö´ –í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –∏ –Ω–µ –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞.');
      return;
    }
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –æ–±—Ä–∞—â–µ–Ω–∏–∏
    const users = await readUsers();
    const uid = String(msg.from.id);
    users[uid] = users[uid] || { profile: {}, platinum: false };
    
    if (!users[uid].profile.username) {
      users[uid].profile.username = msg.from.username || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
      users[uid].profile.firstName = msg.from.first_name || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
      await writeUsers(users);
    }
    
    await sendWelcomeWithPhoto(chatId);
  });

  bot.onText(/^\/menu$/i, async (msg) => {
    const ok = await isUserSubscribed(bot, msg.from.id);
    if (!ok) return bot.sendMessage(msg.chat.id, '–ù—É–∂–Ω–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è:', subscriptionKeyboard());
    await bot.sendMessage(msg.chat.id, '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', mainMenuKeyboard());
  });

  bot.onText(/^\/platinum$/i, async (msg) => {
    const ok = await isUserSubscribed(bot, msg.from.id);
    if (!ok) return bot.sendMessage(msg.chat.id, '–ù—É–∂–Ω–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è:', subscriptionKeyboard());
    
    const users = await readUsers();
    const uid = String(msg.from.id);
    const user = users[uid] || { profile: {}, platinum: false };
    
    if (user.platinum) {
      await bot.sendMessage(msg.chat.id, '‚ú® –£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –ø—Ä–∏–≤–∏–ª–µ–≥–∏—è Platinum!\n\n–í–∞—à–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –æ—Ç–æ–±—Ä–∞–∂–∞—é—Ç—Å—è —Å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º –∏ –∑–Ω–∞—á–∫–æ–º üíé Platinum.', mainMenuKeyboard());
      return;
    }
    
    const keyboard = {
      reply_markup: {
        inline_keyboard: [
          [{ text: 'üíé –ö—É–ø–∏—Ç—å –ü–ª–∞—Ç–∏–Ω—É –∑–∞ 300‚ÇΩ', callback_data: 'platinum_buy' }],
          [{ text: 'üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é', callback_data: 'main_menu' }]
        ]
      }
    };
    
        await bot.sendMessage(msg.chat.id, 
          'üíé **–ü—Ä–∏–≤–∏–ª–µ–≥–∏—è Platinum**\n\n' +
          '‚ú® **–ß—Ç–æ –¥–∞–µ—Ç Platinum:**\n' +
          '‚Ä¢ –í–∞—à–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –ø–æ–∫–∞–∑—ã–≤–∞—é—Ç—Å—è —Å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º +30%\n' +
          '‚Ä¢ –ë–æ–ª—å—à–µ –ª—é–¥–µ–π —É–≤–∏–¥—è—Ç –≤–∞—à–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è\n' +
          '‚Ä¢ –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –∑–Ω–∞—á–æ–∫ üíé Platinum\n' +
          '‚Ä¢ –£–≤–µ–ª–∏—á–µ–Ω–Ω–∞—è –≤–∏–¥–∏–º–æ—Å—Ç—å –≤ –ª–µ–Ω—Ç–µ\n\n' +
          'üí∞ **–°—Ç–æ–∏–º–æ—Å—Ç—å:** 300‚ÇΩ\n' +
          'üí≥ **–û–ø–ª–∞—Ç–∞:** –ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞\n\n' +
          '–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –ø–æ–∫—É–ø–∫–∏:', 
          { parse_mode: 'Markdown', ...keyboard }
        );
  });

  bot.onText(/^\/sell$/i, async (msg) => {
    const ok = await isUserSubscribed(bot, msg.from.id);
    if (!ok) return bot.sendMessage(msg.chat.id, '–ù—É–∂–Ω–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è:', subscriptionKeyboard());
    await beginSellFlow(bot, msg.from, msg.chat.id);
  });

  bot.onText(/^\/buy$/i, async (msg) => {
    const ok = await isUserSubscribed(bot, msg.from.id);
    if (!ok) return bot.sendMessage(msg.chat.id, '–ù—É–∂–Ω–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è:', subscriptionKeyboard());
    await bot.sendMessage(msg.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç:', {
      reply_markup: { inline_keyboard: [[{ text: 'üì∞ –õ–µ–Ω—Ç–∞', callback_data: 'buy_find' }]] }
    });
  });


  bot.on('callback_query', async (q) => {
    // –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –æ—Ç–≤–µ—Ç –Ω–∞ callback query —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
    const safeAnswerCallback = async (queryId, options = {}) => {
      try {
        await bot.answerCallbackQuery(queryId, options);
      } catch (error) {
        console.log('‚ö†Ô∏è [WARNING] –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ callback query:', error.message);
        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –∏—Å—Ç–µ—á–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ callback query
      }
    };

    if (q.data === 'check_subs') {
      const ok = await isUserSubscribed(bot, q.from.id);
      if (ok) {
        await safeAnswerCallback(q.id, { text: '–ü–æ–¥–ø–∏—Å–∫–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω—ã!' });
        await sendWelcomeWithPhoto(q.message.chat.id);
      } else {
        await safeAnswerCallback(q.id, { text: '–ù–µ –≤—Å–µ –ø–æ–¥–ø–∏—Å–∫–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω—ã.' });
      }
      return;
    }

    // Platinum purchase
    if (q.data === 'platinum_buy') {
      await safeAnswerCallback(q.id);
      
      const users = await readUsers();
      const uid = String(q.from.id);
      users[uid] = users[uid] || { profile: {}, platinum: false };
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å Platinum (—Å —É—á–µ—Ç–æ–º –∏—Å—Ç–µ—á–µ–Ω–∏—è)
      const hasPlatinum = await checkUserPlatinumStatus(uid);
      if (hasPlatinum) {
        await bot.sendMessage(q.message.chat.id, '‚ú® –£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –ø—Ä–∏–≤–∏–ª–µ–≥–∏—è Platinum!', mainMenuKeyboard());
        return;
      }
      
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±–æ—Ä –≤–∞–ª—é—Ç—ã
      const currencies = cryptoBot.getAvailableCurrencies();
      const keyboard = {
        reply_markup: {
          inline_keyboard: currencies.slice(0, 10).map(currency => [
            { 
              text: `${currency.emoji} ${currency.name} (${currency.amount} ${currency.code})`, 
              callback_data: `platinum_currency_${currency.code}` 
            }
          ]).concat([
            [{ text: 'üîÑ –û–±–Ω–æ–≤–∏—Ç—å –∫—É—Ä—Å—ã', callback_data: 'platinum_refresh_rates' }],
            [{ text: 'üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é', callback_data: 'main_menu' }]
          ])
        }
      };
      
      await bot.sendMessage(q.message.chat.id, 
        'üíé **–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç—É –¥–ª—è –æ–ø–ª–∞—Ç—ã**\n\n' +
        'üí∞ **–°—Ç–æ–∏–º–æ—Å—Ç—å –ø–ª–∞—Ç–∏–Ω—ã:** 300‚ÇΩ\n' +
        '‚è∞ **–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è:** 1 –º–µ—Å—è—Ü\n\n' +
        '‚ú® **–ß—Ç–æ –¥–∞–µ—Ç Platinum –ø–æ–¥–ø–∏—Å–∫–∞:**\n' +
        '‚Ä¢ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–æ–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–π +30%\n' +
        '‚Ä¢ –ë–æ–ª—å—à–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤ –∏ –æ—Ç–∫–ª–∏–∫–æ–≤\n' +
        '‚Ä¢ –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –∑–Ω–∞—á–æ–∫ üíé Platinum\n' +
        '‚Ä¢ –î–µ–π—Å—Ç–≤—É–µ—Ç 30 –¥–Ω–µ–π —Å –º–æ–º–µ–Ω—Ç–∞ –ø–æ–∫—É–ø–∫–∏\n\n' +
        '–í—ã–±–µ—Ä–∏—Ç–µ —É–¥–æ–±–Ω—É—é –¥–ª—è –≤–∞—Å –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—É:',
        { parse_mode: 'Markdown', ...keyboard }
      );
      return;
    }

    // –í—ã–±–æ—Ä –≤–∞–ª—é—Ç—ã –¥–ª—è –æ–ø–ª–∞—Ç—ã
    if (q.data.startsWith('platinum_currency_')) {
      await safeAnswerCallback(q.id);
      
      const currencyCode = q.data.replace('platinum_currency_', '');
      const users = await readUsers();
      const uid = String(q.from.id);
      
      // –°–æ–∑–¥–∞–µ–º —Å—á–µ—Ç —á–µ—Ä–µ–∑ CryptoBot —Å –≤—ã–±—Ä–∞–Ω–Ω–æ–π –≤–∞–ª—é—Ç–æ–π
      const username = q.from.username || q.from.first_name || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å';
      const invoice = await cryptoBot.createPlatinumInvoice(uid, username, currencyCode);
      
      if (!invoice.success) {
        await bot.sendMessage(q.message.chat.id, 
          '‚ùå **–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å—á–µ—Ç–∞**\n\n' +
          '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å—á–µ—Ç –¥–ª—è –æ–ø–ª–∞—Ç—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.',
          { parse_mode: 'Markdown', ...mainMenuKeyboard() }
        );
        return;
      }
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—á–µ—Ç–µ
      users[uid].pendingInvoice = {
        invoiceId: invoice.invoiceId,
        amount: invoice.amount,
        currency: invoice.currency,
        currencyName: invoice.currencyName,
        currencyEmoji: invoice.currencyEmoji,
        amountRub: invoice.amountRub,
        createdAt: Date.now()
      };
      await writeUsers(users);
      
      const keyboard = {
        reply_markup: {
          inline_keyboard: [
            [{ text: 'üí≥ –û–ø–ª–∞—Ç–∏—Ç—å', url: invoice.payUrl }],
            [{ text: 'üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É', callback_data: 'platinum_check' }],
            [{ text: 'üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é', callback_data: 'main_menu' }]
          ]
        }
      };
      
      await bot.sendMessage(q.message.chat.id, 
        `${invoice.currencyEmoji} **–û–ø–ª–∞—Ç–∞ –ø—Ä–∏–≤–∏–ª–µ–≥–∏–∏ Platinum**\n\n` +
        `üí∞ **–°—É–º–º–∞:** ${invoice.amount} ${invoice.currency} (${invoice.currencyName})\n` +
        `üíµ **–≠–∫–≤–∏–≤–∞–ª–µ–Ω—Ç:** ‚âà${invoice.amountRub}‚ÇΩ\n` +
        `üÜî **ID —Å—á–µ—Ç–∞:** \`${invoice.invoiceId}\`\n\n` +
        '‚ú® **–ß—Ç–æ –¥–∞–µ—Ç Platinum:**\n' +
        '‚Ä¢ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–π –ø–æ–∫–∞–∑ –æ–±—ä—è–≤–ª–µ–Ω–∏–π +30%\n' +
        '‚Ä¢ –ë–æ–ª—å—à–µ –ª—é–¥–µ–π —É–≤–∏–¥—è—Ç –≤–∞—à–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è\n' +
        '‚Ä¢ –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –∑–Ω–∞—á–æ–∫ üíé Platinum\n\n' +
        '–ù–∞–∂–º–∏—Ç–µ "–û–ø–ª–∞—Ç–∏—Ç—å" –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ –æ–ø–ª–∞—Ç–µ –∏–ª–∏ "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É" –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞.',
        { parse_mode: 'Markdown', ...keyboard }
      );
      return;
    }

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫—É—Ä—Å–æ–≤ –≤–∞–ª—é—Ç
    if (q.data === 'platinum_refresh_rates') {
      await safeAnswerCallback(q.id, { text: '–û–±–Ω–æ–≤–ª—è–µ–º –∫—É—Ä—Å—ã –≤–∞–ª—é—Ç...' });
      
      const success = await cryptoBot.updateExchangeRates();
      const currencies = cryptoBot.getAvailableCurrencies();
      
      const keyboard = {
        reply_markup: {
          inline_keyboard: currencies.slice(0, 10).map(currency => [
            { 
              text: `${currency.emoji} ${currency.name} (${currency.amount} ${currency.code})`, 
              callback_data: `platinum_currency_${currency.code}` 
            }
          ]).concat([
            [{ text: 'üîÑ –û–±–Ω–æ–≤–∏—Ç—å –∫—É—Ä—Å—ã', callback_data: 'platinum_refresh_rates' }],
            [{ text: 'üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é', callback_data: 'main_menu' }]
          ])
        }
      };
      
      await bot.sendMessage(q.message.chat.id, 
        'üíé **–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç—É –¥–ª—è –æ–ø–ª–∞—Ç—ã**\n\n' +
        'üí∞ **–°—Ç–æ–∏–º–æ—Å—Ç—å –ø–ª–∞—Ç–∏–Ω—ã:** 300‚ÇΩ\n\n' +
        (success ? '‚úÖ **–ö—É—Ä—Å—ã –æ–±–Ω–æ–≤–ª–µ–Ω—ã!**\n\n' : '‚ö†Ô∏è **–ò—Å–ø–æ–ª—å–∑—É–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∫—É—Ä—Å—ã**\n\n') +
        '–í—ã–±–µ—Ä–∏—Ç–µ —É–¥–æ–±–Ω—É—é –¥–ª—è –≤–∞—Å –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—É:',
        { parse_mode: 'Markdown', ...keyboard }
      );
      return;
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–ø–ª–∞—Ç—ã –ø–ª–∞—Ç–∏–Ω—ã
    if (q.data === 'platinum_check') {
      await safeAnswerCallback(q.id);
      
      const users = await readUsers();
      const uid = String(q.from.id);
      const user = users[uid];
      
      if (!user || !user.pendingInvoice) {
        await bot.sendMessage(q.message.chat.id, 
          '‚ùå **–°—á–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω**\n\n' +
          '–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Å—á–µ—Ç–∞ –¥–ª—è –æ–ø–ª–∞—Ç—ã –ø–ª–∞—Ç–∏–Ω—ã.',
          { parse_mode: 'Markdown', ...mainMenuKeyboard() }
        );
        return;
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å —Å—á–µ—Ç–∞
      const status = await cryptoBot.checkInvoiceStatus(user.pendingInvoice.invoiceId);
      
      if (!status.success) {
        await bot.sendMessage(q.message.chat.id, 
          '‚ùå **–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—á–µ—Ç–∞**\n\n' +
          '–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –æ–ø–ª–∞—Ç—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.',
          { parse_mode: 'Markdown', ...mainMenuKeyboard() }
        );
        return;
      }
      
      if (status.paid) {
        // –û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ - –∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –ø–ª–∞—Ç–∏–Ω—É
        users[uid].platinum = true;
        users[uid].platinumActivatedAt = Date.now();
        users[uid].platinumExpiresAt = Date.now() + (30 * 24 * 60 * 60 * 1000); // 30 –¥–Ω–µ–π –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö
        users[uid].platinumType = 'purchased'; // –¢–∏–ø: purchased (–∫—É–ø–ª–µ–Ω–æ) –∏–ª–∏ granted (–≤—ã–¥–∞–Ω–æ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º)
        delete users[uid].pendingInvoice;
        await writeUsers(users);
        
        await bot.sendMessage(q.message.chat.id, 
          'üéâ **–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!**\n\n' +
          'üíé –ü—Ä–∏–≤–∏–ª–µ–≥–∏—è Platinum –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞!\n' +
          '‚è∞ **–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è:** 30 –¥–Ω–µ–π\n\n' +
          '‚ú® –¢–µ–ø–µ—Ä—å –≤–∞—à–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è:\n' +
          '‚Ä¢ –û—Ç–æ–±—Ä–∞–∂–∞—é—Ç—Å—è —Å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º +30%\n' +
          '‚Ä¢ –ü–æ–∫–∞–∑—ã–≤–∞—é—Ç—Å—è –±–æ–ª—å—à–µ–º—É –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –ª—é–¥–µ–π\n' +
          '‚Ä¢ –ò–º–µ—é—Ç —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –∑–Ω–∞—á–æ–∫ üíé Platinum\n\n' +
          '–°–æ–∑–¥–∞–≤–∞–π—Ç–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –∏ –ø–æ–ª—É—á–∞–π—Ç–µ –±–æ–ª—å—à–µ –æ—Ç–∫–ª–∏–∫–æ–≤!', 
          { parse_mode: 'Markdown', ...mainMenuKeyboard() }
        );
      } else {
        // –û–ø–ª–∞—Ç–∞ –µ—â–µ –Ω–µ –ø—Ä–æ—à–ª–∞
        const keyboard = {
          reply_markup: {
            inline_keyboard: [
              [{ text: 'üí≥ –û–ø–ª–∞—Ç–∏—Ç—å', url: `https://t.me/CryptoBot?start=pay-${user.pendingInvoice.invoiceId}` }],
              [{ text: 'üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –µ—â–µ —Ä–∞–∑', callback_data: 'platinum_check' }],
              [{ text: 'üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é', callback_data: 'main_menu' }]
            ]
          }
        };
        
        const currencyInfo = cryptoBot.supportedCurrencies.find(c => c.code === user.pendingInvoice.currency);
        const currencyEmoji = currencyInfo?.emoji || 'üíé';
        const currencyName = currencyInfo?.name || user.pendingInvoice.currency;
        
        await bot.sendMessage(q.message.chat.id, 
          `${currencyEmoji} **–û–∂–∏–¥–∞–Ω–∏–µ –æ–ø–ª–∞—Ç—ã**\n\n` +
          `üí∞ **–°—É–º–º–∞:** ${user.pendingInvoice.amount} ${user.pendingInvoice.currency} (${currencyName})\n` +
          `üíµ **–≠–∫–≤–∏–≤–∞–ª–µ–Ω—Ç:** ‚âà${user.pendingInvoice.amountRub || 300}‚ÇΩ\n` +
          `üÜî **ID —Å—á–µ—Ç–∞:** \`${user.pendingInvoice.invoiceId}\`\n` +
          `üìä **–°—Ç–∞—Ç—É—Å:** ${status.status}\n\n` +
          '–û–ø–ª–∞—Ç–∞ –µ—â–µ –Ω–µ –ø–æ—Å—Ç—É–ø–∏–ª–∞. –ù–∞–∂–º–∏—Ç–µ "–û–ø–ª–∞—Ç–∏—Ç—å" –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ –æ–ø–ª–∞—Ç–µ –∏–ª–∏ "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –µ—â–µ —Ä–∞–∑" —á–µ—Ä–µ–∑ –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è.',
          { parse_mode: 'Markdown', ...keyboard }
        );
      }
      return;
    }

    if (q.data === 'main_menu') {
      await safeAnswerCallback(q.id);
      await bot.sendMessage(q.message.chat.id, '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', mainMenuKeyboard());
      return;
    }

    // Buy path
    if (q.data === 'buy_find') {
      await safeAnswerCallback(q.id);
      await bot.sendMessage(q.message.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª:', genderKeyboard());
      return;
    }

    // Buy seek path
    if (q.data === 'buy_seek') {
      await safeAnswerCallback(q.id);
      const users = await readUsers();
      const uid = String(q.from.id);
      users[uid] = users[uid] || { profile: {}, platinum: false };
      users[uid].session = { flow: 'seek', step: 'gender', temp: {} };
      await writeUsers(users);
      await bot.sendMessage(q.message.chat.id, '–°–æ–∑–¥–∞—ë–º –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –æ –ø–æ–∏—Å–∫–µ. –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª:', genderKeyboard());
      return;
    }

    if (q.data.startsWith('gender:')) {
      await safeAnswerCallback(q.id);
      const gender = q.data.split(':')[1];
      const genderText = gender === 'male' ? '–º—É–∂—Å–∫–æ–π' : '–∂–µ–Ω—Å–∫–∏–π';
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å–ª–∏ —ç—Ç–æ sell flow
      const users = await readUsers();
      const uid = String(q.from.id);
      const session = users[uid] && users[uid].session ? users[uid].session : null;
      
      if (session && session.flow === 'sell' && session.step === 'gender') {
        session.temp = { ...(session.temp || {}), gender };
        session.step = 'title';
        users[uid].session = session;
        await writeUsers(users);
        console.log('üîç [DEBUG] –í—ã–±—Ä–∞–Ω –ø–æ–ª –≤ —Å–µ—Å—Å–∏–∏ sell:', gender, 'genderText:', genderText);
        await bot.sendMessage(q.message.chat.id, `–í—ã–±—Ä–∞–Ω –ø–æ–ª: ${genderText}\n\n–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:`);
      } else if (session && session.flow === 'seek' && session.step === 'gender') {
        session.temp = { ...(session.temp || {}), gender };
        session.step = 'title';
        users[uid].session = session;
        await writeUsers(users);
        console.log('üîç [DEBUG] –í—ã–±—Ä–∞–Ω –ø–æ–ª –≤ —Å–µ—Å—Å–∏–∏ seek:', gender, 'genderText:', genderText);
        await bot.sendMessage(q.message.chat.id, `–í—ã–±—Ä–∞–Ω –ø–æ–ª: ${genderText}\n\n–í–≤–µ–¥–∏—Ç–µ —á—Ç–æ –∏—â–µ—Ç–µ:`);
      } else {
        // –≠—Ç–æ buy flow - —Å–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∏–ª–∏
        users[uid] = users[uid] || { profile: {}, platinum: false };
        users[uid].selectedGender = gender;
        await writeUsers(users);
        console.log('üîç [DEBUG] –í—ã–±—Ä–∞–Ω –ø–æ–ª –≤ buy flow:', gender, 'genderText:', genderText);
        await bot.sendMessage(q.message.chat.id, `–í—ã–±—Ä–∞–Ω –ø–æ–ª: ${genderText}\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∏–ª—å:`, stylesKeyboard());
      }
      return;
    }

    if (q.data.startsWith('style:')) {
      await safeAnswerCallback(q.id);
      const styles = config.marketBot.styles || [];
      const idx = parseInt(q.data.split(':')[1], 10) || 0;
      const style = styles[idx] || '–∞—Ä—Ö–∏–≤';
      // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ —Å–æ–∑–¥–∞–Ω–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è (sell) –∏ –≤—ã–±–∏—Ä–∞–µ—Ç —Å—Ç–∏–ª—å ‚Äî –Ω–µ –∑–∞–ø—É—Å–∫–∞–µ–º –ª–µ–Ω—Ç—É
      const users = await readUsers();
      const uid = String(q.from.id);
      const session = users[uid] && users[uid].session ? users[uid].session : null;
      if (session && session.flow === 'sell' && session.step === 'style') {
        session.temp = { ...(session.temp || {}), style };
        session.step = 'price';
        users[uid].session = session;
        await writeUsers(users);
        await bot.sendMessage(q.message.chat.id, 'üí∞ –¶–µ–Ω–∞ (—Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ, –Ω–∞–ø—Ä–∏–º–µ—Ä: 1500):');
      } else if (session && session.flow === 'seek' && session.step === 'style') {
        session.temp = { ...(session.temp || {}), style };
        session.step = 'price';
        users[uid].session = session;
        await writeUsers(users);
        await bot.sendMessage(q.message.chat.id, 'üí∞ –¶–µ–Ω–∞ (—Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ, –Ω–∞–ø—Ä–∏–º–µ—Ä: 1500):');
      } else {
        // –≠—Ç–æ buy flow - –ø–µ—Ä–µ–¥–∞–µ–º —Å—Ç–∏–ª—å –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π –ø–æ–ª
        const user = users[uid];
        const filters = { style };
        if (user && user.selectedGender) {
          filters.gender = user.selectedGender;
          console.log('üîç [DEBUG] –ü–µ—Ä–µ–¥–∞–µ–º –ø–æ–ª –≤ —Ñ–∏–ª—å—Ç—Ä—ã:', user.selectedGender);
        }
        await startFeedForUser(bot, q.from.id, q.message.chat.id, filters);
      }
      return;
    }


    // Listing interactions
    if (q.data.startsWith('l_yes:')) {
      await safeAnswerCallback(q.id);
      const listingId = q.data.split(':')[1];
      await handleListingYes(bot, q.from, q.message.chat.id, listingId);
      return;
    }
    if (q.data.startsWith('l_no:')) {
      await safeAnswerCallback(q.id);
      await showNextInFeed(bot, q.from.id, q.message.chat.id);
      return;
    }
    if (q.data.startsWith('l_params:')) {
      await safeAnswerCallback(q.id);
      await askFeedParams(bot, q.from.id, q.message.chat.id);
      return;
    }

    // Sell path
    if (q.data === 'sell_create') {
      await safeAnswerCallback(q.id);
      await beginSellFlow(bot, q.from, q.message.chat.id);
      return;
    }

    if (q.data === 'sell_parse') {
      await safeAnswerCallback(q.id);
      await beginParseFlow(bot, q.from, q.message.chat.id);
      return;
    }

    if (q.data === 'parse_forwarded') {
      await safeAnswerCallback(q.id);
      await beginParseFlow(bot, q.from, q.message.chat.id);
      return;
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö
    if (q.data.startsWith('missing_gender:')) {
      await safeAnswerCallback(q.id);
      const gender = q.data.split(':')[1];
      const users = await readUsers();
      const uid = String(q.from.id);
      const session = users[uid] && users[uid].session ? users[uid].session : null;
      
      if (session && session.flow === 'parse' && session.step === 'missing_data') {
        session.temp.gender = gender;
        users[uid].session = session;
        await writeUsers(users);
        
        await bot.sendMessage(q.message.chat.id, `‚úÖ –ü–æ–ª: ${gender === 'male' ? '–º—É–∂—Å–∫–æ–π' : '–∂–µ–Ω—Å–∫–∏–π'}`);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—Å–µ –ª–∏ –¥–∞–Ω–Ω—ã–µ —Å–æ–±—Ä–∞–Ω—ã
        const stillMissing = [];
        if (!session.temp.title) stillMissing.push('–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞');
        if (!session.temp.price && session.temp.price !== 'SOLD') stillMissing.push('–¶–µ–Ω–∞');
        if (!session.temp.gender) stillMissing.push('–ü–æ–ª');
        if (!session.temp.style) stillMissing.push('–°—Ç–∏–ª—å');
        
        if (stillMissing.length === 0) {
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏
          const existingPhotos = session.temp.photos || [];
          if (existingPhotos.length > 0) {
            await bot.sendMessage(q.message.chat.id, '‚úÖ –í—Å–µ –¥–∞–Ω–Ω—ã–µ —Å–æ–±—Ä–∞–Ω—ã! –§–æ—Ç–æ —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã. –ù–∞–∂–º–∏—Ç–µ ¬´–ì–æ—Ç–æ–≤–æ¬ª –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è.', { 
              reply_markup: { keyboard: [[{ text: '‚úÖ –ì–æ—Ç–æ–≤–æ' }]], resize_keyboard: true } 
            });
          } else {
            await bot.sendMessage(q.message.chat.id, '‚úÖ –í—Å–µ –¥–∞–Ω–Ω—ã–µ —Å–æ–±—Ä–∞–Ω—ã! –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ —Ç–æ–≤–∞—Ä–∞.\n\nüì∏ **–í–∞–∂–Ω–æ:** –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –∫–∞–∫ –æ—Ç–¥–µ–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∞ –Ω–µ –∫–∞–∫ –ø–æ–¥–ø–∏—Å—å –∫ —Ç–µ–∫—Å—Ç—É!', { 
              reply_markup: { keyboard: [[{ text: '‚úÖ –ì–æ—Ç–æ–≤–æ' }]], resize_keyboard: true } 
            });
          }
          session.step = 'photos';
          users[uid].session = session;
          await writeUsers(users);
        } else {
          await bot.sendMessage(q.message.chat.id, `‚ùì –û—Å—Ç–∞–ª–æ—Å—å —É–∫–∞–∑–∞—Ç—å: ${stillMissing.join(', ')}`, missingDataKeyboard(stillMissing));
        }
      }
      return;
    }

    if (q.data.startsWith('missing_style:')) {
      await safeAnswerCallback(q.id);
      const style = q.data.split(':')[1];
      const users = await readUsers();
      const uid = String(q.from.id);
      const session = users[uid] && users[uid].session ? users[uid].session : null;
      
      if (session && session.flow === 'parse' && session.step === 'missing_data') {
        session.temp.style = style;
        users[uid].session = session;
        await writeUsers(users);
        
        await bot.sendMessage(q.message.chat.id, `‚úÖ –°—Ç–∏–ª—å: ${style}`);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—Å–µ –ª–∏ –¥–∞–Ω–Ω—ã–µ —Å–æ–±—Ä–∞–Ω—ã
        const stillMissing = [];
        if (!session.temp.title) stillMissing.push('–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞');
        if (!session.temp.price && session.temp.price !== 'SOLD') stillMissing.push('–¶–µ–Ω–∞');
        if (!session.temp.gender) stillMissing.push('–ü–æ–ª');
        if (!session.temp.style) stillMissing.push('–°—Ç–∏–ª—å');
        
        if (stillMissing.length === 0) {
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏
          const existingPhotos = session.temp.photos || [];
          if (existingPhotos.length > 0) {
            await bot.sendMessage(q.message.chat.id, '‚úÖ –í—Å–µ –¥–∞–Ω–Ω—ã–µ —Å–æ–±—Ä–∞–Ω—ã! –§–æ—Ç–æ —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã. –ù–∞–∂–º–∏—Ç–µ ¬´–ì–æ—Ç–æ–≤–æ¬ª –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è.', { 
              reply_markup: { keyboard: [[{ text: '‚úÖ –ì–æ—Ç–æ–≤–æ' }]], resize_keyboard: true } 
            });
          } else {
            await bot.sendMessage(q.message.chat.id, '‚úÖ –í—Å–µ –¥–∞–Ω–Ω—ã–µ —Å–æ–±—Ä–∞–Ω—ã! –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ —Ç–æ–≤–∞—Ä–∞.\n\nüì∏ **–í–∞–∂–Ω–æ:** –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –∫–∞–∫ –æ—Ç–¥–µ–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∞ –Ω–µ –∫–∞–∫ –ø–æ–¥–ø–∏—Å—å –∫ —Ç–µ–∫—Å—Ç—É!', { 
              reply_markup: { keyboard: [[{ text: '‚úÖ –ì–æ—Ç–æ–≤–æ' }]], resize_keyboard: true } 
            });
          }
          session.step = 'photos';
          users[uid].session = session;
          await writeUsers(users);
        } else {
          await bot.sendMessage(q.message.chat.id, `‚ùì –û—Å—Ç–∞–ª–æ—Å—å —É–∫–∞–∑–∞—Ç—å: ${stillMissing.join(', ')}`, missingDataKeyboard(stillMissing));
        }
      }
      return;
    }


    if (q.data === 'missing_price') {
      await safeAnswerCallback(q.id);
      const users = await readUsers();
      const uid = String(q.from.id);
      const session = users[uid] && users[uid].session ? users[uid].session : null;
      
      if (session && session.flow === 'parse' && session.step === 'missing_data') {
        session.step = 'missing_price';
        users[uid].session = session;
        await writeUsers(users);
        
        await bot.sendMessage(q.message.chat.id, 'üí∞ –í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É (—Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ, –Ω–∞–ø—Ä–∏–º–µ—Ä: 1500):');
      }
      return;
    }

    if (q.data === 'missing_title') {
      await safeAnswerCallback(q.id);
      const users = await readUsers();
      const uid = String(q.from.id);
      const session = users[uid] && users[uid].session ? users[uid].session : null;
      
      if (session && session.flow === 'parse' && session.step === 'missing_data') {
        session.step = 'missing_title';
        users[uid].session = session;
        await writeUsers(users);
        
        await bot.sendMessage(q.message.chat.id, 'üìù –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:');
      }
      return;
    }

    if (q.data === 'go_menu') {
      await safeAnswerCallback(q.id);
      await bot.sendMessage(q.message.chat.id, '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', mainMenuKeyboard());
      return;
    }

    // My listings menu
    if (q.data.startsWith('my_list:')) {
      await safeAnswerCallback(q.id);
      const page = parseInt(q.data.split(':')[1] || '0', 10) || 0;
      await showMyListingsMenu(bot, q.from.id, q.message.chat.id, page);
      return;
    }
    if (q.data.startsWith('my_view:')) {
      await safeAnswerCallback(q.id);
      const id = q.data.split(':')[1];
      await showMyListing(bot, q.from.id, q.message.chat.id, id);
      return;
    }
    if (q.data.startsWith('my_del:')) {
      await safeAnswerCallback(q.id);
      const id = q.data.split(':')[1];
      await deleteMyListing(bot, q.from.id, q.message.chat.id, id);
      return;
    }
    if (q.data.startsWith('my_edit:')) {
      await safeAnswerCallback(q.id);
      const id = q.data.split(':')[1];
      await editMyListing(bot, q.from.id, q.message.chat.id, id);
      return;
    }
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏–π
    if (q.data.startsWith('edit_title:')) {
      await safeAnswerCallback(q.id);
      const id = q.data.split(':')[1];
      await startEditField(bot, q.from.id, q.message.chat.id, id, 'title');
      return;
    }
    if (q.data.startsWith('edit_price:')) {
      await safeAnswerCallback(q.id);
      const id = q.data.split(':')[1];
      await startEditField(bot, q.from.id, q.message.chat.id, id, 'price');
      return;
    }
    if (q.data.startsWith('edit_description:')) {
      await safeAnswerCallback(q.id);
      const id = q.data.split(':')[1];
      await startEditField(bot, q.from.id, q.message.chat.id, id, 'description');
      return;
    }
    if (q.data.startsWith('edit_photos:')) {
      await safeAnswerCallback(q.id);
      const id = q.data.split(':')[1];
      await startEditField(bot, q.from.id, q.message.chat.id, id, 'photos');
      return;
    }
    if (q.data.startsWith('edit_gender:')) {
      await safeAnswerCallback(q.id);
      const id = q.data.split(':')[1];
      await startEditField(bot, q.from.id, q.message.chat.id, id, 'gender');
      return;
    }
    if (q.data.startsWith('edit_style:')) {
      await safeAnswerCallback(q.id);
      const id = q.data.split(':')[1];
      await startEditField(bot, q.from.id, q.message.chat.id, id, 'style');
      return;
    }
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∑–Ω–∞—á–µ–Ω–∏–π –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
    if (q.data.startsWith('edit_gender_set:')) {
      await safeAnswerCallback(q.id);
      const parts = q.data.split(':');
      const id = parts[1];
      const gender = parts[2];
      await updateListingField(bot, q.from.id, q.message.chat.id, id, 'gender', gender);
      return;
    }
    if (q.data.startsWith('edit_style_set:')) {
      await safeAnswerCallback(q.id);
      const parts = q.data.split(':');
      const id = parts[1];
      const style = parts[2];
      await updateListingField(bot, q.from.id, q.message.chat.id, id, 'style', style);
      return;
    }

    // ===== –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ø–æ–∏—Å–∫–∞ –∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤ =====
    
    // –ú–µ–Ω—é –ø–æ–∏—Å–∫–∞
    if (q.data === 'search_menu') {
      await safeAnswerCallback(q.id);
      await showSearchMenu(bot, q.message.chat.id);
      return;
    }
    
    // –ü–æ–∏—Å–∫ –ø–æ —Ç–µ–∫—Å—Ç—É
    if (q.data === 'search_text') {
      await safeAnswerCallback(q.id);
      await startTextSearch(bot, q.message.chat.id, q.from.id);
      return;
    }
    
    // –ú–µ–Ω—é —Ñ–∏–ª—å—Ç—Ä–æ–≤
    if (q.data === 'search_filters') {
      await safeAnswerCallback(q.id);
      await showFiltersMenu(bot, q.message.chat.id, q.from.id);
      return;
    }
    
    // –õ–µ–Ω—Ç–∞ —Å —Ñ–∏–ª—å—Ç—Ä–∞–º–∏
    if (q.data === 'search_feed') {
      await safeAnswerCallback(q.id);
      await applyFiltersAndShowResults(bot, q.message.chat.id, q.from.id);
      return;
    }
    
    // –§–∏–ª—å—Ç—Ä –ø–æ –ø–æ–ª—É
    if (q.data === 'filter_gender') {
      await safeAnswerCallback(q.id);
      const keyboard = {
        reply_markup: {
          inline_keyboard: [
            [{ text: 'üë® –ú—É–∂—Å–∫–æ–π', callback_data: 'filter_gender_male' }],
            [{ text: 'üë© –ñ–µ–Ω—Å–∫–∏–π', callback_data: 'filter_gender_female' }],
            [{ text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data: 'search_filters' }]
          ]
        }
      };
      await bot.sendMessage(q.message.chat.id, 'üë§ **–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª**', { parse_mode: 'Markdown', ...keyboard });
      return;
    }
    
    if (q.data.startsWith('filter_gender_')) {
      await safeAnswerCallback(q.id);
      const gender = q.data.split('_')[2];
      const users = await readUsers();
      const uid = String(q.from.id);
      users[uid] = users[uid] || { profile: {}, platinum: false };
      users[uid].searchFilters = users[uid].searchFilters || {};
      users[uid].searchFilters.gender = gender;
      await writeUsers(users);
      await showFiltersMenu(bot, q.message.chat.id, q.from.id);
      return;
    }
    
    // –§–∏–ª—å—Ç—Ä –ø–æ —Å—Ç–∏–ª—é
    if (q.data === 'filter_style') {
      await safeAnswerCallback(q.id);
      const keyboard = {
        reply_markup: {
          inline_keyboard: [
            [{ text: '–ê—Ä—Ö–∏–≤', callback_data: 'filter_style_–∞—Ä—Ö–∏–≤' }],
            [{ text: '–ö–µ–∂—É–∞–ª', callback_data: 'filter_style_–∫–µ–∂—É–∞–ª' }],
            [{ text: 'Old money', callback_data: 'filter_style_old money' }],
            [{ text: '–°—Ç—Ä–∏—Ç–≤–∏—Ä', callback_data: 'filter_style_—Å—Ç—Ä–∏—Ç–≤–∏—Ä' }],
            [{ text: '–î—Ä—É–≥–æ–µ', callback_data: 'filter_style_–¥—Ä—É–≥–æ–µ' }],
            [{ text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data: 'search_filters' }]
          ]
        }
      };
      await bot.sendMessage(q.message.chat.id, 'üé® **–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∏–ª—å**', { parse_mode: 'Markdown', ...keyboard });
      return;
    }
    
    if (q.data.startsWith('filter_style_')) {
      await safeAnswerCallback(q.id);
      const style = q.data.split('_').slice(2).join('_');
      const users = await readUsers();
      const uid = String(q.from.id);
      users[uid] = users[uid] || { profile: {}, platinum: false };
      users[uid].searchFilters = users[uid].searchFilters || {};
      users[uid].searchFilters.style = style;
      await writeUsers(users);
      await showFiltersMenu(bot, q.message.chat.id, q.from.id);
      return;
    }
    
    // –§–∏–ª—å—Ç—Ä –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    if (q.data === 'filter_category') {
      await safeAnswerCallback(q.id);
      await showCategoryMenu(bot, q.message.chat.id);
      return;
    }
    
    if (q.data.startsWith('category_')) {
      await safeAnswerCallback(q.id);
      const category = q.data.split('_').slice(1).join('_');
      const users = await readUsers();
      const uid = String(q.from.id);
      users[uid] = users[uid] || { profile: {}, platinum: false };
      users[uid].searchFilters = users[uid].searchFilters || {};
      users[uid].searchFilters.category = category;
      await writeUsers(users);
      await showFiltersMenu(bot, q.message.chat.id, q.from.id);
      return;
    }
    
    // –§–∏–ª—å—Ç—Ä –ø–æ —Ü–µ–Ω–µ
    if (q.data === 'filter_price') {
      await safeAnswerCallback(q.id);
      await showPriceFilterMenu(bot, q.message.chat.id);
      return;
    }
    
    if (q.data.startsWith('price_')) {
      await safeAnswerCallback(q.id);
      if (q.data === 'price_custom') {
        const users = await readUsers();
        const uid = String(q.from.id);
        users[uid] = users[uid] || { profile: {}, platinum: false };
        users[uid].session = { flow: 'price_filter', step: 'min_price', temp: {} };
        await writeUsers(users);
        await bot.sendMessage(q.message.chat.id, 'üí∞ **–£–∫–∞–∂–∏—Ç–µ –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é —Ü–µ–Ω—É**\n\n–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 1000):', { parse_mode: 'Markdown' });
        return;
      }
      
      const parts = q.data.split('_');
      const minPrice = parts[1];
      const maxPrice = parts[2];
      
      const users = await readUsers();
      const uid = String(q.from.id);
      users[uid] = users[uid] || { profile: {}, platinum: false };
      users[uid].searchFilters = users[uid].searchFilters || {};
      users[uid].searchFilters.minPrice = minPrice;
      users[uid].searchFilters.maxPrice = maxPrice;
      await writeUsers(users);
      await showFiltersMenu(bot, q.message.chat.id, q.from.id);
      return;
    }
    
    // –§–∏–ª—å—Ç—Ä –ø–æ –±—Ä–µ–Ω–¥—É
    if (q.data === 'filter_brand') {
      await safeAnswerCallback(q.id);
      await showBrandFilterMenu(bot, q.message.chat.id);
      return;
    }
    
    if (q.data.startsWith('brand_')) {
      await safeAnswerCallback(q.id);
      if (q.data === 'brand_custom') {
        const users = await readUsers();
        const uid = String(q.from.id);
        users[uid] = users[uid] || { profile: {}, platinum: false };
        users[uid].session = { flow: 'brand_filter', step: 'brand_name', temp: {} };
        await writeUsers(users);
        await bot.sendMessage(q.message.chat.id, 'üè∑Ô∏è **–£–∫–∞–∂–∏—Ç–µ –±—Ä–µ–Ω–¥**\n\n–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –±—Ä–µ–Ω–¥–∞:', { parse_mode: 'Markdown' });
        return;
      }
      
      const brand = q.data.split('_').slice(1).join('_');
      const users = await readUsers();
      const uid = String(q.from.id);
      users[uid] = users[uid] || { profile: {}, platinum: false };
      users[uid].searchFilters = users[uid].searchFilters || {};
      users[uid].searchFilters.brand = brand;
      await writeUsers(users);
      await showFiltersMenu(bot, q.message.chat.id, q.from.id);
      return;
    }
    
    // –°–±—Ä–æ—Å —Ñ–∏–ª—å—Ç—Ä–æ–≤
    if (q.data === 'filter_reset') {
      await safeAnswerCallback(q.id);
      const users = await readUsers();
      const uid = String(q.from.id);
      users[uid] = users[uid] || { profile: {}, platinum: false };
      users[uid].searchFilters = {};
      await writeUsers(users);
      await showFiltersMenu(bot, q.message.chat.id, q.from.id);
      return;
    }
    
    // –ü—Ä–∏–º–µ–Ω–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã
    if (q.data === 'filter_apply') {
      await safeAnswerCallback(q.id);
      await applyFiltersAndShowResults(bot, q.message.chat.id, q.from.id);
      return;
    }
  });

  bot.on('message', async (msg) => {
    const chatId = msg.chat.id;
    
    console.log('üîç [DEBUG] bot.on("message") –≤—ã–∑–≤–∞–Ω:', {
      userId: msg.from.id,
      hasText: !!msg.text,
      hasCaption: !!msg.caption,
      hasPhotos: !!msg.photo,
      isForwarded: !!msg.forward_from,
      photoCount: msg.photo?.length
    });
    
    // –§–ª–∞–≥ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
    if (msg._processed) {
      console.log('üîç [DEBUG] –°–æ–æ–±—â–µ–Ω–∏–µ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ');
      return;
    }
    
    // –ü–æ–ª—É—á–∞–µ–º —Å–µ—Å—Å–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–æ—Ç–æ
    const users = await readUsers();
    const uid = String(msg.from.id);
    const session = users[uid] && users[uid].session ? users[uid].session : null;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ
    if (users[uid] && users[uid].editingListing) {
      const editing = users[uid].editingListing;
      const field = editing.field;
      const listingId = editing.id;
      
      // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –ø–æ–ª–µ–π
      if (msg.text && (field === 'title' || field === 'price' || field === 'description')) {
        await updateListingField(bot, msg.from.id, msg.chat.id, listingId, field, msg.text.trim());
        return;
      }
      
      // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ
      if (msg.photo && field === 'photos') {
        const sizes = msg.photo || [];
        const best = sizes[sizes.length - 1];
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –º–∞—Å—Å–∏–≤ —Ñ–æ—Ç–æ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
        if (!users[uid].editingPhotos) {
          users[uid].editingPhotos = [];
        }
        
        users[uid].editingPhotos.push(best.file_id);
        await writeUsers(users);
        
        const photoCount = users[uid].editingPhotos.length;
        const maxPhotos = 5;
        
        if (photoCount >= maxPhotos) {
          await bot.sendMessage(msg.chat.id, `üì∏ –§–æ—Ç–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ (${photoCount}/${maxPhotos}). –ú–∞–∫—Å–∏–º—É–º –¥–æ—Å—Ç–∏–≥–Ω—É—Ç. –ù–∞–∂–º–∏—Ç–µ ¬´–ì–æ—Ç–æ–≤–æ¬ª –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è.`, { 
            reply_markup: { keyboard: [[{ text: '‚úÖ –ì–æ—Ç–æ–≤–æ' }]], resize_keyboard: true } 
          });
        } else {
          await bot.sendMessage(msg.chat.id, `üì∏ –§–æ—Ç–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ (${photoCount}/${maxPhotos}). –û—Ç–ø—Ä–∞–≤—å—Ç–µ –µ—â—ë —Ñ–æ—Ç–æ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ ¬´–ì–æ—Ç–æ–≤–æ¬ª.`, { 
            reply_markup: { keyboard: [[{ text: '‚úÖ –ì–æ—Ç–æ–≤–æ' }]], resize_keyboard: true } 
          });
        }
        return;
      }
      
      // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ì–æ—Ç–æ–≤–æ" –¥–ª—è —Ñ–æ—Ç–æ
      if (msg.text && (msg.text === '‚úÖ –ì–æ—Ç–æ–≤–æ' || msg.text === '–ì–æ—Ç–æ–≤–æ') && field === 'photos') {
        if (users[uid].editingPhotos && users[uid].editingPhotos.length > 0) {
          await updateListingField(bot, msg.from.id, msg.chat.id, listingId, 'photos', users[uid].editingPhotos);
          // –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–æ—Ç–æ
          delete users[uid].editingPhotos;
          await writeUsers(users);
        } else {
          await bot.sendMessage(msg.chat.id, '‚ùå –ù–µ—Ç —Ñ–æ—Ç–æ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ —Ñ–æ—Ç–æ.');
        }
        return;
      }
    }
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ _processed –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π —Å —Ñ–æ—Ç–æ —Å—Ä–∞–∑—É, —á—Ç–æ–±—ã –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—Ç–∏—Ç—å –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ
    if (msg.photo && msg.photo.length > 0) {
      msg._processed = true;
    }
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ –≤ bot.on("message") –¥–ª—è sell/seek/parse flows (–ü–ï–†–ï–î —É—Å—Ç–∞–Ω–æ–≤–∫–æ–π —Ñ–ª–∞–≥–∞)
    if (session && msg.photo && msg.photo.length > 0 && 
        (session.flow === 'sell' || session.flow === 'seek' || session.flow === 'parse') && 
        session.step === 'photos') {
      
      console.log('üîç [DEBUG] –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ –≤ bot.on("message") –¥–ª—è sell flow');
      const sizes = msg.photo || [];
      const best = sizes[sizes.length - 1];
      session.temp.photos = session.temp.photos || [];
      session.temp.photos.push(best.file_id);
      
      console.log('üîç [DEBUG] –§–æ—Ç–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ —Å–µ—Å—Å–∏—é –≤ bot.on("message"):', session.temp.photos);
      console.log('üîç [DEBUG] –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–æ—Ç–æ –≤ —Å–µ—Å—Å–∏–∏:', session.temp.photos.length);
      
      users[uid].session = session;
      await writeUsers(users);
      
      const photoCount = session.temp.photos.length;
      const maxPhotos = 5;
      if (photoCount >= maxPhotos) {
        await bot.sendMessage(msg.chat.id, `üì∏ –§–æ—Ç–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ (${photoCount}/${maxPhotos}). –ú–∞–∫—Å–∏–º—É–º –¥–æ—Å—Ç–∏–≥–Ω—É—Ç. –ù–∞–∂–º–∏—Ç–µ ¬´–ì–æ—Ç–æ–≤–æ¬ª –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è.`, { 
          reply_markup: { keyboard: [[{ text: '‚úÖ –ì–æ—Ç–æ–≤–æ' }]], resize_keyboard: true } 
        });
      } else {
        await bot.sendMessage(msg.chat.id, `üì∏ –§–æ—Ç–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ (${photoCount}/${maxPhotos}). –û—Ç–ø—Ä–∞–≤—å—Ç–µ –µ—â—ë —Ñ–æ—Ç–æ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ ¬´–ì–æ—Ç–æ–≤–æ¬ª.`, { 
          reply_markup: { keyboard: [[{ text: '‚úÖ –ì–æ—Ç–æ–≤–æ' }]], resize_keyboard: true } 
        });
      }
      
      return;
    }
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ _processed –¥–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    if (!msg.photo || msg.photo.length === 0) {
      msg._processed = true;
    }
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è parse flow
    if (msg.forward_from) {
      console.log('üîç [DEBUG] –ü–µ—Ä–µ—Å–ª–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–æ:', {
        userId: msg.from.id,
        text: msg.text,
        caption: msg.caption,
        forwardFrom: msg.forward_from,
        hasText: !!msg.text,
        hasCaption: !!msg.caption,
        hasPhotos: !!msg.photo,
        photoCount: msg.photo?.length
      });
      console.log('üîç [DEBUG] –ü–µ—Ä–µ—Å–ª–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ - msg.photo:', msg.photo);
      console.log('üîç [DEBUG] –ü–µ—Ä–µ—Å–ª–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ - JSON.stringify(msg.photo):', JSON.stringify(msg.photo, null, 2));
      
      const users = await readUsers();
      const uid = String(msg.from.id);
      const session = users[uid] && users[uid].session ? users[uid].session : null;
      
      console.log('üîç [DEBUG] –°–µ—Å—Å–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', {
        session: session,
        flow: session?.flow,
        step: session?.step
      });
      
      if (session && session.flow === 'parse' && session.step === 'text') {
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—Å—Ç –∏–ª–∏ –ø–æ–¥–ø–∏—Å—å –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞
        const textToParse = msg.text || msg.caption;
        console.log('üîç [DEBUG] –¢–µ–∫—Å—Ç –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞:', textToParse);
        
        if (textToParse) {
          const modifiedMsg = { ...msg, text: textToParse };
          
          // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–æ—Ç–æ –µ—Å–ª–∏ –µ—Å—Ç—å
          if (msg.photo && msg.photo.length > 0) {
            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –º–∞—Å—Å–∏–≤ —Ñ–æ—Ç–æ –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
            session.temp.photos = session.temp.photos || [];
            
            // –ë–µ—Ä–µ–º —Å–∞–º–æ–µ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ —Ñ–æ—Ç–æ (–ø–æ—Å–ª–µ–¥–Ω–µ–µ –≤ –º–∞—Å—Å–∏–≤–µ) - —ç—Ç–æ —Ä–∞–∑–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã –æ–¥–Ω–æ–≥–æ —Ñ–æ—Ç–æ
            const bestPhoto = msg.photo[msg.photo.length - 1];
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å–æ—Ö—Ä–∞–Ω–∏–ª–∏ –ª–∏ –º—ã —É–∂–µ —ç—Ç–æ —Ñ–æ—Ç–æ (–ø–æ file_id)
            const photoExists = session.temp.photos.includes(bestPhoto.file_id);
            
            if (!photoExists) {
              session.temp.photos.push(bestPhoto.file_id);
              console.log('üîç [DEBUG] –î–æ–±–∞–≤–ª–µ–Ω–æ –Ω–æ–≤–æ–µ —Ñ–æ—Ç–æ –≤ —Å–µ—Å—Å–∏—é:', bestPhoto.file_id);
            } else {
              console.log('üîç [DEBUG] –§–æ—Ç–æ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ —Å–µ—Å—Å–∏–∏, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º:', bestPhoto.file_id);
            }
            
            console.log('üîç [DEBUG] –í—Å–µ —Ñ–æ—Ç–æ –≤ —Å–µ—Å—Å–∏–∏:', session.temp.photos);
            console.log('üîç [DEBUG] –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–æ—Ç–æ –≤ –æ—Ä–∏–≥–∏–Ω–∞–ª–µ:', msg.photo.length);
            console.log('üîç [DEBUG] –í—ã–±—Ä–∞–Ω–æ –ª—É—á—à–µ–µ —Ñ–æ—Ç–æ:', bestPhoto.file_id);
            console.log('üîç [DEBUG] –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–æ—Ç–æ –≤ —Å–µ—Å—Å–∏–∏:', session.temp.photos.length);
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ —Å–µ—Å—Å–∏–∏
            users[uid].session = session;
            await writeUsers(users);
          }
          
          // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–∞–∫ –æ–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç
          const handled = await handleSessionMessage(bot, modifiedMsg, session, users);
          console.log('üîç [DEBUG] –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏:', handled);
          
          if (handled) {
            await writeUsers(users);
            return;
          }
        } else {
          console.log('üîç [DEBUG] –ù–µ—Ç —Ç–µ–∫—Å—Ç–∞ –∏–ª–∏ –ø–æ–¥–ø–∏—Å–∏ –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞');
          // –ù–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É, –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
          return;
        }
      } else {
        console.log('üîç [DEBUG] –°–µ—Å—Å–∏—è –Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞');
        // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –≤ —Ä–µ–∂–∏–º–µ –ø–∞—Ä—Å–∏–Ω–≥–∞, –Ω–æ –æ—Ç–ø—Ä–∞–≤–∏–ª –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—Å—Ç –∏ —Ñ–æ—Ç–æ –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥–∞
        const users = await readUsers();
        const uid = String(msg.from.id);
        users[uid] = users[uid] || { profile: {}, platinum: false };
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—Å—Ç –µ—Å–ª–∏ –µ—Å—Ç—å
        if (msg.text || msg.caption) {
          users[uid].forwardedText = msg.text || msg.caption;
        }
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–æ—Ç–æ –µ—Å–ª–∏ –µ—Å—Ç—å
        if (msg.photo && msg.photo.length > 0) {
          // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –º–∞—Å—Å–∏–≤ —Ñ–æ—Ç–æ –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
          users[uid].forwardedPhotos = users[uid].forwardedPhotos || [];
          
          // –ë–µ—Ä–µ–º —Å–∞–º–æ–µ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ —Ñ–æ—Ç–æ (–ø–æ—Å–ª–µ–¥–Ω–µ–µ –≤ –º–∞—Å—Å–∏–≤–µ) - —ç—Ç–æ —Ä–∞–∑–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã –æ–¥–Ω–æ–≥–æ —Ñ–æ—Ç–æ
          const bestPhoto = msg.photo[msg.photo.length - 1];
          
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å–æ—Ö—Ä–∞–Ω–∏–ª–∏ –ª–∏ –º—ã —É–∂–µ —ç—Ç–æ —Ñ–æ—Ç–æ (–ø–æ file_id)
          const photoExists = users[uid].forwardedPhotos.includes(bestPhoto.file_id);
          
          if (!photoExists) {
            users[uid].forwardedPhotos.push(bestPhoto.file_id);
            console.log('üîç [DEBUG] –î–æ–±–∞–≤–ª–µ–Ω–æ –Ω–æ–≤–æ–µ —Ñ–æ—Ç–æ –∏–∑ –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è:', bestPhoto.file_id);
          } else {
            console.log('üîç [DEBUG] –§–æ—Ç–æ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º:', bestPhoto.file_id);
          }
          
          console.log('üîç [DEBUG] –í—Å–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ —Ñ–æ—Ç–æ –∏–∑ –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π:', users[uid].forwardedPhotos);
          console.log('üîç [DEBUG] –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–æ—Ç–æ –≤ –æ—Ä–∏–≥–∏–Ω–∞–ª–µ:', msg.photo.length);
          console.log('üîç [DEBUG] –í—ã–±—Ä–∞–Ω–æ –ª—É—á—à–µ–µ —Ñ–æ—Ç–æ:', bestPhoto.file_id);
          console.log('üîç [DEBUG] –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö —Ñ–æ—Ç–æ:', users[uid].forwardedPhotos.length);
        } else {
          console.log('üîç [DEBUG] –í –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ –Ω–µ—Ç —Ñ–æ—Ç–æ');
          console.log('üîç [DEBUG] msg.photo:', msg.photo);
          // –ù–ï –æ—á–∏—â–∞–µ–º –º–∞—Å—Å–∏–≤ —Ñ–æ—Ç–æ, —Ç–∞–∫ –∫–∞–∫ –º–æ–≥—É—Ç –±—ã—Ç—å –¥—Ä—É–≥–∏–µ —Ñ–æ—Ç–æ –≤ –¥—Ä—É–≥–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö
        }
        
        await writeUsers(users);
        
        console.log('üîç [DEBUG] –ü–æ—Å–ª–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è - forwardedPhotos:', users[uid].forwardedPhotos);
        console.log('üîç [DEBUG] –ü–æ—Å–ª–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è - –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ forwardedPhotos:', users[uid].forwardedPhotos?.length || 0);
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å —Ç–µ–∫—Å—Ç –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞
        if (msg.text || msg.caption) {
          await bot.sendMessage(chatId, 
            'üìù –í—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ!\n\n' +
            '–•–æ—Ç–∏—Ç–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏–∑–≤–ª–µ—á—å –∏–∑ –Ω–µ–≥–æ –¥–∞–Ω–Ω—ã–µ? –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:',
            {
              reply_markup: {
                inline_keyboard: [
                  [{ text: 'üìù –ü–∞—Ä—Å–∏—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ', callback_data: 'parse_forwarded' }]
                ]
              }
            }
          );
        }
        return; // –î–æ–±–∞–≤–ª—è–µ–º return —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è
      }
    }
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π —Å –ø–æ–¥–ø–∏—Å—å—é –¥–ª—è parse flow
    if (msg.caption && !msg.text) {
      const users = await readUsers();
      const uid = String(msg.from.id);
      const session = users[uid] && users[uid].session ? users[uid].session : null;
      
      console.log('üîç [DEBUG] –°–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–¥–ø–∏—Å—å—é –ø–æ–ª—É—á–µ–Ω–æ:', {
        userId: msg.from.id,
        caption: msg.caption,
        hasPhotos: !!msg.photo,
        session: session?.flow,
        step: session?.step
      });
      
      if (session && session.flow === 'parse' && session.step === 'text') {
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ–¥–ø–∏—Å—å –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞
        const modifiedMsg = { ...msg, text: msg.caption };
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–æ—Ç–æ –ø–µ—Ä–µ–¥ –æ–±—Ä–∞–±–æ—Ç–∫–æ–π
        if (msg.photo && msg.photo.length > 0) {
          // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Å–µ —Ñ–æ—Ç–æ, –∞ –Ω–µ —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–µ–µ
          session.temp.photos = session.temp.photos || [];
          msg.photo.forEach(photo => {
            session.temp.photos.push(photo.file_id);
          });
          console.log('üîç [DEBUG] –°–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤—Å–µ —Ñ–æ—Ç–æ –≤ —Å–µ—Å—Å–∏–∏ –ø–µ—Ä–µ–¥ –æ–±—Ä–∞–±–æ—Ç–∫–æ–π:', session.temp.photos);
          console.log('üîç [DEBUG] –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö —Ñ–æ—Ç–æ:', session.temp.photos.length);
          users[uid].session = session;
          await writeUsers(users);
        }
        
        const handled = await handleSessionMessage(bot, modifiedMsg, session, users);
        console.log('üîç [DEBUG] –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–æ–¥–ø–∏—Å–∏:', handled);
        
        if (handled) {
          await writeUsers(users);
          return;
        }
      } else {
        // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –≤ —Ä–µ–∂–∏–º–µ –ø–∞—Ä—Å–∏–Ω–≥–∞, –Ω–æ –æ—Ç–ø—Ä–∞–≤–∏–ª —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–¥–ø–∏—Å—å—é
        const users = await readUsers();
        const uid = String(msg.from.id);
        users[uid] = users[uid] || { profile: {}, platinum: false };
        users[uid].forwardedText = msg.caption;
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–æ—Ç–æ –µ—Å–ª–∏ –µ—Å—Ç—å
        if (msg.photo && msg.photo.length > 0) {
          // –ë–µ—Ä–µ–º —Å–∞–º–æ–µ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ —Ñ–æ—Ç–æ (–ø–æ—Å–ª–µ–¥–Ω–µ–µ –≤ –º–∞—Å—Å–∏–≤–µ)
          const bestPhoto = msg.photo[msg.photo.length - 1];
          // –ï—Å–ª–∏ —É–∂–µ –µ—Å—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ —Ñ–æ—Ç–æ, –¥–æ–±–∞–≤–ª—è–µ–º –∫ –Ω–∏–º, –∏–Ω–∞—á–µ —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –º–∞—Å—Å–∏–≤
          users[uid].forwardedPhotos = users[uid].forwardedPhotos || [];
          users[uid].forwardedPhotos.push(bestPhoto.file_id);
          console.log('üîç [DEBUG] –°–æ—Ö—Ä–∞–Ω–µ–Ω—ã —Ñ–æ—Ç–æ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –ø–æ–¥–ø–∏—Å—å—é (parse flow):', users[uid].forwardedPhotos);
          console.log('üîç [DEBUG] –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–æ—Ç–æ –≤ –æ—Ä–∏–≥–∏–Ω–∞–ª–µ:', msg.photo.length);
          console.log('üîç [DEBUG] –í—ã–±—Ä–∞–Ω–æ –ª—É—á—à–µ–µ —Ñ–æ—Ç–æ:', bestPhoto.file_id);
        } else {
          console.log('üîç [DEBUG] –í —Å–æ–æ–±—â–µ–Ω–∏–∏ —Å –ø–æ–¥–ø–∏—Å—å—é –Ω–µ—Ç —Ñ–æ—Ç–æ (parse flow)');
          users[uid].forwardedPhotos = [];
        }
        
        await writeUsers(users);
        return; // –î–æ–±–∞–≤–ª—è–µ–º return —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è
      }
    }
    
    if (!msg.text) return;
    if (msg.text.startsWith('/')) return; // –∏–∑–±–µ–≥–∞–µ–º –¥—É–±–ª–µ–π —Å onText-–∫–æ–º–∞–Ω–¥–∞–º–∏

    // Gate on every message
    const ok = await isUserSubscribed(bot, msg.from.id);
    if (!ok) {
      await bot.sendMessage(chatId, '–ü—Ä–∏–≤–µ—Ç, –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ –Ω—É–∂–Ω–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Å–ø–æ–Ω—Å–æ—Ä–æ–≤:', subscriptionKeyboard());
      return;
    }
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const blocked = await isUserBlocked(msg.from.id);
    if (blocked) {
      await bot.sendMessage(chatId, 'üö´ –í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –∏ –Ω–µ –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞.');
      return;
    }

    const text = msg.text.trim();

    // Session-driven flows (sell, feed-params)
    // users, uid, and session are already defined above

    // –ì–ª–∞–≤–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ –∏–º–µ—é—Ç –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –Ω–∞–¥ –ª—é–±—ã–º–∏ —Å–µ—Å—Å–∏—è–º–∏
    if (/^(üõí –ö—É–ø–∏—Ç—å|üí∞ –ü—Ä–æ–¥–∞—Ç—å|üîç –ü–æ–∏—Å–∫|üìã –ú–æ–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è|üíé Platinum|–ö—É–ø–∏—Ç—å|–ü—Ä–æ–¥–∞—Ç—å|–ü–æ–∏—Å–∫|–ú–æ–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è|Platinum)$/i.test(text)) {
      if (session) {
        users[uid].session = null;
        await writeUsers(users);
      }
      await hideReplyKeyboard(bot, chatId);
      if (/^üõí\s*–ö—É–ø–∏—Ç—å$/i.test(text) || /^–ö—É–ø–∏—Ç—å$/i.test(text)) {
        const kb = { 
          reply_markup: { 
            inline_keyboard: [
              [{ text: 'üì∞ –õ–µ–Ω—Ç–∞', callback_data: 'buy_find' }],
              [{ text: 'üîç –ò—â—É –ø—Ä–µ–¥–º–µ—Ç', callback_data: 'buy_seek' }]
            ] 
          } 
        };
        await bot.sendMessage(chatId, '–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç:', kb);
        return;
      }
      if (/^üí∞\s*–ü—Ä–æ–¥–∞—Ç—å$/i.test(text) || /^–ü—Ä–æ–¥–∞—Ç—å$/i.test(text)) {
        const kb = { 
          reply_markup: { 
            inline_keyboard: [
              [{ text: '‚ûï –°–æ–∑–¥–∞—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ', callback_data: 'sell_create' }],
              [{ text: 'üìù –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–æ—Ç–æ–≤–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ', callback_data: 'sell_parse' }]
            ] 
          } 
        };
        await bot.sendMessage(chatId, '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', kb);
        return;
      }
      if (/^üîç\s*–ü–æ–∏—Å–∫$/i.test(text) || /^–ü–æ–∏—Å–∫$/i.test(text)) {
        await showSearchMenu(bot, chatId);
        return;
      }
      if (/^üìã\s*–ú–æ–∏\s*–æ–±—ä—è–≤–ª–µ–Ω–∏—è$/i.test(text) || /^–ú–æ–∏\s*–æ–±—ä—è–≤–ª–µ–Ω–∏—è$/i.test(text)) {
        const listings = await readListings();
        const mine = listings.filter(l => String(l.userId) === String(msg.from.id));
        if (mine.length === 0) {
          await bot.sendMessage(chatId, '–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏–π.', mainMenuKeyboard());
          return;
        }
        // –°—Ä–∞–∑—É –º–µ–Ω—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –Ω–∞ —Å–æ–Ω
        await setSleepKeyboard(bot, chatId);
        await showMyListingsMenu(bot, msg.from.id, chatId, 0);
        return;
      }
      if (/^üíé\s*Platinum$/i.test(text) || /^Platinum$/i.test(text)) {
        const user = users[uid] || { profile: {}, platinum: false };
        
        if (user.platinum) {
          await bot.sendMessage(chatId, '‚ú® –£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –ø—Ä–∏–≤–∏–ª–µ–≥–∏—è Platinum!\n\n–í–∞—à–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –æ—Ç–æ–±—Ä–∞–∂–∞—é—Ç—Å—è —Å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º +30% –∏ –∑–Ω–∞—á–∫–æ–º üíé Platinum.', mainMenuKeyboard());
          return;
        }
        
        const keyboard = {
          reply_markup: {
            inline_keyboard: [
              [{ text: 'üíé –ö—É–ø–∏—Ç—å Platinum –∑–∞ 300‚ÇΩ', callback_data: 'platinum_buy' }],
              [{ text: 'üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é', callback_data: 'main_menu' }]
            ]
          }
        };
        
        await bot.sendMessage(chatId, 
          'üíé **–ü—Ä–∏–≤–∏–ª–µ–≥–∏—è Platinum**\n\n' +
          '‚ú® **–ß—Ç–æ –¥–∞–µ—Ç Platinum:**\n' +
          '‚Ä¢ –í–∞—à–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –ø–æ–∫–∞–∑—ã–≤–∞—é—Ç—Å—è —Å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º +30%\n' +
          '‚Ä¢ –ë–æ–ª—å—à–µ –ª—é–¥–µ–π —É–≤–∏–¥—è—Ç –≤–∞—à–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è\n' +
          '‚Ä¢ –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –∑–Ω–∞—á–æ–∫ üíé Platinum\n' +
          '‚Ä¢ –£–≤–µ–ª–∏—á–µ–Ω–Ω–∞—è –≤–∏–¥–∏–º–æ—Å—Ç—å –≤ –ª–µ–Ω—Ç–µ\n\n' +
          'üí∞ **–°—Ç–æ–∏–º–æ—Å—Ç—å:** 300‚ÇΩ\n' +
          'üí≥ **–û–ø–ª–∞—Ç–∞:** –ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞\n\n' +
          '–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –ø–æ–∫—É–ø–∫–∏:', 
          { parse_mode: 'Markdown', ...keyboard }
        );
        return;
      }
    }

    // Feed controls via reply keyboard
    if (text === 'üëé' || text === 'üöÄ') {
      const feed = users[uid] && users[uid].feed ? users[uid].feed : null;
      if (feed && feed.filters && feed.filters.ownerOnly) return; // –≤ "–ú–æ–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è" –ª–∏—Å—Ç–∞—Ç—å –Ω–µ–ª—å–∑—è
      
      // –ü–æ–º–µ—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –∫–∞–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω–æ–µ –ø–µ—Ä–µ–¥ –ø–µ—Ä–µ—Ö–æ–¥–æ–º
      if (feed && feed.list && feed.list.length > 0) {
        const currentId = feed.list[feed.index] || feed.list[0];
        feed.seen = feed.seen || [];
        if (!feed.seen.includes(currentId)) {
          feed.seen.push(currentId);
          console.log('üëé/üöÄ [DEBUG] –ü–æ–º–µ—á–∞–µ–º –∫–∞–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω–æ–µ:', currentId);
        }
        users[uid].feed = feed;
        await writeUsers(users);
      }
      
      await showNextInFeed(bot, msg.from.id, chatId);
      // –ø–æ—Å–ª–µ –ø–µ—Ä–µ—Ö–æ–¥–∞ –≤—Å–µ–≥–¥–∞ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Ä–µ–∂–∏–º –∏ —Å—Ç–∞–≤–∏–º –±–∞–∑–æ–≤—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
      const u = await readUsers();
      const uid2 = String(msg.from.id);
      const usr = u[uid2] || {};
      if (usr.feed) usr.feed.mode = null;
      u[uid2] = usr;
      await writeUsers(u);
      try { await bot.sendMessage(chatId, '\u200B', feedReplyKeyboard(false, false)); } catch (_) {}
      return;
    }
    if (text === '–°–æ–Ω' || text === 'üí§') {
      // exit feed and show main menu
      users[uid] = users[uid] || {};
      users[uid].feed = users[uid].feed || null;
      users[uid].session = null; // –í—ã—Ö–æ–¥ –∏–∑ –ª—é–±–æ–π —Å–µ—Å—Å–∏–∏
      await writeUsers(users);
      await bot.sendMessage(chatId, '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', { reply_markup: mainMenuKeyboard().reply_markup });
      return;
    }
    if (text === '‚ù§Ô∏è' || text === '‚ù§') {
      console.log('üíñ [DEBUG] –õ–∞–π–∫ –ø–æ–ª—É—á–µ–Ω –æ—Ç:', uid, 'chatId:', chatId);
      let feed = users[uid] && users[uid].feed ? users[uid].feed : null;
      if (feed && feed.filters && feed.filters.ownerOnly) return; // –≤ "–ú–æ–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è" –Ω–µ–ª—å–∑—è –∫–æ–Ω—Ç–∞–∫—Ç/–ª–∞–π–∫
      // contact seller for current listing
      const listings = await readListings();
      if (!feed || !Array.isArray(feed.list) || feed.list.length === 0) {
        await bot.sendMessage(chatId, '–õ–µ–Ω—Ç–∞ –ø—É—Å—Ç–∞.', mainMenuKeyboard());
        return;
      }
      const listingId = feed.list[feed.index] || feed.list[0];
      const listing = listings.find(l => l.id === listingId);
      if (!listing) {
        await bot.sendMessage(chatId, '–û–±—ä—è–≤–ª–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.', mainMenuKeyboard());
        return;
      }
      const seller = listing.username || String(listing.userId);
      // –°–æ–æ–±—â–µ–Ω–∏–µ —Å inline-–∫–Ω–æ–ø–∫–∞–º–∏ (–°–≤—è–∑–∞—Ç—å—Å—è / –õ–µ–≥–∏—Ç—á–µ–∫)
      if (listing.username) {
        await bot.sendMessage(chatId, '–°–≤—è–∑–∞—Ç—å—Å—è —Å –ø—Ä–æ–¥–∞–≤—Ü–æ–º:', {
          reply_markup: {
            inline_keyboard: [
              [
                { text: 'üí¨ –°–≤—è–∑–∞—Ç—å—Å—è', url: `https://t.me/${listing.username.replace('@','')}` },
                { text: 'üõ°Ô∏è –õ–µ–≥–∏—Ç—á–µ–∫', url: 'https://t.me/kokc5' }
              ],
              [
                { text: 'üõ°Ô∏è –ì–∞—Ä–∞–Ω—Ç', url: 'https://t.me/ranjiroakim' },
                { text: 'üîç –ù–∞–π—Ç–∏', url: 'https://t.me/morgenrg' }
              ]
            ]
          }
        });
      } else {
        await bot.sendMessage(chatId, `–°–≤—è–∑–∞—Ç—å—Å—è —Å –ø—Ä–æ–¥–∞–≤—Ü–æ–º: ${seller}`, {
          reply_markup: {
            inline_keyboard: [
              [
                { text: 'üõ°Ô∏è –õ–µ–≥–∏—Ç—á–µ–∫', url: 'https://t.me/kokc5' },
                { text: 'üõ°Ô∏è –ì–∞—Ä–∞–Ω—Ç', url: 'https://t.me/ranjiroakim' }
              ],
              [
                { text: 'üîç –ù–∞–π—Ç–∏', url: 'https://t.me/morgenrg' }
              ]
            ]
          }
        });
      }
      
      // –ü–æ–º–µ—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –∫–∞–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω–æ–µ –ø–µ—Ä–µ–¥ –ø–µ—Ä–µ—Ö–æ–¥–æ–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É
      console.log('üíñ [DEBUG] –¢–µ–∫—É—â–µ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ ID:', listingId);
      console.log('üíñ [DEBUG] –¢–µ–∫—É—â–∏–π –º–∞—Å—Å–∏–≤ seen:', feed.seen);
      if (feed && feed.seen) {
        if (!feed.seen.includes(listingId)) {
          feed.seen.push(listingId);
          console.log('üíñ [DEBUG] –î–æ–±–∞–≤–∏–ª–∏ –≤ seen:', listingId);
        } else {
          console.log('üíñ [DEBUG] –£–∂–µ –±—ã–ª–æ –≤ seen:', listingId);
        }
      } else if (feed) {
        feed.seen = [listingId];
        console.log('üíñ [DEBUG] –°–æ–∑–¥–∞–ª–∏ –Ω–æ–≤—ã–π seen:', feed.seen);
      }
      users[uid].feed = feed;
      await writeUsers(users);
      console.log('üíñ [DEBUG] –°–æ—Ö—Ä–∞–Ω–∏–ª–∏ users —Å seen:', feed.seen);
      
      // –û–±–Ω–æ–≤–ª—è–µ–º reply-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —Ä–∞–∫–µ—Ç–æ–π –∏ –ø–æ–Ω—è—Ç–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º
      console.log('üíñ [DEBUG] –û–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —Ä–∞–∫–µ—Ç–æ–π...');
      await bot.sendMessage(chatId, '–ù–∞–∂–º–∏—Ç–µ üöÄ —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –Ω–æ–≤–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ', feedReplyKeyboard(false, true));
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∂–∏–º post_like –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const u = users[uid] || {};
      u.feed = u.feed || {};
      u.feed.mode = 'post_like';
      users[uid] = u;
      await writeUsers(users);
      console.log('üíñ [DEBUG] –†–µ–∂–∏–º post_like —Å–æ—Ö—Ä–∞–Ω–µ–Ω');
      return;
    }

    if (session) {
      const handled = await handleSessionMessage(bot, msg, session, users);
      if (handled) {
        await writeUsers(users);
        return;
      }
    }

    if (/^üõí –ö—É–ø–∏—Ç—å$/i.test(text) || /^–ö—É–ø–∏—Ç—å$/i.test(text)) {
      const kb = {
        reply_markup: {
          inline_keyboard: [
            [{ text: 'üì∞ –õ–µ–Ω—Ç–∞', callback_data: 'buy_find' }],
            [{ text: 'üîç –ò—â—É –ø—Ä–µ–¥–º–µ—Ç', callback_data: 'buy_seek' }]
          ]
        }
      };
      await bot.sendMessage(chatId, '–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç:', kb);
    } else if (/^üí∞ –ü—Ä–æ–¥–∞—Ç—å$/i.test(text) || /^–ü—Ä–æ–¥–∞—Ç—å$/i.test(text)) {
      const kb = {
        reply_markup: {
          inline_keyboard: [
            [{ text: '‚ûï –°–æ–∑–¥–∞—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ', callback_data: 'sell_create' }],
          ]
        }
      };
      await bot.sendMessage(chatId, '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', kb);
    }
  });

  // Capture photos for sell flow and parse flow
  bot.on('photo', async (msg) => {
    console.log('üîç [DEBUG] –ü–æ–ª—É—á–µ–Ω–æ —Ñ–æ—Ç–æ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', msg.from.id);
    console.log('üîç [DEBUG] msg.photo:', msg.photo);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ –ª–∏ —É–∂–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ bot.on('message')
    if (msg._processed) {
      console.log('üîç [DEBUG] –°–æ–æ–±—â–µ–Ω–∏–µ —Å —Ñ–æ—Ç–æ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ –≤ bot.on("message")');
      return;
    }
    
    console.log('üîç [DEBUG] –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ñ–æ—Ç–æ –≤—ã–∑–≤–∞–Ω:', {
      userId: msg.from.id,
      hasCaption: !!msg.caption,
      caption: msg.caption,
      hasPhotos: !!msg.photo,
      photoCount: msg.photo?.length,
      isForwarded: !!msg.forward_from
    });
    
    // –ï—Å–ª–∏ —ç—Ç–æ –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–¥–µ—Å—å - –ø—É—Å—Ç—å –æ–±—Ä–∞–±–æ—Ç–∞–µ—Ç—Å—è –≤ bot.on('message')
    if (msg.forward_from) {
      console.log('üîç [DEBUG] –ü–µ—Ä–µ—Å–ª–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ñ–æ—Ç–æ - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –≤ bot.on("photo")');
      console.log('üîç [DEBUG] –ü–µ—Ä–µ—Å–ª–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ - forward_from:', msg.forward_from);
      console.log('üîç [DEBUG] –ü–µ—Ä–µ—Å–ª–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ - hasPhotos:', !!msg.photo);
      console.log('üîç [DEBUG] –ü–µ—Ä–µ—Å–ª–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ - photoCount:', msg.photo?.length);
      return;
    }
    
    console.log('üîç [DEBUG] –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ –≤ bot.on("photo") - –Ω–µ –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ');
    
    const users = await readUsers();
    const uid = String(msg.from.id);
    const session = users[uid] && users[uid].session ? users[uid].session : null;
    
    console.log('üîç [DEBUG] –§–æ—Ç–æ –ø–æ–ª—É—á–µ–Ω–æ:', {
      userId: msg.from.id,
      session: session?.flow,
      step: session?.step,
      hasCaption: !!msg.caption
    });
    
    // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —Ä–µ–∂–∏–º–µ –ø–∞—Ä—Å–∏–Ω–≥–∞ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ñ–æ—Ç–æ —Å –ø–æ–¥–ø–∏—Å—å—é –Ω–∞ —à–∞–≥–µ 'text'
    if (session && session.flow === 'parse' && session.step === 'text' && msg.caption) {
      console.log('üîç [DEBUG] –ü–∞—Ä—Å–∏–Ω–≥ –ø–æ–¥–ø–∏—Å–∏ –∫ —Ñ–æ—Ç–æ:', msg.caption);
      
      const parsed = parseListingText(msg.caption);
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
      const existingPhotos = session.temp.photos || [];
      
      // –ë–µ—Ä–µ–º —Å–∞–º–æ–µ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ —Ñ–æ—Ç–æ (–ø–æ—Å–ª–µ–¥–Ω–µ–µ –≤ –º–∞—Å—Å–∏–≤–µ) - —ç—Ç–æ —Ä–∞–∑–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã –æ–¥–Ω–æ–≥–æ —Ñ–æ—Ç–æ
      const bestPhoto = msg.photo[msg.photo.length - 1];
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å–æ—Ö—Ä–∞–Ω–∏–ª–∏ –ª–∏ –º—ã —É–∂–µ —ç—Ç–æ —Ñ–æ—Ç–æ (–ø–æ file_id)
      const photoExists = existingPhotos.includes(bestPhoto.file_id);
      
      if (!photoExists) {
        existingPhotos.push(bestPhoto.file_id);
        console.log('üîç [DEBUG] –î–æ–±–∞–≤–ª–µ–Ω–æ –Ω–æ–≤–æ–µ —Ñ–æ—Ç–æ —Å –ø–æ–¥–ø–∏—Å—å—é:', bestPhoto.file_id);
      } else {
        console.log('üîç [DEBUG] –§–æ—Ç–æ —Å –ø–æ–¥–ø–∏—Å—å—é —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º:', bestPhoto.file_id);
      }
      
      session.temp = { ...parsed, photos: existingPhotos };
      console.log('üîç [DEBUG] –í –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ —Ñ–æ—Ç–æ —Å –ø–æ–¥–ø–∏—Å—å—é - —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ñ–æ—Ç–æ:', existingPhotos);
      console.log('üîç [DEBUG] –í –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ —Ñ–æ—Ç–æ —Å –ø–æ–¥–ø–∏—Å—å—é - –∏—Ç–æ–≥–æ–≤—ã–µ —Ñ–æ—Ç–æ –≤ session.temp:', session.temp.photos);
      console.log('üîç [DEBUG] –í –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ —Ñ–æ—Ç–æ —Å –ø–æ–¥–ø–∏—Å—å—é - –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–æ—Ç–æ:', session.temp.photos.length);
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ —Å–µ—Å—Å–∏–∏
      users[uid].session = session;
      await writeUsers(users);
      
      console.log('üîç [DEBUG] –ü–æ—Å–ª–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è - session.temp.photos:', session.temp.photos);
      console.log('üîç [DEBUG] –ü–æ—Å–ª–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è - –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–æ—Ç–æ:', session.temp.photos.length);
      
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —á—Ç–æ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å
      let response = 'üìù **–ò–∑–≤–ª–µ—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –ø–æ–¥–ø–∏—Å–∏ –∫ —Ñ–æ—Ç–æ:**\n\n';
      
      if (parsed.title) response += `‚úÖ –ù–∞–∑–≤–∞–Ω–∏–µ: ${parsed.title}\n`;
      if (parsed.price) response += `‚úÖ –¶–µ–Ω–∞: ${parsed.price}${parsed.price === 'SOLD' ? '' : '‚ÇΩ'}\n`;
      if (parsed.size) response += `‚úÖ –†–∞–∑–º–µ—Ä: ${parsed.size}\n`;
      if (parsed.gender) response += `‚úÖ –ü–æ–ª: ${parsed.gender === 'male' ? '–º—É–∂—Å–∫–æ–π' : '–∂–µ–Ω—Å–∫–∏–π'}\n`;
      if (parsed.style) response += `‚úÖ –°—Ç–∏–ª—å: ${parsed.style}\n`;
      if (parsed.description) response += `‚úÖ –û–ø–∏—Å–∞–Ω–∏–µ: ${parsed.description}\n`;
      
      response += '\n‚ùì **–ù–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ:**\n';
      
      const missing = [];
      if (!parsed.title) missing.push('–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞');
      if (!parsed.price && parsed.price !== 'SOLD') missing.push('–¶–µ–Ω–∞');
      if (!parsed.gender) missing.push('–ü–æ–ª');
      if (!parsed.style) missing.push('–°—Ç–∏–ª—å');
      
      if (missing.length === 0) {
        response += '‚úÖ –í—Å–µ –¥–∞–Ω–Ω—ã–µ –∏–∑–≤–ª–µ—á–µ–Ω—ã! –§–æ—Ç–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ. –ù–∞–∂–º–∏—Ç–µ ¬´–ì–æ—Ç–æ–≤–æ¬ª –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è.';
        session.step = 'photos';
        // –§–æ—Ç–æ —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤—ã—à–µ –≤ existingPhotos
        await bot.sendMessage(msg.chat.id, response, { 
          parse_mode: 'Markdown',
          reply_markup: { keyboard: [[{ text: '‚úÖ –ì–æ—Ç–æ–≤–æ' }]], resize_keyboard: true }
        });
      } else {
        response += missing.map(item => `‚Ä¢ ${item}`).join('\n');
        response += '\n\n–í—ã–±–µ—Ä–∏—Ç–µ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ:';
        session.step = 'missing_data';
        // –§–æ—Ç–æ —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤—ã—à–µ –≤ existingPhotos
        await bot.sendMessage(msg.chat.id, response, { 
          parse_mode: 'Markdown',
          ...missingDataKeyboard(missing)
        });
      }
      
      users[uid].session = session;
      await writeUsers(users);
      return;
    }
    
    // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —Ä–µ–∂–∏–º–µ –ø–∞—Ä—Å–∏–Ω–≥–∞ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ñ–æ—Ç–æ –ë–ï–ó –ø–æ–¥–ø–∏—Å–∏ –Ω–∞ —à–∞–≥–µ 'photos' –∏–ª–∏ 'text'
    if (session && session.flow === 'parse' && (session.step === 'photos' || session.step === 'text') && !msg.caption) {
      console.log('üîç [DEBUG] –î–æ–±–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ –∫ –æ–±—ä—è–≤–ª–µ–Ω–∏—é');
      
      const sizes = msg.photo || [];
      if (sizes.length === 0) return;
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Å–µ —Ñ–æ—Ç–æ, –∞ –Ω–µ —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–µ–µ
      session.temp.photos = session.temp.photos || [];
      sizes.forEach(photo => {
        session.temp.photos.push(photo.file_id);
      });
      users[uid].session = session;
      await writeUsers(users);
      
      console.log('üîç [DEBUG] –§–æ—Ç–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ —Å–µ—Å—Å–∏—é:', session.temp.photos);
      console.log('üîç [DEBUG] –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–æ—Ç–æ –≤ —Å–µ—Å—Å–∏–∏:', session.temp.photos.length);
      
      // –ï—Å–ª–∏ —ç—Ç–æ —à–∞–≥ 'text', –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —à–∞–≥—É 'photos'
      if (session.step === 'text') {
        session.step = 'photos';
        users[uid].session = session;
        await writeUsers(users);
        console.log('üîç [DEBUG] –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —à–∞–≥ photos - session.temp.photos:', session.temp.photos);
      }
      
      return; // –í–∞–∂–Ω–æ! –ü—Ä–µ—Ä—ã–≤–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ, —á—Ç–æ–±—ã –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –¥–∞–ª—å—à–µ
      
      const photoCount = session.temp.photos.length;
      const maxPhotos = 5;
      if (photoCount >= maxPhotos) {
        await bot.sendMessage(msg.chat.id, `üì∏ –§–æ—Ç–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ (${photoCount}/${maxPhotos}). –ú–∞–∫—Å–∏–º—É–º –¥–æ—Å—Ç–∏–≥–Ω—É—Ç. –ù–∞–∂–º–∏—Ç–µ ¬´–ì–æ—Ç–æ–≤–æ¬ª –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è.`, { 
          reply_markup: { keyboard: [[{ text: '‚úÖ –ì–æ—Ç–æ–≤–æ' }]], resize_keyboard: true } 
        });
      } else {
        await bot.sendMessage(msg.chat.id, `üì∏ –§–æ—Ç–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ (${photoCount}/${maxPhotos}). –û—Ç–ø—Ä–∞–≤—å—Ç–µ –µ—â—ë —Ñ–æ—Ç–æ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ ¬´–ì–æ—Ç–æ–≤–æ¬ª.`, { 
          reply_markup: { keyboard: [[{ text: '‚úÖ –ì–æ—Ç–æ–≤–æ' }]], resize_keyboard: true } 
        });
      }
      return;
    }
    
    // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ù–ï –≤ —Ä–µ–∂–∏–º–µ –ø–∞—Ä—Å–∏–Ω–≥–∞, –Ω–æ –æ—Ç–ø—Ä–∞–≤–∏–ª —Ñ–æ—Ç–æ —Å –ø–æ–¥–ø–∏—Å—å—é
    if (!session && msg.caption) {
      console.log('üîç [DEBUG] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –≤ —Ä–µ–∂–∏–º–µ –ø–∞—Ä—Å–∏–Ω–≥–∞, –Ω–æ –æ—Ç–ø—Ä–∞–≤–∏–ª —Ñ–æ—Ç–æ —Å –ø–æ–¥–ø–∏—Å—å—é');
      
      const users = await readUsers();
      const uid = String(msg.from.id);
      users[uid] = users[uid] || { profile: {}, platinum: false };
      users[uid].forwardedText = msg.caption;
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–æ—Ç–æ –µ—Å–ª–∏ –µ—Å—Ç—å
      if (msg.photo && msg.photo.length > 0) {
        // –ë–µ—Ä–µ–º —Å–∞–º–æ–µ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ —Ñ–æ—Ç–æ (–ø–æ—Å–ª–µ–¥–Ω–µ–µ –≤ –º–∞—Å—Å–∏–≤–µ)
        const bestPhoto = msg.photo[msg.photo.length - 1];
        // –ï—Å–ª–∏ —É–∂–µ –µ—Å—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ —Ñ–æ—Ç–æ, –¥–æ–±–∞–≤–ª—è–µ–º –∫ –Ω–∏–º, –∏–Ω–∞—á–µ —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –º–∞—Å—Å–∏–≤
        users[uid].forwardedPhotos = users[uid].forwardedPhotos || [];
        users[uid].forwardedPhotos.push(bestPhoto.file_id);
        console.log('üîç [DEBUG] –°–æ—Ö—Ä–∞–Ω–µ–Ω—ã —Ñ–æ—Ç–æ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –ø–æ–¥–ø–∏—Å—å—é:', users[uid].forwardedPhotos);
        console.log('üîç [DEBUG] –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–æ—Ç–æ –≤ –æ—Ä–∏–≥–∏–Ω–∞–ª–µ:', msg.photo.length);
        console.log('üîç [DEBUG] –í—ã–±—Ä–∞–Ω–æ –ª—É—á—à–µ–µ —Ñ–æ—Ç–æ:', bestPhoto.file_id);
      } else {
        console.log('üîç [DEBUG] –í —Å–æ–æ–±—â–µ–Ω–∏–∏ —Å –ø–æ–¥–ø–∏—Å—å—é –Ω–µ—Ç —Ñ–æ—Ç–æ');
        users[uid].forwardedPhotos = [];
      }
      
      await writeUsers(users);
      
      await bot.sendMessage(msg.chat.id, 
        'üìù –í—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ —Ñ–æ—Ç–æ —Å –ø–æ–¥–ø–∏—Å—å—é!\n\n' +
        '–•–æ—Ç–∏—Ç–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏–∑–≤–ª–µ—á—å –∏–∑ –Ω–µ–≥–æ –¥–∞–Ω–Ω—ã–µ? –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:',
        {
          reply_markup: {
            inline_keyboard: [
              [{ text: 'üìù –ü–∞—Ä—Å–∏—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ', callback_data: 'parse_forwarded' }]
            ]
          }
        }
      );
      return;
    }
    
    // –û–±—ã—á–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ –¥–ª—è sell/seek/parse flows –Ω–∞ —à–∞–≥–µ 'photos'
    // –û–¢–ö–õ–Æ–ß–ï–ù–û: —ç—Ç–∞ –ª–æ–≥–∏–∫–∞ –¥—É–±–ª–∏—Ä—É–µ—Ç bot.on('message') –∏ –≤—ã–∑—ã–≤–∞–µ—Ç –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π
    // –í—Å—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ —Ç–µ–ø–µ—Ä—å –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç —Ç–æ–ª—å–∫–æ –≤ bot.on('message')
    console.log('üîç [DEBUG] –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ –≤ bot.on("photo") –æ—Ç–∫–ª—é—á–µ–Ω–∞ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è');
    return;
  });
}

start().catch((e) => {
  console.error('–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞:', e);
  process.exit(1);
});


async function handleSessionMessage(bot, msg, session, users) {
  const uid = String(msg.from.id);
  const chatId = msg.chat.id;
  const text = msg.text || '';

  if (session.flow === 'sell') {
    switch (session.step) {
      case 'gender':
        // –û–∂–∏–¥–∞–µ–º –Ω–∞ —ç—Ç–æ–º —à–∞–≥–µ —Ç–æ–ª—å–∫–æ callback-–∫–Ω–æ–ø–∫–∏, –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç
        await bot.sendMessage(chatId, '–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª:', genderKeyboard());
        return true;
      case 'title':
        session.temp = { ...(session.temp||{}), title: text };
        session.step = 'style';
        await bot.sendMessage(chatId, '–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∏–ª—å:', stylesKeyboard());
        break;
      case 'price':
        {
          const normalized = String(text).replace(/\s+/g, '').replace(',', '.');
          const valid = /^\d+(?:[\.,]?\d{0,2})?$/.test(text);
          const validNormalized = /^\d+(?:\.\d{0,2})?$/.test(normalized);
          if (!valid && !validNormalized) {
            await bot.sendMessage(chatId, '‚ùå –í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É —Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ–º!\n\n–ü—Ä–∏–º–µ—Ä—ã: 1500, 1999.99, 2500');
            return true;
          }
          session.temp.price = validNormalized ? normalized : text;
          session.step = 'description';
          await bot.sendMessage(chatId, 'üìù –ö–æ—Ä–æ—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ:');
        }
        break;
      case 'description':
        session.temp.description = text;
        session.step = 'photos';
        await bot.sendMessage(chatId, 'üì∏ –û—Ç–ø—Ä–∞–≤—å—Ç–µ 1-5 —Ñ–æ—Ç–æ —Ç–æ–≤–∞—Ä–∞ (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –º–∏–Ω–∏–º—É–º 1 —Ñ–æ—Ç–æ). –ö–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—Ç–µ ‚Äî –Ω–∞–∂–º–∏—Ç–µ ¬´–ì–æ—Ç–æ–≤–æ¬ª.', { reply_markup: { keyboard: [[{ text: '‚úÖ –ì–æ—Ç–æ–≤–æ' }]], resize_keyboard: true } });
        break;
      case 'photos':
        if (/^(–≥–æ—Ç–æ–≤–æ|–≥–æ—Ç–æ–≤|done|–∑–∞–≤–µ—Ä—à–∏—Ç—å)$/i.test(text) || /^‚úÖ –ì–æ—Ç–æ–≤–æ$/i.test(text)) {
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ —Ñ–æ—Ç–æ
          const photos = session.temp.photos || [];
          console.log('üîç [DEBUG] –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ –ì–æ—Ç–æ–≤–æ –≤ sell flow - —Ñ–æ—Ç–æ –≤ —Å–µ—Å—Å–∏–∏:', photos);
          console.log('üîç [DEBUG] –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–æ—Ç–æ –≤ —Å–µ—Å—Å–∏–∏:', photos.length);
          console.log('üîç [DEBUG] session.temp:', session.temp);
          console.log('üîç [DEBUG] session.step:', session.step);
          console.log('üîç [DEBUG] session.flow:', session.flow);
          
          if (photos.length === 0) {
            await bot.sendMessage(chatId, '‚ùå –û–±—ä—è–≤–ª–µ–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å —Å–æ–∑–¥–∞–Ω–æ –±–µ–∑ —Ñ–æ—Ç–æ!\n\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ —Ñ–æ—Ç–æ —Ç–æ–≤–∞—Ä–∞, –∑–∞—Ç–µ–º –Ω–∞–∂–º–∏—Ç–µ ¬´–ì–æ—Ç–æ–≤–æ¬ª.', { 
              reply_markup: { keyboard: [[{ text: '‚úÖ –ì–æ—Ç–æ–≤–æ' }]], resize_keyboard: true } 
            });
            return true;
          }
          
          // Save listing
          const listings = await readListings();
          
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –¥—É–±–ª–∏–∫–∞—Ç—ã –ø–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º—É
          const newListingData = {
            userId: msg.from.id,
            username: msg.from.username ? `@${msg.from.username}` : (msg.from.first_name || '') ,
            type: 'sell', // –¢–∏–ø –æ–±—ä—è–≤–ª–µ–Ω–∏—è - –ø—Ä–æ–¥–∞–∂–∞
            ...session.temp
          };
          
          console.log('üîç [DEBUG] –°–æ–∑–¥–∞–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è - session.temp:', session.temp);
          console.log('üîç [DEBUG] –°–æ–∑–¥–∞–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è - newListingData.gender:', newListingData.gender);
          
          // –°–æ–∑–¥–∞–µ–º –∫–ª—é—á –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ (—Ç–æ–ª—å–∫–æ –æ—Ç —Ç–æ–≥–æ –∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è)
          const contentKey = `${newListingData.userId}_${newListingData.title}_${newListingData.style}_${newListingData.price}_${newListingData.description}_${(newListingData.photos && newListingData.photos[0]) || ''}`;
          
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Ç–∞–∫–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –æ—Ç —Ç–æ–≥–æ –∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
          const isDuplicate = listings.some(existingListing => {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–ª—å–∫–æ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –æ—Ç —Ç–æ–≥–æ –∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            if (String(existingListing.userId) !== String(newListingData.userId)) return false;
            const existingKey = `${existingListing.userId}_${existingListing.title}_${existingListing.style}_${existingListing.price}_${existingListing.description}_${(existingListing.photos && existingListing.photos[0]) || ''}`;
            return existingKey === contentKey;
          });
          
          if (isDuplicate) {
            await bot.sendMessage(chatId, '‚ùå –¢–∞–∫–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–æ–∑–¥–∞–π—Ç–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ —Å –¥—Ä—É–≥–∏–º —Å–æ–¥–µ—Ä–∂–∏–º—ã–º.', mainMenuKeyboard());
            users[uid].session = null;
            await writeUsers(users);
            return true;
          }
          
          const listing = {
            id: String(Date.now()),
            ...newListingData,
            createdAt: new Date().toISOString()
          };
          listings.unshift(listing);
          await writeListings(listings);
          users[uid].session = null;
          await bot.sendMessage(chatId, '–û–±—ä—è–≤–ª–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ ‚úÖ', mainMenuKeyboard());
        } else {
          await bot.sendMessage(chatId, '–û—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ —Ñ–æ—Ç–æ. –ö–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—Ç–µ ‚Äî –Ω–∞–∂–º–∏—Ç–µ ¬´–ì–æ—Ç–æ–≤–æ¬ª.', { reply_markup: { keyboard: [[{ text: '‚úÖ –ì–æ—Ç–æ–≤–æ' }]], resize_keyboard: true } });
        }
        break;
      default:
        break;
    }
    users[uid].session = session;
    return true;
  }

  if (session.flow === 'seek') {
    switch (session.step) {
      case 'gender':
        // –û–∂–∏–¥–∞–µ–º –Ω–∞ —ç—Ç–æ–º —à–∞–≥–µ —Ç–æ–ª—å–∫–æ callback-–∫–Ω–æ–ø–∫–∏, –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç
        await bot.sendMessage(chatId, '–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª:', genderKeyboard());
        return true;
      case 'title':
        session.temp = { ...(session.temp||{}), title: text };
        session.step = 'style';
        await bot.sendMessage(chatId, '–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∏–ª—å:', stylesKeyboard());
        break;
      case 'price':
        {
          const normalized = String(text).replace(/\s+/g, '').replace(',', '.');
          const valid = /^\d+(?:[\.,]?\d{0,2})?$/.test(text);
          const validNormalized = /^\d+(?:\.\d{0,2})?$/.test(normalized);
          if (!valid && !validNormalized) {
            await bot.sendMessage(chatId, '‚ùå –í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É —Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ–º!\n\n–ü—Ä–∏–º–µ—Ä—ã: 1500, 1999.99, 2500');
            return true;
          }
          session.temp.price = validNormalized ? normalized : text;
          session.step = 'description';
          await bot.sendMessage(chatId, 'üìù –ö–æ—Ä–æ—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ:');
        }
        break;
      case 'description':
        session.temp.description = text;
        session.step = 'photos';
        await bot.sendMessage(chatId, 'üì∏ –û—Ç–ø—Ä–∞–≤—å—Ç–µ 1-5 —Ñ–æ—Ç–æ —Ç–æ–≤–∞—Ä–∞ (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –º–∏–Ω–∏–º—É–º 1 —Ñ–æ—Ç–æ). –ö–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—Ç–µ ‚Äî –Ω–∞–∂–º–∏—Ç–µ ¬´–ì–æ—Ç–æ–≤–æ¬ª.', { reply_markup: { keyboard: [[{ text: '‚úÖ –ì–æ—Ç–æ–≤–æ' }]], resize_keyboard: true } });
        break;
      case 'photos':
        if (/^(–≥–æ—Ç–æ–≤–æ|–≥–æ—Ç–æ–≤|done|–∑–∞–≤–µ—Ä—à–∏—Ç—å)$/i.test(text) || /^‚úÖ –ì–æ—Ç–æ–≤–æ$/i.test(text)) {
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ —Ñ–æ—Ç–æ
          if (!session.temp.photos || session.temp.photos.length === 0) {
            await bot.sendMessage(chatId, '‚ùå –ù—É–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ —Ñ–æ—Ç–æ!');
            return true;
          }
          
          // Save listing
          const listings = await readListings();
          
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –¥—É–±–ª–∏–∫–∞—Ç—ã –ø–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º—É
          const newListingData = {
            userId: msg.from.id,
            username: msg.from.username ? `@${msg.from.username}` : (msg.from.first_name || '') ,
            type: 'seek', // –¢–∏–ø –æ–±—ä—è–≤–ª–µ–Ω–∏—è - –ø–æ–∏—Å–∫
            ...session.temp
          };
          
          console.log('üîç [DEBUG] –°–æ–∑–¥–∞–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –æ –ø–æ–∏—Å–∫–µ - session.temp:', session.temp);
          console.log('üîç [DEBUG] –°–æ–∑–¥–∞–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –æ –ø–æ–∏—Å–∫–µ - newListingData.gender:', newListingData.gender);
          
          // –°–æ–∑–¥–∞–µ–º –∫–ª—é—á –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ (—Ç–æ–ª—å–∫–æ –æ—Ç —Ç–æ–≥–æ –∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è)
          const contentKey = `${newListingData.userId}_${newListingData.title}_${newListingData.style}_${newListingData.price}_${newListingData.description}_${(newListingData.photos && newListingData.photos[0]) || ''}`;
          
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Ç–∞–∫–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –æ—Ç —Ç–æ–≥–æ –∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
          const isDuplicate = listings.some(existingListing => {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–ª—å–∫–æ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –æ—Ç —Ç–æ–≥–æ –∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            if (String(existingListing.userId) !== String(newListingData.userId)) return false;
            const existingKey = `${existingListing.userId}_${existingListing.title}_${existingListing.style}_${existingListing.price}_${existingListing.description}_${(existingListing.photos && existingListing.photos[0]) || ''}`;
            return existingKey === contentKey;
          });
          
          if (isDuplicate) {
            await bot.sendMessage(chatId, '‚ùå –¢–∞–∫–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –æ –ø–æ–∏—Å–∫–µ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–æ–∑–¥–∞–π—Ç–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ —Å –¥—Ä—É–≥–∏–º —Å–æ–¥–µ—Ä–∂–∏–º—ã–º.', mainMenuKeyboard());
            users[uid].session = null;
            await writeUsers(users);
            return true;
          }
          
          const listing = {
            id: String(Date.now()),
            ...newListingData,
            createdAt: new Date().toISOString()
          };
          listings.unshift(listing);
          await writeListings(listings);
          users[uid].session = null;
          await bot.sendMessage(chatId, '–û–±—ä—è–≤–ª–µ–Ω–∏–µ –æ –ø–æ–∏—Å–∫–µ —Å–æ–∑–¥–∞–Ω–æ ‚úÖ', mainMenuKeyboard());
        } else {
          await bot.sendMessage(chatId, '–û—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ —Ñ–æ—Ç–æ. –ö–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—Ç–µ ‚Äî –Ω–∞–∂–º–∏—Ç–µ ¬´–ì–æ—Ç–æ–≤–æ¬ª.', { reply_markup: { keyboard: [[{ text: '‚úÖ –ì–æ—Ç–æ–≤–æ' }]], resize_keyboard: true } });
        }
        break;
      default:
        break;
    }
    users[uid].session = session;
    return true;
  }

  if (session.flow === 'parse') {
    if (session.step === 'text') {
      // –ü–∞—Ä—Å–∏–º —Ç–µ–∫—Å—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏—è
      const parsed = parseListingText(text);
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
      const existingPhotos = session.temp.photos || [];
      console.log('üîç [DEBUG] –í handleSessionMessage parse flow - —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ñ–æ—Ç–æ:', existingPhotos);
      
      // –û–±—ä–µ–¥–∏–Ω—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ñ–æ—Ç–æ —Å –Ω–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ (–ù–ï –ø–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞–µ–º —Ñ–æ—Ç–æ!)
      session.temp = { ...session.temp, ...parsed, photos: existingPhotos };
      console.log('üîç [DEBUG] –í handleSessionMessage parse flow - –∏—Ç–æ–≥–æ–≤—ã–µ —Ñ–æ—Ç–æ –≤ session.temp:', session.temp.photos);
      
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —á—Ç–æ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å
      let response = 'üìù **–ò–∑–≤–ª–µ—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:**\n\n';
      
      if (parsed.title) response += `‚úÖ –ù–∞–∑–≤–∞–Ω–∏–µ: ${parsed.title}\n`;
      if (parsed.price) response += `‚úÖ –¶–µ–Ω–∞: ${parsed.price}‚ÇΩ\n`;
      if (parsed.size) response += `‚úÖ –†–∞–∑–º–µ—Ä: ${parsed.size}\n`;
      if (parsed.gender) response += `‚úÖ –ü–æ–ª: ${parsed.gender === 'male' ? '–º—É–∂—Å–∫–æ–π' : '–∂–µ–Ω—Å–∫–∏–π'}\n`;
      if (parsed.style) response += `‚úÖ –°—Ç–∏–ª—å: ${parsed.style}\n`;
      if (parsed.description) response += `‚úÖ –û–ø–∏—Å–∞–Ω–∏–µ: ${parsed.description}\n`;
      
      response += '\n‚ùì **–ù–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ:**\n';
      
      const missing = [];
      if (!parsed.title) missing.push('–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞');
      if (!parsed.price && parsed.price !== 'SOLD') missing.push('–¶–µ–Ω–∞');
      if (!parsed.gender) missing.push('–ü–æ–ª');
      if (!parsed.style) missing.push('–°—Ç–∏–ª—å');
      
      if (missing.length === 0) {
        response += '‚úÖ –í—Å–µ –¥–∞–Ω–Ω—ã–µ –∏–∑–≤–ª–µ—á–µ–Ω—ã! –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ —Ç–æ–≤–∞—Ä–∞.';
        session.step = 'photos';
        await bot.sendMessage(chatId, response, { parse_mode: 'Markdown' });
      } else {
        response += missing.map(item => `‚Ä¢ ${item}`).join('\n');
        response += '\n\n–í—ã–±–µ—Ä–∏—Ç–µ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ:';
        session.step = 'missing_data';
        await bot.sendMessage(chatId, response, { 
          parse_mode: 'Markdown',
          ...missingDataKeyboard(missing)
        });
      }
      users[uid].session = session;
      return true;
    }
    
    if (session.step === 'missing_data') {
      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫–∏
      await bot.sendMessage(chatId, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –≤—ã—à–µ –¥–ª—è –≤—ã–±–æ—Ä–∞ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö.');
      return true;
    }

    if (session.step === 'missing_price') {
      const priceMatch = text.match(/(\d+(?:[\.,]\d+)?)/);
      if (priceMatch) {
        session.temp.price = priceMatch[1].replace(',', '.');
        await bot.sendMessage(chatId, `‚úÖ –¶–µ–Ω–∞: ${session.temp.price}‚ÇΩ`);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—Å–µ –ª–∏ –¥–∞–Ω–Ω—ã–µ —Å–æ–±—Ä–∞–Ω—ã
        const stillMissing = [];
        if (!session.temp.title) stillMissing.push('–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞');
        if (!session.temp.price && session.temp.price !== 'SOLD') stillMissing.push('–¶–µ–Ω–∞');
        if (!session.temp.gender) stillMissing.push('–ü–æ–ª');
        if (!session.temp.style) stillMissing.push('–°—Ç–∏–ª—å');
        
        if (stillMissing.length === 0) {
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏
          const existingPhotos = session.temp.photos || [];
          if (existingPhotos.length > 0) {
            await bot.sendMessage(chatId, '‚úÖ –í—Å–µ –¥–∞–Ω–Ω—ã–µ —Å–æ–±—Ä–∞–Ω—ã! –§–æ—Ç–æ —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã. –ù–∞–∂–º–∏—Ç–µ ¬´–ì–æ—Ç–æ–≤–æ¬ª –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è.', { 
              reply_markup: { keyboard: [[{ text: '‚úÖ –ì–æ—Ç–æ–≤–æ' }]], resize_keyboard: true } 
            });
          } else {
            await bot.sendMessage(chatId, '‚úÖ –í—Å–µ –¥–∞–Ω–Ω—ã–µ —Å–æ–±—Ä–∞–Ω—ã! –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ —Ç–æ–≤–∞—Ä–∞.\n\nüì∏ **–í–∞–∂–Ω–æ:** –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –∫–∞–∫ –æ—Ç–¥–µ–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∞ –Ω–µ –∫–∞–∫ –ø–æ–¥–ø–∏—Å—å –∫ —Ç–µ–∫—Å—Ç—É!', { 
              reply_markup: { keyboard: [[{ text: '‚úÖ –ì–æ—Ç–æ–≤–æ' }]], resize_keyboard: true } 
            });
          }
          session.step = 'photos';
        } else {
          session.step = 'missing_data';
          await bot.sendMessage(chatId, `‚ùì –û—Å—Ç–∞–ª–æ—Å—å —É–∫–∞–∑–∞—Ç—å: ${stillMissing.join(', ')}`, missingDataKeyboard(stillMissing));
        }
      } else {
        await bot.sendMessage(chatId, '‚ùå –í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É —Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ–º!\n\n–ü—Ä–∏–º–µ—Ä—ã: 1500, 1999.99, 2500');
      }
      
      users[uid].session = session;
      return true;
    }

    if (session.step === 'missing_title') {
      session.temp.title = text;
      await bot.sendMessage(chatId, `‚úÖ –ù–∞–∑–≤–∞–Ω–∏–µ: ${text}`);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—Å–µ –ª–∏ –¥–∞–Ω–Ω—ã–µ —Å–æ–±—Ä–∞–Ω—ã
      const stillMissing = [];
      if (!session.temp.title) stillMissing.push('–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞');
      if (!session.temp.price && session.temp.price !== 'SOLD') stillMissing.push('–¶–µ–Ω–∞');
      if (!session.temp.gender) stillMissing.push('–ü–æ–ª');
      if (!session.temp.style) stillMissing.push('–°—Ç–∏–ª—å');
      if (session.temp.isOriginal === null) stillMissing.push('–û—Ä–∏–≥–∏–Ω–∞–ª/—Ä–µ–ø–ª–∏–∫–∞');
      
      if (stillMissing.length === 0) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏
        const existingPhotos = session.temp.photos || [];
        if (existingPhotos.length > 0) {
          await bot.sendMessage(chatId, '‚úÖ –í—Å–µ –¥–∞–Ω–Ω—ã–µ —Å–æ–±—Ä–∞–Ω—ã! –§–æ—Ç–æ —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã. –ù–∞–∂–º–∏—Ç–µ ¬´–ì–æ—Ç–æ–≤–æ¬ª –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è.', {
            reply_markup: { keyboard: [[{ text: '‚úÖ –ì–æ—Ç–æ–≤–æ' }]], resize_keyboard: true } 
          });
        } else {
          await bot.sendMessage(chatId, '‚úÖ –í—Å–µ –¥–∞–Ω–Ω—ã–µ —Å–æ–±—Ä–∞–Ω—ã! –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ —Ç–æ–≤–∞—Ä–∞.\n\nüì∏ **–í–∞–∂–Ω–æ:** –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –∫–∞–∫ –æ—Ç–¥–µ–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∞ –Ω–µ –∫–∞–∫ –ø–æ–¥–ø–∏—Å—å –∫ —Ç–µ–∫—Å—Ç—É!', {
            reply_markup: { keyboard: [[{ text: '‚úÖ –ì–æ—Ç–æ–≤–æ' }]], resize_keyboard: true } 
          });
        }
        session.step = 'photos';
      } else {
        session.step = 'missing_data';
        await bot.sendMessage(chatId, `‚ùì –û—Å—Ç–∞–ª–æ—Å—å —É–∫–∞–∑–∞—Ç—å: ${stillMissing.join(', ')}`, missingDataKeyboard(stillMissing));
      }
      
      users[uid].session = session;
      return true;
    }
    
    if (session.step === 'photos') {
      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ñ–æ—Ç–æ (–∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –ª–æ–≥–∏–∫—É)
      if (/^(–≥–æ—Ç–æ–≤–æ|–≥–æ—Ç–æ–≤|done|–∑–∞–≤–µ—Ä—à–∏—Ç—å)$/i.test(text) || /^‚úÖ –ì–æ—Ç–æ–≤–æ$/i.test(text)) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ —Ñ–æ—Ç–æ
        const photos = session.temp.photos || [];
        console.log('üîç [DEBUG] –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ –ì–æ—Ç–æ–≤–æ –≤ —Ä–µ–∂–∏–º–µ –ø–∞—Ä—Å–∏–Ω–≥–∞ - —Ñ–æ—Ç–æ –≤ —Å–µ—Å—Å–∏–∏:', photos);
        console.log('üîç [DEBUG] –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–æ—Ç–æ –≤ —Å–µ—Å—Å–∏–∏:', photos.length);
        console.log('üîç [DEBUG] session.temp:', session.temp);
        
        if (photos.length === 0) {
          await bot.sendMessage(chatId, '‚ùå –û–±—ä—è–≤–ª–µ–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å —Å–æ–∑–¥–∞–Ω–æ –±–µ–∑ —Ñ–æ—Ç–æ!\n\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ —Ñ–æ—Ç–æ —Ç–æ–≤–∞—Ä–∞, –∑–∞—Ç–µ–º –Ω–∞–∂–º–∏—Ç–µ ¬´–ì–æ—Ç–æ–≤–æ¬ª.', { 
            reply_markup: { keyboard: [[{ text: '‚úÖ –ì–æ—Ç–æ–≤–æ' }]], resize_keyboard: true } 
          });
          return true;
        }
        
        // –°–æ–∑–¥–∞–µ–º –æ–±—ä—è–≤–ª–µ–Ω–∏–µ
        const listings = await readListings();
        
        const newListingData = {
          userId: msg.from.id,
          username: msg.from.username ? `@${msg.from.username}` : (msg.from.first_name || ''),
          type: 'sell',
          ...session.temp
        };
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –¥—É–±–ª–∏–∫–∞—Ç—ã
        const contentKey = `${newListingData.userId}_${newListingData.title}_${newListingData.style}_${newListingData.price}_${newListingData.description}_${(newListingData.photos && newListingData.photos[0]) || ''}`;
        
        const isDuplicate = listings.some(existingListing => {
          if (String(existingListing.userId) !== String(newListingData.userId)) return false;
          const existingKey = `${existingListing.userId}_${existingListing.title}_${existingListing.style}_${existingListing.price}_${existingListing.description}_${(existingListing.photos && existingListing.photos[0]) || ''}`;
          return existingKey === contentKey;
        });
        
        if (isDuplicate) {
          await bot.sendMessage(chatId, '‚ùå –¢–∞–∫–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–æ–∑–¥–∞–π—Ç–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ —Å –¥—Ä—É–≥–∏–º —Å–æ–¥–µ—Ä–∂–∏–º—ã–º.', mainMenuKeyboard());
          users[uid].session = null;
          await writeUsers(users);
          return true;
        }
        
        const listing = {
          id: String(Date.now()),
          ...newListingData,
          createdAt: new Date().toISOString()
        };
        listings.unshift(listing);
        await writeListings(listings);
        users[uid].session = null;
        await bot.sendMessage(chatId, '‚úÖ –û–±—ä—è–≤–ª–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ –∏–∑ –≥–æ—Ç–æ–≤–æ–≥–æ —Ç–µ–∫—Å—Ç–∞!', mainMenuKeyboard());
      } else {
        await bot.sendMessage(chatId, '–û—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ —Ñ–æ—Ç–æ. –ö–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—Ç–µ ‚Äî –Ω–∞–∂–º–∏—Ç–µ ¬´–ì–æ—Ç–æ–≤–æ¬ª.', { reply_markup: { keyboard: [[{ text: '‚úÖ –ì–æ—Ç–æ–≤–æ' }]], resize_keyboard: true } });
      }
      
      users[uid].session = session;
      return true;
    }
    
    users[uid].session = session;
    return true;
  }

  if (session.flow === 'feed_params') {
    // Parse simple filters like: —Å—Ç–∏–ª—å –∞—Ä—Ö–∏–≤
    const filters = Object.assign({}, session.filters || {});
    const lower = text.toLowerCase();
    // –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –≤–æ–∑–º–æ–∂–Ω—ã–π –≤–≤–æ–¥ —Å—Ç–∏–ª—è –≤–∏–¥–∞: —Å—Ç–∏–ª—å –∞—Ä—Ö–∏–≤
    const styleMatch = lower.match(/—Å—Ç–∏–ª—å\s*([\w\-]+)/i);
    if (styleMatch) filters.style = styleMatch[1];
    session.filters = filters;
    session.step = 'run';
    await bot.sendMessage(chatId, '–§–∏–ª—å—Ç—Ä—ã –æ–±–Ω–æ–≤–ª–µ–Ω—ã. –ü–æ–∫–∞–∑—ã–≤–∞—é –ª–µ–Ω—Ç—É.');
    users[uid].session = session;
    await writeUsers(users);
    await startFeedForUser(bot, msg.from.id, chatId, filters, true);
    return true;
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–æ —Ç–µ–∫—Å—Ç—É
  if (session.flow === 'search') {
    if (session.step === 'text') {
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
      users[uid].searchFilters = users[uid].searchFilters || {};
      users[uid].searchFilters.q = text;
      users[uid].session = null;
      await writeUsers(users);
      
      // –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ–∏—Å–∫
      await startFeedForUser(bot, msg.from.id, chatId, users[uid].searchFilters);
      return true;
    }
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ —Ñ–∏–ª—å—Ç—Ä–∞ –ø–æ —Ü–µ–Ω–µ
  if (session.flow === 'price_filter') {
    if (session.step === 'min_price') {
      const minPrice = parseFloat(text);
      if (isNaN(minPrice) || minPrice < 0) {
        await bot.sendMessage(chatId, '‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é —Ü–µ–Ω—É (—á–∏—Å–ª–æ –±–æ–ª—å—à–µ 0)');
        return true;
      }
      
      users[uid].searchFilters = users[uid].searchFilters || {};
      users[uid].searchFilters.minPrice = minPrice;
      users[uid].session = { flow: 'price_filter', step: 'max_price', temp: {} };
      await writeUsers(users);
      
      await bot.sendMessage(chatId, 'üí∞ **–£–∫–∞–∂–∏—Ç–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é —Ü–µ–Ω—É**\n\n–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 5000) –∏–ª–∏ "‚àû" –¥–ª—è –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π:', { parse_mode: 'Markdown' });
      return true;
    }
    
    if (session.step === 'max_price') {
      let maxPrice;
      if (text.toLowerCase() === '‚àû' || text.toLowerCase() === '–±–µ—Å–∫–æ–Ω–µ—á–Ω–æ—Å—Ç—å') {
        maxPrice = 999999;
      } else {
        maxPrice = parseFloat(text);
        if (isNaN(maxPrice) || maxPrice < 0) {
          await bot.sendMessage(chatId, '‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é —Ü–µ–Ω—É (—á–∏—Å–ª–æ –±–æ–ª—å—à–µ 0) –∏–ª–∏ "‚àû"');
          return true;
        }
      }
      
      users[uid].searchFilters = users[uid].searchFilters || {};
      users[uid].searchFilters.maxPrice = maxPrice;
      users[uid].session = null;
      await writeUsers(users);
      
      await showFiltersMenu(bot, chatId, msg.from.id);
      return true;
    }
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ —Ñ–∏–ª—å—Ç—Ä–∞ –ø–æ –±—Ä–µ–Ω–¥—É
  if (session.flow === 'brand_filter') {
    if (session.step === 'brand_name') {
      users[uid].searchFilters = users[uid].searchFilters || {};
      users[uid].searchFilters.brand = text;
      users[uid].session = null;
      await writeUsers(users);
      
      await showFiltersMenu(bot, chatId, msg.from.id);
      return true;
    }
  }

  return false;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ –≥–æ—Ç–æ–≤–æ–≥–æ –æ–±—ä—è–≤–ª–µ–Ω–∏—è
function parseListingText(text) {
  console.log('üîç [DEBUG] –ü–∞—Ä—Å–∏–Ω–≥ —Ç–µ–∫—Å—Ç–∞:', text);
  
  const result = {
    title: '',
    price: '',
    description: '',
    gender: '',
    style: '',
    size: ''
  };

  // –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã –∏ –ø–µ—Ä–µ–Ω–æ—Å—ã —Å—Ç—Ä–æ–∫
  const cleanText = text.replace(/\s+/g, ' ').trim();
  console.log('üîç [DEBUG] –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç:', text);
  console.log('üîç [DEBUG] –û—á–∏—â–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç:', cleanText);
  console.log('üîç [DEBUG] –°–æ–¥–µ—Ä–∂–∏—Ç SOLD?', cleanText.toLowerCase().includes('sold'));
  console.log('üîç [DEBUG] –ü–æ–∏—Å–∫ SOLD –≤ —Ç–µ–∫—Å—Ç–µ:', cleanText.match(/sold/gi));
  
  let priceMatch = null; // –û–±—ä—è–≤–ª—è–µ–º priceMatch –∑–¥–µ—Å—å
  // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ "SOLD" - —ç—Ç–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–µ–µ —á–µ–º —á–∏—Å–ª–∞
  if (cleanText.toLowerCase().includes('sold')) {
    result.price = 'SOLD';
    console.log('üîç [DEBUG] –ù–∞–π–¥–µ–Ω–∞ —Ü–µ–Ω–∞ SOLD');
  } else {
    // –ò—â–µ–º —Ü–µ–Ω—É (—á–∏—Å–ª–∞ —Å ‚ÇΩ, —Ä—É–±, —Ä –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ —á–∏—Å–ª–∞)
    // –°–Ω–∞—á–∞–ª–∞ –∏—â–µ–º —Ü–µ–Ω—ã —Å –≤–∞–ª—é—Ç–æ–π
    priceMatch = cleanText.match(/(\d+(?:[\.,]\d+)?)\s*(?:‚ÇΩ|—Ä—É–±|—Ä|—Ä—É–±–ª–µ–π?)/i);
    if (priceMatch) {
      result.price = priceMatch[1].replace(',', '.');
      console.log('üîç [DEBUG] –ù–∞–π–¥–µ–Ω–∞ —Ü–µ–Ω–∞ —Å –≤–∞–ª—é—Ç–æ–π:', result.price);
    } else {
      // –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ —Ü–µ–Ω–∞ —Å –≤–∞–ª—é—Ç–æ–π, –∏—â–µ–º –ø—Ä–æ—Å—Ç–æ —á–∏—Å–ª–∞ (–Ω–æ –Ω–µ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ "9/10")
      priceMatch = cleanText.match(/(?<!\d\/)\b(\d{3,}(?:[\.,]\d+)?)\b(?!\s*\/\d)/);
      if (priceMatch) {
        result.price = priceMatch[1].replace(',', '.');
        console.log('üîç [DEBUG] –ù–∞–π–¥–µ–Ω–∞ —á–∏—Å–ª–æ–≤–∞—è —Ü–µ–Ω–∞ –±–µ–∑ –≤–∞–ª—é—Ç—ã:', result.price);
      }
    }
  }
  
  // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ - –µ—Å–ª–∏ —Ü–µ–Ω–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç "SOLDP", –∏—Å–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ "SOLD"
  if (result.price === 'SOLDP') {
    result.price = 'SOLD';
    console.log('üîç [DEBUG] –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∞ —Ü–µ–Ω–∞ —Å SOLDP –Ω–∞ SOLD');
  }
  
  // –ï—â–µ –æ–¥–Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞ - –µ—Å–ª–∏ –≤ —Ç–µ–∫—Å—Ç–µ –µ—Å—Ç—å "SOLD", –Ω–æ —Ü–µ–Ω–∞ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞
  if (!result.price && cleanText.toLowerCase().includes('sold')) {
    result.price = 'SOLD';
    console.log('üîç [DEBUG] –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ —Ü–µ–Ω–∞ SOLD –∏–∑ —Ç–µ–∫—Å—Ç–∞');
  }
  
  // –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ - –µ—Å–ª–∏ —Ü–µ–Ω–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç "SOLDP", –∏—Å–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ "SOLD"
  if (result.price === 'SOLDP') {
    result.price = 'SOLD';
    console.log('üîç [DEBUG] –§–∏–Ω–∞–ª—å–Ω–∞—è –∏—Å–ø—Ä–∞–≤–∫–∞ —Ü–µ–Ω—ã —Å SOLDP –Ω–∞ SOLD');
  }
  
  // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ - –µ—Å–ª–∏ —Ü–µ–Ω–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç "SOLDP", –∏—Å–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ "SOLD"
  if (result.price === 'SOLDP') {
    result.price = 'SOLD';
    console.log('üîç [DEBUG] –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∞ —Ü–µ–Ω–∞ —Å SOLDP –Ω–∞ SOLD');
  }
  
  // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ - –µ—Å–ª–∏ —Ü–µ–Ω–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç "SOLDP", –∏—Å–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ "SOLD"
  if (result.price === 'SOLDP') {
    result.price = 'SOLD';
    console.log('üîç [DEBUG] –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∞ —Ü–µ–Ω–∞ —Å SOLDP –Ω–∞ SOLD');
  }
  
  // –ï—â–µ –æ–¥–Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞ - –µ—Å–ª–∏ –≤ —Ç–µ–∫—Å—Ç–µ –µ—Å—Ç—å "SOLD", –Ω–æ —Ü–µ–Ω–∞ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞
  if (!result.price && cleanText.toLowerCase().includes('sold')) {
    result.price = 'SOLD';
    console.log('üîç [DEBUG] –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ —Ü–µ–Ω–∞ SOLD –∏–∑ —Ç–µ–∫—Å—Ç–∞');
  }
  
  // –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ - –µ—Å–ª–∏ —Ü–µ–Ω–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç "SOLDP", –∏—Å–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ "SOLD"
  if (result.price === 'SOLDP') {
    result.price = 'SOLD';
    console.log('üîç [DEBUG] –§–∏–Ω–∞–ª—å–Ω–∞—è –∏—Å–ø—Ä–∞–≤–∫–∞ —Ü–µ–Ω—ã —Å SOLDP –Ω–∞ SOLD');
  }
  
  // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ - –µ—Å–ª–∏ —Ü–µ–Ω–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç "SOLDP", –∏—Å–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ "SOLD"
  if (result.price === 'SOLDP') {
    result.price = 'SOLD';
    console.log('üîç [DEBUG] –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∞ —Ü–µ–Ω–∞ —Å SOLDP –Ω–∞ SOLD');
  }
  
  // –ï—â–µ –æ–¥–Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞ - –µ—Å–ª–∏ –≤ —Ç–µ–∫—Å—Ç–µ –µ—Å—Ç—å "SOLD", –Ω–æ —Ü–µ–Ω–∞ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞
  if (!result.price && cleanText.toLowerCase().includes('sold')) {
    result.price = 'SOLD';
    console.log('üîç [DEBUG] –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ —Ü–µ–Ω–∞ SOLD –∏–∑ —Ç–µ–∫—Å—Ç–∞');
  }
  
  // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ - –µ—Å–ª–∏ —Ü–µ–Ω–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç "SOLDP", –∏—Å–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ "SOLD"
  if (result.price === 'SOLDP') {
    result.price = 'SOLD';
    console.log('üîç [DEBUG] –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∞ —Ü–µ–Ω–∞ —Å SOLDP –Ω–∞ SOLD');
  }
  
  console.log('üîç [DEBUG] –ò—Ç–æ–≥–æ–≤–∞—è —Ü–µ–Ω–∞:', result.price);

  // –ò—â–µ–º —Ä–∞–∑–º–µ—Ä (—Ä–∞–∑–º–µ—Ä: 42, size: L, 42 —Ä–∞–∑–º–µ—Ä –∏ —Ç.–¥.)
  const sizeMatch = cleanText.match(/(?:—Ä–∞–∑–º–µ—Ä|size)[\s:]*([A-Z0-9]+)/i);
  if (sizeMatch) {
    result.size = sizeMatch[1];
  }
  
  // –ò—â–µ–º —Ä–∞–∑–º–µ—Ä –≤ —Ñ–æ—Ä–º–∞—Ç–µ "–†–∞–∑–º–µ—Ä:–ú" –∏–ª–∏ "–†–∞–∑–º–µ—Ä –ú"
  const sizeMatch2 = cleanText.match(/—Ä–∞–∑–º–µ—Ä[\s:]*([A-Z0-9]+)/i);
  if (sizeMatch2 && !result.size) {
    result.size = sizeMatch2[1];
  }

  // –ò—â–µ–º –ø–æ–ª (–º—É–∂—Å–∫–æ–π/–∂–µ–Ω—Å–∫–∏–π, –º—É–∂/–∂–µ–Ω, male/female)
  const genderMatch = cleanText.match(/(–º—É–∂—Å–∫–æ–π|–∂–µ–Ω—Å–∫–∏–π|–º—É–∂|–∂–µ–Ω|male|female)/i);
  if (genderMatch) {
    const gender = genderMatch[1].toLowerCase();
    if (['–º—É–∂—Å–∫–æ–π', '–º—É–∂', 'male'].includes(gender)) {
      result.gender = 'male';
    } else if (['–∂–µ–Ω—Å–∫–∏–π', '–∂–µ–Ω', 'female'].includes(gender)) {
      result.gender = 'female';
    }
  }


  // –ò—â–µ–º —Å—Ç–∏–ª—å (–∞—Ä—Ö–∏–≤, –∫–µ–∂—É–∞–ª, —Å—Ç—Ä–∏—Ç–≤–∏—Ä –∏ —Ç.–¥.)
  const styles = ['–∞—Ä—Ö–∏–≤', '–∫–µ–∂—É–∞–ª', 'casual', '—Å—Ç—Ä–∏—Ç–≤–∏—Ä', 'streetwear', 'old money', '–¥—Ä—É–≥–æ–µ'];
  for (const style of styles) {
    if (cleanText.toLowerCase().includes(style)) {
      result.style = style;
      break;
    }
  }

  // –ü—ã—Ç–∞–µ–º—Å—è –∏–∑–≤–ª–µ—á—å –Ω–∞–∑–≤–∞–Ω–∏–µ (–ø–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞ –∏–ª–∏ —á–∞—Å—Ç—å –¥–æ —Ü–µ–Ω—ã)
  const lines = text.split('\n').map(line => line.trim()).filter(line => line);
  if (lines.length > 0) {
    let title = lines[0];
    
    // –ò—â–µ–º —Å—Ç—Ä–æ–∫—É, –∫–æ—Ç–æ—Ä–∞—è –≤—ã–≥–ª—è–¥–∏—Ç –∫–∞–∫ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ (–Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Å–ª—É–∂–µ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é)
    const titleCandidates = lines.filter(line => {
      const lowerLine = line.toLowerCase();
      // –ò—Å–∫–ª—é—á–∞–µ–º —Å—Ç—Ä–æ–∫–∏ —Å —Å–ª—É–∂–µ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
      return !lowerLine.includes('—Ä–∞–∑–º–µ—Ä') && 
             !lowerLine.includes('—Å–æ—Å—Ç–æ—è–Ω–∏–µ') && 
             !lowerLine.includes('—Å–≤—è–∑—å') && 
             !lowerLine.includes('sold') &&
             !line.match(/\d+(?:[\.,]\d+)?\s*(?:‚ÇΩ|—Ä—É–±|—Ä)/) &&
             line.length > 3; // –ù–∞–∑–≤–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–ª–∏–Ω–Ω—ã–º
    });
    
    if (titleCandidates.length > 0) {
      title = titleCandidates[0];
    } else if (priceMatch && title.includes(priceMatch[1])) {
      title = lines.find(line => !line.match(/\d+(?:[\.,]\d+)?\s*(?:‚ÇΩ|—Ä—É–±|—Ä)/)) || lines[0];
    }
    
    result.title = title;
  }

  // –û–ø–∏—Å–∞–Ω–∏–µ - –≤—Å–µ –æ—Å—Ç–∞–ª—å–Ω–æ–µ, —á—Ç–æ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —Ü–µ–Ω–æ–π, —Ä–∞–∑–º–µ—Ä–æ–º –∏ —Ç.–¥.
  let description = cleanText;
  
  // –£–±–∏—Ä–∞–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã –∏–∑ –æ–ø–∏—Å–∞–Ω–∏—è
  if (priceMatch) description = description.replace(priceMatch[0], '').trim();
  if (sizeMatch) description = description.replace(sizeMatch[0], '').trim();
  if (sizeMatch2) description = description.replace(sizeMatch2[0], '').trim();
  if (genderMatch) description = description.replace(genderMatch[0], '').trim();
  if (result.style) description = description.replace(result.style, '').trim();
  if (result.title) description = description.replace(result.title, '').trim();
  
  // –£–±–∏—Ä–∞–µ–º —Å–ª—É–∂–µ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ –æ–ø–∏—Å–∞–Ω–∏—è
  description = description.replace(/—Å–æ—Å—Ç–æ—è–Ω–∏–µ\s*:\s*\d+\/\d+/gi, '').trim();
  description = description.replace(/—Å–≤—è–∑—å\s*:\s*@?\w+/gi, '').trim();
  description = description.replace(/sold/gi, '').trim();
  
  // –£–±–∏—Ä–∞–µ–º —Ä–∞–∑–º–µ—Ä—ã –≤ –ª—é–±–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
  description = description.replace(/—Ä–∞–∑–º–µ—Ä[\s:]*[A-Z0-9]+/gi, '').trim();
  description = description.replace(/—Ä–∞–∑–º–µ—Ä\s*:\s*[A-Z0-9]+/gi, '').trim();
  description = description.replace(/—Ä–∞–∑–º–µ—Ä\s*:\s*[A-Z0-9]+/gi, '').trim();
  description = description.replace(/—Ä–∞–∑–º–µ—Ä\s*:\s*[A-Z0-9]+/gi, '').trim();
  description = description.replace(/—Ä–∞–∑–º–µ—Ä\s*:\s*[A-Z0-9]+/gi, '').trim();
  
  console.log('üîç [DEBUG] –û–ø–∏—Å–∞–Ω–∏–µ –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞:', description);
  
  result.description = description.replace(/\s+/g, ' ').trim();

  console.log('üîç [DEBUG] –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–∞—Ä—Å–∏–Ω–≥–∞:', result);
  return result;
}

async function beginParseFlow(bot, from, chatId) {
  const users = await readUsers();
  const uid = String(from.id);
  users[uid] = users[uid] || { profile: {}, platinum: false };
  
  // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –æ–±—Ä–∞—â–µ–Ω–∏–∏
  if (!users[uid].profile.username) {
    users[uid].profile.username = from.username || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
    users[uid].profile.firstName = from.first_name || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
  }
  
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –∏–∑ –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    const forwardedText = users[uid].forwardedText;
    const forwardedPhotos = users[uid].forwardedPhotos || [];
    
    console.log('üîç [DEBUG] beginParseFlow - forwardedText:', forwardedText);
    console.log('üîç [DEBUG] beginParseFlow - forwardedPhotos:', forwardedPhotos);
    console.log('üîç [DEBUG] beginParseFlow - –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ forwardedPhotos:', forwardedPhotos.length);
  
  users[uid].session = { flow: 'parse', step: 'text', temp: {} };
  await writeUsers(users);
  
  if (forwardedText) {
    // –ï—Å–ª–∏ –µ—Å—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç, —Å—Ä–∞–∑—É –ø–∞—Ä—Å–∏–º –µ–≥–æ
    console.log('üîç [DEBUG] –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç:', forwardedText);
    console.log('üîç [DEBUG] –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ —Ñ–æ—Ç–æ:', forwardedPhotos);
    console.log('üîç [DEBUG] –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö —Ñ–æ—Ç–æ:', forwardedPhotos.length);
    
    const parsed = parseListingText(forwardedText);
    users[uid].session.temp = { ...parsed, photos: forwardedPhotos };
    console.log('üîç [DEBUG] –í beginParseFlow - —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã —Ñ–æ—Ç–æ –≤ session.temp:', users[uid].session.temp.photos);
    console.log('üîç [DEBUG] –í beginParseFlow - forwardedPhotos:', forwardedPhotos);
    console.log('üîç [DEBUG] –í beginParseFlow - –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ forwardedPhotos:', forwardedPhotos.length);
    console.log('üîç [DEBUG] –í beginParseFlow - parsed –¥–∞–Ω–Ω—ã–µ:', parsed);
    console.log('üîç [DEBUG] –í beginParseFlow - session.temp –ø–æ—Å–ª–µ —É—Å—Ç–∞–Ω–æ–≤–∫–∏:', users[uid].session.temp);
    
    console.log('üîç [DEBUG] –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã —Ñ–æ—Ç–æ –≤ session.temp:', users[uid].session.temp.photos);
    console.log('üîç [DEBUG] –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ç–æ –≤ —Å–µ—Å—Å–∏–∏:', users[uid].session.temp.photos);
    console.log('üîç [DEBUG] –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–æ—Ç–æ –≤ —Å–µ—Å—Å–∏–∏:', users[uid].session.temp.photos?.length || 0);
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–µ—Å—Å–∏—é –ø–µ—Ä–µ–¥ –æ—á–∏—Å—Ç–∫–æ–π forwardedPhotos
    await writeUsers(users);
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —á—Ç–æ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å
    let response = 'üìù **–ò–∑–≤–ª–µ—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:**\n\n';
    
    if (parsed.title) response += `‚úÖ –ù–∞–∑–≤–∞–Ω–∏–µ: ${parsed.title}\n`;
    if (parsed.price) response += `‚úÖ –¶–µ–Ω–∞: ${parsed.price}${parsed.price === 'SOLD' ? '' : '‚ÇΩ'}\n`;
    if (parsed.size) response += `‚úÖ –†–∞–∑–º–µ—Ä: ${parsed.size}\n`;
    if (parsed.gender) response += `‚úÖ –ü–æ–ª: ${parsed.gender === 'male' ? '–º—É–∂—Å–∫–æ–π' : '–∂–µ–Ω—Å–∫–∏–π'}\n`;
    if (parsed.style) response += `‚úÖ –°—Ç–∏–ª—å: ${parsed.style}\n`;
    if (parsed.isOriginal !== null) response += `‚úÖ –¢–∏–ø: ${parsed.isOriginal ? '–û—Ä–∏–≥–∏–Ω–∞–ª' : '–†–µ–ø–ª–∏–∫–∞'}\n`;
    if (parsed.description) response += `‚úÖ –û–ø–∏—Å–∞–Ω–∏–µ: ${parsed.description}\n`;
    
    response += '\n‚ùì **–ù–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ:**\n';
    
    const missing = [];
    if (!parsed.title) missing.push('–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞');
    if (!parsed.price && parsed.price !== 'SOLD') missing.push('–¶–µ–Ω–∞');
    if (!parsed.gender) missing.push('–ü–æ–ª');
    if (!parsed.style) missing.push('–°—Ç–∏–ª—å');
    
    if (missing.length === 0) {
      if (forwardedPhotos.length > 0) {
        response += '‚úÖ –í—Å–µ –¥–∞–Ω–Ω—ã–µ –∏–∑–≤–ª–µ—á–µ–Ω—ã! –§–æ—Ç–æ —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã. –ù–∞–∂–º–∏—Ç–µ ¬´–ì–æ—Ç–æ–≤–æ¬ª –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è.';
        users[uid].session.step = 'photos';
      } else {
        response += '‚úÖ –í—Å–µ –¥–∞–Ω–Ω—ã–µ –∏–∑–≤–ª–µ—á–µ–Ω—ã! –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ —Ç–æ–≤–∞—Ä–∞.';
        users[uid].session.step = 'photos';
      }
    } else {
      if (forwardedPhotos.length > 0) {
        response += `\nüì∏ **–§–æ—Ç–æ:** ${forwardedPhotos.length} —à—Ç.`;
      }
      response += missing.map(item => `‚Ä¢ ${item}`).join('\n');
      response += '\n\n–í—ã–±–µ—Ä–∏—Ç–µ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ:';
      users[uid].session.step = 'missing_data';
    }
    
    console.log('üîç [DEBUG] –§–∏–Ω–∞–ª—å–Ω—ã–π —à–∞–≥ —Å–µ—Å—Å–∏–∏:', users[uid].session.step);
    console.log('üîç [DEBUG] –§–æ—Ç–æ –≤ —Å–µ—Å—Å–∏–∏:', users[uid].session.temp.photos);
    console.log('üîç [DEBUG] –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–æ—Ç–æ –≤ —Å–µ—Å—Å–∏–∏:', users[uid].session.temp.photos?.length || 0);
    console.log('üîç [DEBUG] –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–æ—Ç–æ –≤ —Å–µ—Å—Å–∏–∏ –ø–æ—Å–ª–µ –ø–∞—Ä—Å–∏–Ω–≥–∞:', users[uid].session.temp.photos);
    
    await bot.sendMessage(chatId, response, { parse_mode: 'Markdown' });
    
    // –û—á–∏—â–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –∏ —Ñ–æ—Ç–æ
    delete users[uid].forwardedText;
    delete users[uid].forwardedPhotos;
    await writeUsers(users);
  } else {
    await bot.sendMessage(chatId, 
      'üìù **–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–æ—Ç–æ–≤–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ**\n\n' +
      '–ü—Ä–æ—Å—Ç–æ —Å–∫–æ–ø–∏—Ä—É–π—Ç–µ –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏—è, –∞ —è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏–∑–≤–ª–µ–∫—É –∏–∑ –Ω–µ–≥–æ:\n' +
      '‚Ä¢ –ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞\n' +
      '‚Ä¢ –¶–µ–Ω—É\n' +
      '‚Ä¢ –†–∞–∑–º–µ—Ä (–µ—Å–ª–∏ –µ—Å—Ç—å)\n' +
      '‚Ä¢ –ü–æ–ª (–º—É–∂—Å–∫–æ–π/–∂–µ–Ω—Å–∫–∏–π)\n' +
      '‚Ä¢ –°—Ç–∏–ª—å\n' +
      '‚Ä¢ –û–ø–∏—Å–∞–Ω–∏–µ\n\n' +
      '–ï—Å–ª–∏ —á–µ–≥–æ-—Ç–æ –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç - —è —Å–ø—Ä–æ—à—É –æ—Ç–¥–µ–ª—å–Ω–æ!',
      { parse_mode: 'Markdown' }
    );
  }
}

async function beginSellFlow(bot, from, chatId) {
  const users = await readUsers();
  const uid = String(from.id);
  users[uid] = users[uid] || { profile: {}, platinum: false };
  
  // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –æ–±—Ä–∞—â–µ–Ω–∏–∏
  if (!users[uid].profile.username) {
    users[uid].profile.username = from.username || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
    users[uid].profile.firstName = from.first_name || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
  }
  
  users[uid].session = { flow: 'sell', step: 'gender', temp: {} };
  await writeUsers(users);
  await bot.sendMessage(chatId, '–°–æ–∑–¥–∞—ë–º –æ–±—ä—è–≤–ª–µ–Ω–∏–µ. –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª:', genderKeyboard());
}


async function startFeedForUser(bot, userId, chatId, filters, keepPosition = false) {
  const users = await readUsers();
  const uid = String(userId);
  const listings = await readListings();
  const filtered = listings.filter((l) => {
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –æ–¥–æ–±—Ä–µ–Ω–Ω—ã–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è (–∫—Ä–æ–º–µ —Å–≤–æ–∏—Ö)
    // –î–ª—è —Å—Ç–∞—Ä—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π –±–µ–∑ –ø–æ–ª—è approved —Å—á–∏—Ç–∞–µ–º –∏—Ö –æ–¥–æ–±—Ä–µ–Ω–Ω—ã–º–∏
    if (!filters || !filters.ownerOnly) {
      if (l.approved === false) return false; // –¢–æ–ª—å–∫–æ —è–≤–Ω–æ –æ—Ç–∫–ª–æ–Ω–µ–Ω–Ω—ã–µ —Å–∫—Ä—ã–≤–∞–µ–º
    }
    
    if (filters && filters.ownerOnly) {
      if (String(l.userId) !== uid) return false;
    }
    // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏—Å–∫–ª—é—á–∞–µ–º —Å–≤–æ–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –∏–∑ –ª—é–±–æ–π –≤—ã–¥–∞—á–∏
    if (!filters || !filters.ownerOnly) {
      if (String(l.userId) === uid) return false;
    }
    // –ï—Å–ª–∏ –µ—Å—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã –ø–æ —Å—Ç–∏–ª—é –ò–õ–ò –æ–ø–∏—Å–∞–Ω–∏—é –ò–õ–ò –ø–æ–ª—É –ò–õ–ò –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ò–õ–ò –±—Ä–µ–Ω–¥—É
    if (filters && (filters.style || filters.q || filters.gender || filters.category || filters.brand)) {
      let matchesStyle = false;
      let matchesDescription = false;
      let matchesGender = false;
      let matchesCategory = false;
      let matchesBrand = false;
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∏–ª—å (—Å —É—á–µ—Ç–æ–º –æ–ø–µ—á–∞—Ç–æ–∫)
      if (filters.style) {
        const s = String(filters.style).toLowerCase().trim();
        const listingStyle = (l.style || '').toLowerCase().trim();
        
        // –ï—Å–ª–∏ –≤—ã–±—Ä–∞–ª–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —Å—Ç–∏–ª—å - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±—ä—è–≤–ª–µ–Ω–∏—è —Å —ç—Ç–∏–º —Å—Ç–∏–ª–µ–º –ò —Å–æ —Å—Ç–∏–ª–µ–º "–¥—Ä—É–≥–æ–µ"
        if (s !== '–¥—Ä—É–≥–æ–µ') {
          matchesStyle = listingStyle === s || 
                        listingStyle.includes(s) || 
                        s.includes(listingStyle) ||
                        isSimilar(s, listingStyle) ||
                        listingStyle === '–¥—Ä—É–≥–æ–µ';
        } else {
          // –ï—Å–ª–∏ –≤—ã–±—Ä–∞–ª–∏ "–¥—Ä—É–≥–æ–µ" - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –í–°–ï –æ–±—ä—è–≤–ª–µ–Ω–∏—è (–Ω–µ —Ñ–∏–ª—å—Ç—Ä—É–µ–º –ø–æ —Å—Ç–∏–ª—é)
          matchesStyle = true;
        }
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ/–Ω–∞–∑–≤–∞–Ω–∏–µ (—Å —É—á–µ—Ç–æ–º –æ–ø–µ—á–∞—Ç–æ–∫)
      if (filters.q) {
        const q = String(filters.q).toLowerCase().trim();
        const title = String(l.title || '').toLowerCase();
        const desc = String(l.description || '').toLowerCase();
        matchesDescription = title.includes(q) || 
                           desc.includes(q) ||
                           isSimilar(q, title) ||
                           isSimilar(q, desc);
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª
      if (filters.gender) {
        const filterGender = String(filters.gender).toLowerCase().trim();
        const listingGender = String(l.gender || '').toLowerCase().trim();
        matchesGender = filterGender === listingGender;
        console.log('üîç [DEBUG] –§–∏–ª—å—Ç—Ä –ø–æ –ø–æ–ª—É - –∏—â–µ–º:', filterGender, '—É –æ–±—ä—è–≤–ª–µ–Ω–∏—è:', listingGender, '—Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ:', matchesGender);
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é (–ø–æ–∏—Å–∫ –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏ –∏ –æ–ø–∏—Å–∞–Ω–∏–∏)
      if (filters.category) {
        const filterCategory = String(filters.category).toLowerCase().trim();
        const title = String(l.title || '').toLowerCase();
        const desc = String(l.description || '').toLowerCase();
        const fullText = `${title} ${desc}`;
        
        matchesCategory = fullText.includes(filterCategory) ||
                         isSimilar(filterCategory, title) ||
                         isSimilar(filterCategory, desc);
        
        console.log('üîç [DEBUG] –§–∏–ª—å—Ç—Ä –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ - –∏—â–µ–º:', filterCategory, '–≤ —Ç–µ–∫—Å—Ç–µ:', fullText, '—Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ:', matchesCategory);
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±—Ä–µ–Ω–¥ (–ø–æ–∏—Å–∫ –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏ –∏ –æ–ø–∏—Å–∞–Ω–∏–∏)
      if (filters.brand) {
        const filterBrand = String(filters.brand).toLowerCase().trim();
        const title = String(l.title || '').toLowerCase();
        const desc = String(l.description || '').toLowerCase();
        const fullText = `${title} ${desc}`;
        
        matchesBrand = fullText.includes(filterBrand) ||
                      isSimilar(filterBrand, title) ||
                      isSimilar(filterBrand, desc);
        
        console.log('üîç [DEBUG] –§–∏–ª—å—Ç—Ä –ø–æ –±—Ä–µ–Ω–¥—É - –∏—â–µ–º:', filterBrand, '–≤ —Ç–µ–∫—Å—Ç–µ:', fullText, '—Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ:', matchesBrand);
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã
      if (filters.style && !matchesStyle) return false;
      if (filters.q && !matchesDescription) return false;
      if (filters.gender && !matchesGender) return false;
      if (filters.category && !matchesCategory) return false;
      if (filters.brand && !matchesBrand) return false;
    }
    // –§–∏–ª—å—Ç—Ä –ø–æ —Ü–µ–Ω–µ (–º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è)
    if (filters && (typeof filters.minPrice !== 'undefined' || typeof filters.maxPrice !== 'undefined')) {
      const pStr = String(l.price || '').replace(/\s+/g, '').replace(',', '.');
      const p = parseFloat(pStr);
      
      if (typeof filters.minPrice !== 'undefined') {
        const minP = parseFloat(String(filters.minPrice));
        if (Number.isFinite(minP) && (!Number.isFinite(p) || p < minP)) return false;
      }
      
      if (typeof filters.maxPrice !== 'undefined') {
        const maxP = parseFloat(String(filters.maxPrice));
        if (Number.isFinite(maxP) && (!Number.isFinite(p) || p > maxP)) return false;
      }
    }
    return true;
  });

  users[uid] = users[uid] || { profile: {} };
  const current = users[uid].feed || {};
  
  // –°–æ—Ä—Ç–∏—Ä—É–µ–º –æ–±—ä—è–≤–ª–µ–Ω–∏—è —Å —É—á–µ—Ç–æ–º 30% –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞ –¥–ª—è platinum
  const sortedListings = filtered.sort((a, b) => {
    const aAuthor = users[String(a.userId)];
    const bAuthor = users[String(b.userId)];
    const aPlatinum = aAuthor && aAuthor.platinum;
    const bPlatinum = bAuthor && bAuthor.platinum;
    
    // –ï—Å–ª–∏ –æ–±–∞ platinum –∏–ª–∏ –æ–±–∞ –æ–±—ã—á–Ω—ã–µ - —Å–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ
    if (aPlatinum === bPlatinum) {
      return (b.timestamp || 0) - (a.timestamp || 0);
    }
    
    // –ü—Ä–∏–º–µ–Ω—è–µ–º 30% –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –¥–ª—è platinum –æ–±—ä—è–≤–ª–µ–Ω–∏–π
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª—É—á–∞–π–Ω–æ–µ —á–∏—Å–ª–æ –æ—Ç 0 –¥–æ 1
    const random = Math.random();
    
    if (aPlatinum && !bPlatinum) {
      // –ï—Å–ª–∏ a - platinum, –∞ b - –æ–±—ã—á–Ω–æ–µ, —Ç–æ a –∏–º–µ–µ—Ç 30% —à–∞–Ω—Å –±—ã—Ç—å –≤—ã—à–µ
      return random < 0.3 ? -1 : 1;
    } else if (!aPlatinum && bPlatinum) {
      // –ï—Å–ª–∏ a - –æ–±—ã—á–Ω–æ–µ, –∞ b - platinum, —Ç–æ b –∏–º–µ–µ—Ç 30% —à–∞–Ω—Å –±—ã—Ç—å –≤—ã—à–µ
      return random < 0.3 ? 1 : -1;
    }
    
    // Fallback - —Å–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ
    return (b.timestamp || 0) - (a.timestamp || 0);
  });
  
  // –£–Ω–∏–∫–∞–ª—å–Ω—ã–µ ID (–Ω–∞ —Å–ª—É—á–∞–π –¥—É–±–ª–µ–π –≤ –∏—Å—Ç–æ—á–Ω–∏–∫–µ)
  const uniqueList = Array.from(new Set(sortedListings.map(l => l.id)));

  users[uid].feed = {
    list: uniqueList,
    index: keepPosition ? (current.index || 0) : 0,
    filters: filters || {},
    seen: keepPosition ? (current.seen || []) : [],
    seenByContent: keepPosition ? (current.seenByContent || []) : []
  };
  
  // –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ seenByContent –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
  if (!Array.isArray(users[uid].feed.seenByContent)) {
    users[uid].feed.seenByContent = [];
  }
  users[uid].session = null; // exit any text capture
  await writeUsers(users);

  if (filtered.length === 0) {
    await bot.sendMessage(chatId, '–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ –≤–∞—à–∏–º –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º.', {
      reply_markup: { 
        keyboard: [[{ text: 'üí§' }]], 
        resize_keyboard: true,
        remove_keyboard: false
      }
    });
    return;
  }
  const first = listings.find(l => l.id === users[uid].feed.list[users[uid].feed.index]);
  const ownerOnly = !!(users[uid].feed && users[uid].feed.filters && users[uid].feed.filters.ownerOnly);
  await sendListingCard(bot, chatId, first, ownerOnly);
  await feedControls.applyFromState(bot, chatId, users, uid);
  // –ü–æ–º–µ—á–∞–µ–º –ø–æ–∫–∞–∑–∞–Ω–Ω–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –∫–∞–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω–æ–µ
  const feedAfterSend = users[uid].feed || {};
  feedAfterSend.seen = Array.isArray(feedAfterSend.seen) ? feedAfterSend.seen : [];
  if (first && !feedAfterSend.seen.includes(first.id)) feedAfterSend.seen.push(first.id);
  
  // –ü–æ–º–µ—á–∞–µ–º –ø–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º—É (—Ç–æ–ª—å–∫–æ –¥–ª—è –æ–¥–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è)
  if (first) {
    const contentKey = `${first.userId}_${first.title}_${first.style}_${first.price}_${first.description}_${(first.photos && first.photos[0]) || ''}`;
    feedAfterSend.seenByContent = Array.isArray(feedAfterSend.seenByContent) ? feedAfterSend.seenByContent : [];
    if (!feedAfterSend.seenByContent.includes(contentKey)) {
      feedAfterSend.seenByContent.push(contentKey);
    }
  }
  
  users[uid].feed = feedAfterSend;
  await writeUsers(users);
}

// –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –≤—ã–∑–æ–≤–æ–≤ showNextInFeed
const activeShowNextCalls = new Set();

async function showNextInFeed(bot, userId, chatId) {
  const uid = String(userId);
  
  // –ó–∞—â–∏—Ç–∞ –æ—Ç –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –≤—ã–∑–æ–≤–æ–≤
  if (activeShowNextCalls.has(uid)) {
    console.log('üîç [DEBUG] –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–æ–≤—Ç–æ—Ä–Ω—ã–π –≤—ã–∑–æ–≤ showNextInFeed –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', uid);
    return;
  }
  
  activeShowNextCalls.add(uid);
  
  try {
    const users = await readUsers();
    const listings = await readListings();
    const feed = users[uid] && users[uid].feed ? users[uid].feed : null;
    if (!feed || !Array.isArray(feed.list) || feed.list.length === 0) {
      await bot.sendMessage(chatId, '–õ–µ–Ω—Ç–∞ –ø—É—Å—Ç–∞. –í–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –º–µ–Ω—é –∏ –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.', mainMenuKeyboard());
      return;
    }
  const seen = Array.isArray(feed.seen) ? new Set(feed.seen) : new Set();
  console.log('üîç [DEBUG] showNextInFeed - —Ç–µ–∫—É—â–∏–π seen:', Array.from(seen));
  console.log('üîç [DEBUG] showNextInFeed - —Ç–µ–∫—É—â–∏–π –∏–Ω–¥–µ–∫—Å:', feed.index);
  console.log('üîç [DEBUG] showNextInFeed - –≤—Å–µ–≥–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–π –≤ –ª–µ–Ω—Ç–µ:', feed.list.length);
  
  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ –∫–ª—é—á–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ (—Ç–æ–ª—å–∫–æ –¥–ª—è –æ–¥–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è)
  const getListingContentKey = (listing) => {
    if (!listing) return null;
    // –í–∫–ª—é—á–∞–µ–º userId —á—Ç–æ–±—ã –Ω–µ —Å–∫—Ä—ã–≤–∞—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏—è –æ—Ç —Ä–∞–∑–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    return `${listing.userId}_${listing.title}_${listing.style}_${listing.price}_${listing.description}_${(listing.photos && listing.photos[0]) || ''}`;
  };
  
  // –°–æ–∑–¥–∞–µ–º Set –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π –ø–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º—É
  const seenByContent = new Set();
  if (Array.isArray(feed.seenByContent)) {
    feed.seenByContent.forEach(key => seenByContent.add(key));
  } else {
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º seenByContent –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
    feed.seenByContent = [];
  }
  // –†–µ—Ñ–∏–ª—å—Ç—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –Ω–∞ –ª–µ—Ç—É –ø–æ –∞–∫—Ç—É–∞–ª—å–Ω—ã–º –¥–∞–Ω–Ω—ã–º
  console.log('üîç [DEBUG] –†–µ—Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è - –≤—Å–µ–≥–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–π –≤ –±–∞–∑–µ:', listings.length);
  console.log('üîç [DEBUG] –†–µ—Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è - —Ñ–∏–ª—å—Ç—Ä—ã:', feed.filters);
  console.log('üîç [DEBUG] –†–µ—Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è - —Ç–µ–∫—É—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å (uid):', uid);
  
  // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —Ä–µ—Ñ–∏–ª—å—Ç—Ä—É–µ–º –≤—Å–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è
  const refiltered = listings.filter((l) => {
    console.log('üîç [DEBUG] –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—ä—è–≤–ª–µ–Ω–∏–µ:', l.id, 'userId:', l.userId, 'style:', l.style);
    
    if (feed.filters && feed.filters.ownerOnly) {
      if (String(l.userId) !== uid) {
        console.log('üîç [DEBUG] –ò—Å–∫–ª—é—á–µ–Ω–æ - ownerOnly, –Ω–µ –Ω–∞—à –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å');
        return false;
      }
    } else {
      if (String(l.userId) === uid) {
        console.log('üîç [DEBUG] –ò—Å–∫–ª—é—á–µ–Ω–æ - —Å–≤–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å (userId:', l.userId, '=== uid:', uid, ')');
        return false;
      } else {
        console.log('üîç [DEBUG] –ù–ï —Å–≤–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å (userId:', l.userId, '!== uid:', uid, ')');
      }
    }
    if (feed.filters && feed.filters.style) {
      const s = String(feed.filters.style).toLowerCase().trim();
      const listingStyle = (l.style || '').toLowerCase().trim();
      
      console.log('üîç [DEBUG] –§–∏–ª—å—Ç—Ä –ø–æ —Å—Ç–∏–ª—é - –∏—â–µ–º:', s, '—É –æ–±—ä—è–≤–ª–µ–Ω–∏—è:', listingStyle);
      
      // –ï—Å–ª–∏ –≤—ã–±—Ä–∞–ª–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —Å—Ç–∏–ª—å - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –æ–±—ä—è–≤–ª–µ–Ω–∏—è —Å —ç—Ç–∏–º —Å—Ç–∏–ª–µ–º
      if (s === '–¥—Ä—É–≥–æ–µ') {
        // –ï—Å–ª–∏ –≤—ã–±—Ä–∞–ª–∏ "–¥—Ä—É–≥–æ–µ" - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –í–°–ï –æ–±—ä—è–≤–ª–µ–Ω–∏—è (–Ω–µ —Ñ–∏–ª—å—Ç—Ä—É–µ–º –ø–æ —Å—Ç–∏–ª—é)
        console.log('üîç [DEBUG] –§–∏–ª—å—Ç—Ä "–î—Ä—É–≥–æ–µ" - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è');
      } else {
        // –ï—Å–ª–∏ –≤—ã–±—Ä–∞–ª–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —Å—Ç–∏–ª—å (–Ω–∞–ø—Ä–∏–º–µ—Ä, "–∞—Ä—Ö–∏–≤") - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±—ä—è–≤–ª–µ–Ω–∏—è —Å —ç—Ç–∏–º —Å—Ç–∏–ª–µ–º –ò "–¥—Ä—É–≥–æ–µ"
        if (listingStyle !== s && listingStyle !== '–¥—Ä—É–≥–æ–µ') {
          console.log('üîç [DEBUG] –ò—Å–∫–ª—é—á–µ–Ω–æ - –Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç –ø–æ —Å—Ç–∏–ª—é (–∏—â–µ–º:', s, '—É –æ–±—ä—è–≤–ª–µ–Ω–∏—è:', listingStyle, ')');
          return false;
        }
        console.log('üîç [DEBUG] –§–∏–ª—å—Ç—Ä', s, '- –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±—ä—è–≤–ª–µ–Ω–∏—è —Å–æ —Å—Ç–∏–ª–µ–º', s, '–∏ "–¥—Ä—É–≥–æ–µ"');
      }
    }
    
    // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –ø–æ–ª—É
    if (feed.filters && feed.filters.gender) {
      const filterGender = String(feed.filters.gender).toLowerCase().trim();
      const listingGender = String(l.gender || '').toLowerCase().trim();
      console.log('üîç [DEBUG] –§–∏–ª—å—Ç—Ä –ø–æ –ø–æ–ª—É - –∏—â–µ–º:', filterGender, '—É –æ–±—ä—è–≤–ª–µ–Ω–∏—è:', listingGender, '—Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ:', filterGender === listingGender);
      if (filterGender !== listingGender) {
        console.log('üîç [DEBUG] –ò—Å–∫–ª—é—á–µ–Ω–æ - –Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç –ø–æ –ø–æ–ª—É');
        return false;
      }
    }
    
    if (feed.filters && feed.filters.q) {
      const q = String(feed.filters.q).toLowerCase();
      const title = String(l.title || '').toLowerCase();
      const desc = String(l.description || '').toLowerCase();
      if (!title.includes(q) && !desc.includes(q)) return false;
    }
    if (feed.filters && typeof feed.filters.maxPrice !== 'undefined') {
      const pStr = String(l.price || '').replace(/\s+/g, '').replace(',', '.');
      const p = parseFloat(pStr);
      const maxP = parseFloat(String(feed.filters.maxPrice));
      if (Number.isFinite(maxP)) {
        if (!Number.isFinite(p) || p > maxP) return false;
      }
    }
    console.log('üîç [DEBUG] –û–±—ä—è–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—à–ª–æ –≤—Å–µ —Ñ–∏–ª—å—Ç—Ä—ã:', l.id);
    return true;
  });
  console.log('üîç [DEBUG] –ü–æ—Å–ª–µ —Ä–µ—Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –æ—Å—Ç–∞–ª–æ—Å—å –æ–±—ä—è–≤–ª–µ–Ω–∏–π:', refiltered.length);
  feed.list = Array.from(new Set(refiltered.map(l => l.id)));
  console.log('üîç [DEBUG] –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö ID –≤ –ª–µ–Ω—Ç–µ:', feed.list.length);
  
  // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∏–Ω–¥–µ–∫—Å –µ—Å–ª–∏ –ª–µ–Ω—Ç–∞ –∏–∑–º–µ–Ω–∏–ª–∞—Å—å
  if (feed.index >= feed.list.length) {
    feed.index = 0;
    console.log('üîç [DEBUG] –°–±—Ä–æ—Å–∏–ª–∏ –∏–Ω–¥–µ–∫—Å –¥–æ 0, —Ç–∞–∫ –∫–∞–∫ –ª–µ–Ω—Ç–∞ –∏–∑–º–µ–Ω–∏–ª–∞—Å—å');
  }

  let guard = 0;
  let listing;
  let startIndex = feed.index;
  let foundNew = false;
  
  do {
    if (feed.list.length === 0) break;
    feed.index = (feed.index + 1) % feed.list.length;
    listing = listings.find(l => l.id === feed.list[feed.index]);
    guard++;
    console.log('üîç [DEBUG] –ü—Ä–æ–≤–µ—Ä—è–µ–º listing ID:', listing ? listing.id : 'null', 'seen?', listing ? seen.has(listing.id) : 'N/A');
    if (!listing) continue;
    if (feed.filters && feed.filters.ownerOnly && String(listing.userId) !== String(userId)) continue;
    
    // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã –ø–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º—É –æ—Ç –æ–¥–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const contentKey = getListingContentKey(listing);
    if (contentKey && seenByContent.has(contentKey)) {
      console.log('üîç [DEBUG] –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç –ø–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º—É:', listing.id, 'contentKey:', contentKey);
      continue;
    }
    
    // –ó–∞—Ç–µ–º –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ ID
    if (seen.has(listing.id)) {
      console.log('üîç [DEBUG] –ü—Ä–æ–ø—É—Å–∫–∞–µ–º, —É–∂–µ –≤ seen:', listing.id);
      continue;
    }
    console.log('üîç [DEBUG] –ù–∞—à–ª–∏ –Ω–æ–≤–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ:', listing.id);
    foundNew = true;
    break;
  } while (guard <= feed.list.length + 1);
  
  // –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –Ω–æ–≤–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ, –ø—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø—Ä–æ—à–ª–∏ –ª–∏ –º—ã –ø–æ–ª–Ω—ã–π –∫—Ä—É–≥
  if (!foundNew) {
    console.log('üîç [DEBUG] –ù–µ –Ω–∞—à–ª–∏ –Ω–æ–≤–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ, –ª–µ–Ω—Ç–∞ –∑–∞–∫–æ–Ω—á–∏–ª–∞—Å—å');
    listing = null;
  }

  if (!listing) {
    // –ï—Å–ª–∏ –≤—Å–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω—ã, –ø—Ä–æ—Å—Ç–æ —Å–æ–æ–±—â–∞–µ–º –æ–± —ç—Ç–æ–º
    console.log('üîç [DEBUG] –í—Å–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω—ã, –ª–µ–Ω—Ç–∞ –∑–∞–∫–æ–Ω—á–∏–ª–∞—Å—å');
    await bot.sendMessage(chatId, 'üì≠ –õ–µ–Ω—Ç–∞ –∑–∞–∫–æ–Ω—á–∏–ª–∞—Å—å! –í—Å–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω—ã.', feedReplyKeyboard(false));
    return;
  }

  // –ï—Å–ª–∏ –≤ –ª–µ–Ω—Ç–µ —Ç–æ–ª—å–∫–æ –æ–¥–Ω–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –∏ –æ–Ω–æ —É–∂–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–æ, —Å–æ–æ–±—â–∞–µ–º –æ–± –æ–∫–æ–Ω—á–∞–Ω–∏–∏
  if (feed.list.length === 1 && seen.has(feed.list[0])) {
    console.log('üîç [DEBUG] –í –ª–µ–Ω—Ç–µ —Ç–æ–ª—å–∫–æ –æ–¥–Ω–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –∏ –æ–Ω–æ —É–∂–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–æ, –ª–µ–Ω—Ç–∞ –∑–∞–∫–æ–Ω—á–∏–ª–∞—Å—å');
    await bot.sendMessage(chatId, 'üì≠ –õ–µ–Ω—Ç–∞ –∑–∞–∫–æ–Ω—á–∏–ª–∞—Å—å! –í—Å–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω—ã.', feedReplyKeyboard(false));
    return;
  }

  const ownerOnly = !!(feed.filters && feed.filters.ownerOnly);
  await sendListingCard(bot, chatId, listing, ownerOnly);
  
  // –ü–µ—Ä–µ—á–∏—Ç—ã–≤–∞–µ–º users, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ seen
  const freshUsers = await readUsers();
  const freshFeed = freshUsers[uid] && freshUsers[uid].feed ? freshUsers[uid].feed : feed;
  
  await feedControls.applyFromState(bot, chatId, freshUsers, uid);
  // –ü–æ–º–µ—Ç–∏—Ç—å –∫–∞–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω–æ–µ
  freshFeed.seen = Array.isArray(freshFeed.seen) ? freshFeed.seen : [];
  if (!freshFeed.seen.includes(listing.id)) {
    freshFeed.seen.push(listing.id);
    console.log('üîç [DEBUG] –î–æ–±–∞–≤–∏–ª–∏ –≤ seen –ø–æ—Å–ª–µ –ø–æ–∫–∞–∑–∞:', listing.id);
  }
  
  // –ü–æ–º–µ—Ç–∏—Ç—å –ø–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º—É (—Ç–æ–ª—å–∫–æ –¥–ª—è –æ–¥–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è)
  const contentKey = getListingContentKey(listing);
  if (contentKey) {
    freshFeed.seenByContent = Array.isArray(freshFeed.seenByContent) ? freshFeed.seenByContent : [];
    if (!freshFeed.seenByContent.includes(contentKey)) {
      freshFeed.seenByContent.push(contentKey);
      console.log('üîç [DEBUG] –î–æ–±–∞–≤–∏–ª–∏ –≤ seenByContent –ø–æ—Å–ª–µ –ø–æ–∫–∞–∑–∞:', contentKey);
    }
  }
  
  // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω–¥–µ–∫—Å –Ω–∞ –Ω–∞–π–¥–µ–Ω–Ω–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ
  freshFeed.index = feed.index;
  freshUsers[uid].feed = freshFeed;
  await writeUsers(freshUsers);
  console.log('üîç [DEBUG] –°–æ—Ö—Ä–∞–Ω–∏–ª–∏ seen –ø–æ—Å–ª–µ –ø–æ–∫–∞–∑–∞:', freshFeed.seen);
  console.log('üîç [DEBUG] –°–æ—Ö—Ä–∞–Ω–∏–ª–∏ seenByContent –ø–æ—Å–ª–µ –ø–æ–∫–∞–∑–∞:', freshFeed.seenByContent);
  console.log('üîç [DEBUG] –¢–µ–∫—É—â–∏–π –∏–Ω–¥–µ–∫—Å –ø–æ—Å–ª–µ –ø–æ–∫–∞–∑–∞:', freshFeed.index);
  
  } finally {
    // –£–±–∏—Ä–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –∞–∫—Ç–∏–≤–Ω—ã—Ö –≤—ã–∑–æ–≤–æ–≤
    activeShowNextCalls.delete(uid);
  }
}

async function askFeedParams(bot, userId, chatId) {
  const users = await readUsers();
  const uid = String(userId);
  users[uid] = users[uid] || { profile: {} };
  
  // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –æ–±—Ä–∞—â–µ–Ω–∏–∏
  if (!users[uid].profile.username) {
    // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è, –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω—ã
    const userInfo = await bot.getChat(userId).catch(() => null);
    if (userInfo) {
      users[uid].profile.username = userInfo.username || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
      users[uid].profile.firstName = userInfo.first_name || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
    }
  }
  
  users[uid].session = { flow: 'feed_params', step: 'ask', filters: (users[uid].feed && users[uid].feed.filters) || {} };
  await writeUsers(users);
  await bot.sendMessage(chatId, '–î–æ–±–∞–≤—å—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã (–ø—Ä–∏–º–µ—Ä: "—Å—Ç–∏–ª—å –∞—Ä—Ö–∏–≤").');
}

async function handleListingYes(bot, from, chatId, listingId) {
  const listings = await readListings();
  const listing = listings.find(l => String(l.id) === String(listingId));
  if (!listing) return bot.sendMessage(chatId, '–û–±—ä—è–≤–ª–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.');

  const buyer = from.username ? `@${from.username}` : (from.first_name || String(from.id));
  const seller = listing.username || String(listing.userId);

  // –ù–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–Ω—Ç–∞–∫—Ç, –µ—Å–ª–∏ —ç—Ç–æ —Å–≤–æ—ë –æ–±—ä—è–≤–ª–µ–Ω–∏–µ
  if (String(listing.userId) === String(from.id)) {
    await bot.sendMessage(chatId, '–≠—Ç–æ –≤–∞—à–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ.', mainMenuKeyboard());
    return;
  }

  await bot.sendMessage(chatId, `–°—É–ø–µ—Ä! –°–≤—è–∂–∏—Ç–µ—Å—å —Å –ø—Ä–æ–¥–∞–≤—Ü–æ–º: ${seller}`);
  // Notify seller (if bot can DM them)
  try {
    await bot.sendMessage(listing.userId, `–ü–æ–∫—É–ø–∞—Ç–µ–ª—å ${buyer} –∑–∞–∏–Ω—Ç–µ—Ä–µ—Å–æ–≤–∞–Ω –≤ –≤–∞—à–µ–º —Ç–æ–≤–∞—Ä–µ: "${listing.title}".`);
  } catch (_) {}
}


// Handle style selection during sell flow
// We reuse callback handler above for style: set listing style when in sell flow
// Extend callback handling by intercepting style selection while session.flow === 'sell'

// –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å–Ω–∞ (—Å –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–º —Å–Ω—è—Ç–∏–µ–º —Å—Ç–∞—Ä–æ–π)
async function setSleepKeyboard(bot, chatId) {
  try { await bot.sendMessage(chatId, '\u200B', { reply_markup: { remove_keyboard: true } }); } catch (_) {}
  try { await new Promise((r) => setTimeout(r, 80)); } catch(_) {}
  try { await bot.sendMessage(chatId, '\u200B', feedReplyKeyboard(true)); } catch (_) {}
}

// ===== –ú–æ–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è: –º–µ–Ω—é, –ø—Ä–æ—Å–º–æ—Ç—Ä, —É–¥–∞–ª–µ–Ω–∏–µ =====
async function showMyListingsMenu(bot, userId, chatId, page = 0) {
  const listings = await readListings();
  const mine = listings.filter(l => String(l.userId) === String(userId));
  const pageSize = 10;
  const totalPages = Math.max(1, Math.ceil(mine.length / pageSize));
  const safePage = Math.min(Math.max(0, page), totalPages - 1);
  const start = safePage * pageSize;
  const slice = mine.slice(start, start + pageSize);

  const rows = slice.map(l => [{ text: l.title || '(–±–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è)', callback_data: `my_view:${l.id}` }]);
  const nav = [];
  if (safePage > 0) nav.push({ text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data: `my_list:${safePage - 1}` });
  if (safePage < totalPages - 1) nav.push({ text: '–í–ø–µ—Ä—ë–¥ ‚û°Ô∏è', callback_data: `my_list:${safePage + 1}` });
  if (nav.length) rows.push(nav);

  await bot.sendMessage(chatId, `–í–∞—à–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è (${mine.length})`, { reply_markup: { inline_keyboard: rows } });
  // –ü–æ—Å—Ç–∞–≤–∏–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π —Å–Ω–∞ –ü–û–°–õ–ï –∫–æ–Ω—Ç–µ–Ω—Ç–∞, —á—Ç–æ–±—ã –æ–Ω–∞ —Å—Ç–∞–ª–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–π
  await setSleepKeyboard(bot, chatId);
}

async function showMyListing(bot, userId, chatId, listingId) {
  const listings = await readListings();
  const l = listings.find(x => String(x.id) === String(listingId) && String(x.userId) === String(userId));
  if (!l) { await bot.sendMessage(chatId, '–û–±—ä—è–≤–ª–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.'); return; }
  const caption = formatListingCaption(l);
  const kb = { 
    reply_markup: { 
      inline_keyboard: [
        [{ text: '‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ', callback_data: `my_edit:${l.id}` }],
        [{ text: 'üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ', callback_data: `my_del:${l.id}` }],
        [{ text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É', callback_data: 'my_list:0' }]
      ] 
    } 
  };
  if (Array.isArray(l.photos) && l.photos.length > 0) {
    try { await bot.sendPhoto(chatId, l.photos[0], { caption, ...kb }); return; } catch (_) {}
  }
  await bot.sendMessage(chatId, caption, kb);
  await setSleepKeyboard(bot, chatId);
}

async function deleteMyListing(bot, userId, chatId, listingId) {
  const listings = await readListings();
  const idx = listings.findIndex(x => String(x.id) === String(listingId) && String(x.userId) === String(userId));
  if (idx === -1) { await bot.sendMessage(chatId, '–û–±—ä—è–≤–ª–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∏–ª–∏ —É–∂–µ —É–¥–∞–ª–µ–Ω–æ.'); return; }
  listings.splice(idx, 1);
  await writeListings(listings);
  await bot.sendMessage(chatId, '–û–±—ä—è–≤–ª–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ ‚úÖ');
  await showMyListingsMenu(bot, userId, chatId, 0);
}

async function editMyListing(bot, userId, chatId, listingId) {
  const listings = await readListings();
  const listing = listings.find(x => String(x.id) === String(listingId) && String(x.userId) === String(userId));
  if (!listing) { 
    await bot.sendMessage(chatId, '–û–±—ä—è–≤–ª–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.'); 
    return; 
  }

  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
  const kb = {
    reply_markup: {
      inline_keyboard: [
        [{ text: 'üìù –ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ', callback_data: `edit_title:${listingId}` }],
        [{ text: 'üí∞ –ò–∑–º–µ–Ω–∏—Ç—å —Ü–µ–Ω—É', callback_data: `edit_price:${listingId}` }],
        [{ text: 'üìÑ –ò–∑–º–µ–Ω–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ', callback_data: `edit_description:${listingId}` }],
        [{ text: 'üì∏ –ò–∑–º–µ–Ω–∏—Ç—å —Ñ–æ—Ç–æ', callback_data: `edit_photos:${listingId}` }],
        [{ text: 'üë§ –ò–∑–º–µ–Ω–∏—Ç—å –ø–æ–ª', callback_data: `edit_gender:${listingId}` }],
        [{ text: 'üé® –ò–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∏–ª—å', callback_data: `edit_style:${listingId}` }],
        [{ text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –æ–±—ä—è–≤–ª–µ–Ω–∏—é', callback_data: `my_view:${listingId}` }]
      ]
    }
  };

  await bot.sendMessage(chatId, 
    '‚úèÔ∏è **–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è**\n\n' +
    '–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å:',
    { parse_mode: 'Markdown', ...kb }
  );
}

async function startEditField(bot, userId, chatId, listingId, field) {
  const listings = await readListings();
  const listing = listings.find(x => String(x.id) === String(listingId) && String(x.userId) === String(userId));
  if (!listing) { 
    await bot.sendMessage(chatId, '–û–±—ä—è–≤–ª–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.'); 
    return; 
  }

  // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –≤ —Å–µ—Å—Å–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  const users = await readUsers();
  const uid = String(userId);
  users[uid] = users[uid] || { profile: {}, platinum: false };
  users[uid].editingListing = { id: listingId, field: field };
  await writeUsers(users);

  let message = '';
  let keyboard = null;

  switch (field) {
    case 'title':
      message = 'üìù **–ò–∑–º–µ–Ω–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è**\n\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:';
      break;
    case 'price':
      message = 'üí∞ **–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–Ω—ã**\n\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Ü–µ–Ω—É (—Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ, –Ω–∞–ø—Ä–∏–º–µ—Ä: 1500):';
      break;
    case 'description':
      message = 'üìÑ **–ò–∑–º–µ–Ω–µ–Ω–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è**\n\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:';
      break;
    case 'photos':
      message = 'üì∏ **–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ñ–æ—Ç–æ**\n\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—ã–µ —Ñ–æ—Ç–æ —Ç–æ–≤–∞—Ä–∞ (1-5 —à—Ç—É–∫). –ö–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—Ç–µ ‚Äî –Ω–∞–∂–º–∏—Ç–µ ¬´–ì–æ—Ç–æ–≤–æ¬ª.';
      keyboard = { reply_markup: { keyboard: [[{ text: '‚úÖ –ì–æ—Ç–æ–≤–æ' }]], resize_keyboard: true } };
      break;
    case 'gender':
      message = 'üë§ **–ò–∑–º–µ–Ω–µ–Ω–∏–µ –ø–æ–ª–∞**\n\n–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª:';
      keyboard = {
        reply_markup: {
          inline_keyboard: [
            [{ text: 'üë® –ú—É–∂—Å–∫–æ–π', callback_data: `edit_gender_set:${listingId}:male` }],
            [{ text: 'üë© –ñ–µ–Ω—Å–∫–∏–π', callback_data: `edit_gender_set:${listingId}:female` }]
          ]
        }
      };
      break;
    case 'style':
      message = 'üé® **–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∏–ª—è**\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∏–ª—å:';
      keyboard = {
        reply_markup: {
          inline_keyboard: [
            [{ text: '–ê—Ä—Ö–∏–≤', callback_data: `edit_style_set:${listingId}:–∞—Ä—Ö–∏–≤` }],
            [{ text: '–ö–µ–∂—É–∞–ª', callback_data: `edit_style_set:${listingId}:–∫–µ–∂—É–∞–ª` }],
            [{ text: 'Old money', callback_data: `edit_style_set:${listingId}:old money` }],
            [{ text: '–°—Ç—Ä–∏—Ç–≤–∏—Ä', callback_data: `edit_style_set:${listingId}:—Å—Ç—Ä–∏—Ç–≤–∏—Ä` }],
            [{ text: '–î—Ä—É–≥–æ–µ', callback_data: `edit_style_set:${listingId}:–¥—Ä—É–≥–æ–µ` }]
          ]
        }
      };
      break;
  }

  await bot.sendMessage(chatId, message, { 
    parse_mode: 'Markdown', 
    ...(keyboard || {}) 
  });
}

async function updateListingField(bot, userId, chatId, listingId, field, value) {
  const listings = await readListings();
  const listing = listings.find(x => String(x.id) === String(listingId) && String(x.userId) === String(userId));
  if (!listing) { 
    await bot.sendMessage(chatId, '–û–±—ä—è–≤–ª–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.'); 
    return; 
  }

  // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª–µ
  listing[field] = value;
  await writeListings(listings);

  // –û—á–∏—â–∞–µ–º —Å–µ—Å—Å–∏—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
  const users = await readUsers();
  const uid = String(userId);
  if (users[uid] && users[uid].editingListing) {
    delete users[uid].editingListing;
    await writeUsers(users);
  }

  await bot.sendMessage(chatId, `‚úÖ –ü–æ–ª–µ "${field}" —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!`);
  await showMyListing(bot, userId, chatId, listingId);
}

// ===== –§—É–Ω–∫—Ü–∏–∏ –ø–æ–∏—Å–∫–∞ –∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤ =====

// –ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –ø–æ–∏—Å–∫–∞
async function showSearchMenu(bot, chatId) {
  const keyboard = {
    reply_markup: {
      inline_keyboard: [
        [{ text: 'üîç –ü–æ–∏—Å–∫ –ø–æ —Ç–µ–∫—Å—Ç—É', callback_data: 'search_text' }],
        [{ text: 'üéØ –§–∏–ª—å—Ç—Ä—ã', callback_data: 'search_filters' }],
        [{ text: 'üì∞ –õ–µ–Ω—Ç–∞ —Å —Ñ–∏–ª—å—Ç—Ä–∞–º–∏', callback_data: 'search_feed' }],
        [{ text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é', callback_data: 'go_menu' }]
      ]
    }
  };
  
  await bot.sendMessage(chatId, 
    'üîç **–ü–æ–∏—Å–∫ –∏ —Ñ–∏–ª—å—Ç—Ä—ã**\n\n' +
    '–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –ø–æ–∏—Å–∫–∞:',
    { parse_mode: 'Markdown', ...keyboard }
  );
}

// –ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é —Ñ–∏–ª—å—Ç—Ä–æ–≤
async function showFiltersMenu(bot, chatId, userId) {
  const users = await readUsers();
  const uid = String(userId);
  const userFilters = users[uid]?.searchFilters || {};
  
  const keyboard = {
    reply_markup: {
      inline_keyboard: [
        [{ text: 'üë§ –ü–æ–ª', callback_data: 'filter_gender' }],
        [{ text: 'üé® –°—Ç–∏–ª—å', callback_data: 'filter_style' }],
        [{ text: 'üëï –ö–∞—Ç–µ–≥–æ—Ä–∏—è', callback_data: 'filter_category' }],
        [{ text: 'üí∞ –¶–µ–Ω–∞', callback_data: 'filter_price' }],
        [{ text: 'üè∑Ô∏è –ë—Ä–µ–Ω–¥', callback_data: 'filter_brand' }],
        [{ text: 'üîÑ –°–±—Ä–æ—Å–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã', callback_data: 'filter_reset' }],
        [{ text: '‚úÖ –ü—Ä–∏–º–µ–Ω–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã', callback_data: 'filter_apply' }],
        [{ text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data: 'search_menu' }]
      ]
    }
  };
  
  let message = 'üéØ **–§–∏–ª—å—Ç—Ä—ã –ø–æ–∏—Å–∫–∞**\n\n';
  
  if (userFilters.gender) {
    message += `üë§ –ü–æ–ª: ${userFilters.gender === 'male' ? '–ú—É–∂—Å–∫–æ–π' : '–ñ–µ–Ω—Å–∫–∏–π'}\n`;
  }
  if (userFilters.style) {
    message += `üé® –°—Ç–∏–ª—å: ${userFilters.style}\n`;
  }
  if (userFilters.category) {
    message += `üëï –ö–∞—Ç–µ–≥–æ—Ä–∏—è: ${userFilters.category}\n`;
  }
  if (userFilters.minPrice || userFilters.maxPrice) {
    message += `üí∞ –¶–µ–Ω–∞: ${userFilters.minPrice || '0'} - ${userFilters.maxPrice || '‚àû'} ‚ÇΩ\n`;
  }
  if (userFilters.brand) {
    message += `üè∑Ô∏è –ë—Ä–µ–Ω–¥: ${userFilters.brand}\n`;
  }
  
  if (!userFilters.gender && !userFilters.style && !userFilters.category && 
      !userFilters.minPrice && !userFilters.maxPrice && !userFilters.brand) {
    message += '–§–∏–ª—å—Ç—Ä—ã –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã';
  }
  
  await bot.sendMessage(chatId, message, { parse_mode: 'Markdown', ...keyboard });
}

// –ü–æ–∫–∞–∑–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –æ–¥–µ–∂–¥—ã
async function showCategoryMenu(bot, chatId) {
  const keyboard = {
    reply_markup: {
      inline_keyboard: [
        [{ text: 'üëñ –ë—Ä—é–∫–∏', callback_data: 'category_–±—Ä—é–∫–∏' }],
        [{ text: 'üß• –í–µ—Ä—Ö–Ω—è—è –æ–¥–µ–∂–¥–∞', callback_data: 'category_–≤–µ—Ä—Ö–Ω—è—è –æ–¥–µ–∂–¥–∞' }],
        [{ text: 'üëñ –î–∂–∏–Ω—Å—ã', callback_data: 'category_–¥–∂–∏–Ω—Å—ã' }],
        [{ text: 'üëô –ö—É–ø–∞–ª—å–Ω–∏–∫–∏', callback_data: 'category_–∫—É–ø–∞–ª—å–Ω–∏–∫–∏' }],
        [{ text: 'ü©≤ –ù–∏–∂–Ω–µ–µ –±–µ–ª—å—ë', callback_data: 'category_–Ω–∏–∂–Ω–µ–µ –±–µ–ª—å—ë' }],
        [{ text: 'üëî –ü–∏–¥–∂–∞–∫–∏ –∏ –∫–æ—Å—Ç—é–º—ã', callback_data: 'category_–ø–∏–¥–∂–∞–∫–∏ –∏ –∫–æ—Å—Ç—é–º—ã' }],
        [{ text: 'üëó –ü–ª–∞—Ç—å—è', callback_data: 'category_–ø–ª–∞—Ç—å—è' }],
        [{ text: 'üëï –†—É–±–∞—à–∫–∏ –∏ –±–ª—É–∑–∫–∏', callback_data: 'category_—Ä—É–±–∞—à–∫–∏ –∏ –±–ª—É–∑–∫–∏' }],
        [{ text: 'üíç –°–≤–∞–¥–µ–±–Ω—ã–µ –ø–ª–∞—Ç—å—è', callback_data: 'category_—Å–≤–∞–¥–µ–±–Ω—ã–µ –ø–ª–∞—Ç—å—è' }],
        [{ text: 'üëï –¢–æ–ø—ã –∏ —Ñ—É—Ç–±–æ–ª–∫–∏', callback_data: 'category_—Ç–æ–ø—ã –∏ —Ñ—É—Ç–±–æ–ª–∫–∏' }],
        [{ text: 'üß• –î–∂–µ–º–ø–µ—Ä—ã, —Å–≤–∏—Ç–µ—Ä—ã, –∫–∞—Ä–¥–∏–≥–∞–Ω—ã', callback_data: 'category_–¥–∂–µ–º–ø–µ—Ä—ã, —Å–≤–∏—Ç–µ—Ä—ã, –∫–∞—Ä–¥–∏–≥–∞–Ω—ã' }],
        [{ text: 'üëï –¢–æ–ª—Å—Ç–æ–≤–∫–∏ –∏ —Å–≤–∏—Ç—à–æ—Ç—ã', callback_data: 'category_—Ç–æ–ª—Å—Ç–æ–≤–∫–∏ –∏ —Å–≤–∏—Ç—à–æ—Ç—ã' }],
        [{ text: 'üëó –Æ–±–∫–∏', callback_data: 'category_—é–±–∫–∏' }],
        [{ text: 'üì¶ –î—Ä—É–≥–æ–µ', callback_data: 'category_–¥—Ä—É–≥–æ–µ' }],
        [{ text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data: 'search_filters' }]
      ]
    }
  };
  
  await bot.sendMessage(chatId, 
    'üëï **–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –æ–¥–µ–∂–¥—ã**\n\n' +
    '–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â—É—é –≤–∞—Å –∫–∞—Ç–µ–≥–æ—Ä–∏—é:',
    { parse_mode: 'Markdown', ...keyboard }
  );
}

// –ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é —Ñ–∏–ª—å—Ç—Ä–∞ –ø–æ —Ü–µ–Ω–µ
async function showPriceFilterMenu(bot, chatId) {
  const keyboard = {
    reply_markup: {
      inline_keyboard: [
        [{ text: 'üí∞ –î–æ 1000 ‚ÇΩ', callback_data: 'price_0_1000' }],
        [{ text: 'üí∞ –î–æ 3000 ‚ÇΩ', callback_data: 'price_0_3000' }],
        [{ text: 'üí∞ –î–æ 5000 ‚ÇΩ', callback_data: 'price_0_5000' }],
        [{ text: 'üí∞ –î–æ 10000 ‚ÇΩ', callback_data: 'price_0_10000' }],
        [{ text: 'üí∞ –û—Ç 1000 ‚ÇΩ', callback_data: 'price_1000_999999' }],
        [{ text: 'üí∞ –û—Ç 3000 ‚ÇΩ', callback_data: 'price_3000_999999' }],
        [{ text: 'üí∞ –û—Ç 5000 ‚ÇΩ', callback_data: 'price_5000_999999' }],
        [{ text: 'üìù –£–∫–∞–∑–∞—Ç—å –¥–∏–∞–ø–∞–∑–æ–Ω', callback_data: 'price_custom' }],
        [{ text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data: 'search_filters' }]
      ]
    }
  };
  
  await bot.sendMessage(chatId, 
    'üí∞ **–§–∏–ª—å—Ç—Ä –ø–æ —Ü–µ–Ω–µ**\n\n' +
    '–í—ã–±–µ—Ä–∏—Ç–µ –¥–∏–∞–ø–∞–∑–æ–Ω —Ü–µ–Ω:',
    { parse_mode: 'Markdown', ...keyboard }
  );
}

// –ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é —Ñ–∏–ª—å—Ç—Ä–∞ –ø–æ –±—Ä–µ–Ω–¥—É
async function showBrandFilterMenu(bot, chatId) {
  const keyboard = {
    reply_markup: {
      inline_keyboard: [
        [{ text: 'üè∑Ô∏è Nike', callback_data: 'brand_nike' }],
        [{ text: 'üè∑Ô∏è Adidas', callback_data: 'brand_adidas' }],
        [{ text: 'üè∑Ô∏è Supreme', callback_data: 'brand_supreme' }],
        [{ text: 'üè∑Ô∏è Off-White', callback_data: 'brand_off-white' }],
        [{ text: 'üè∑Ô∏è Balenciaga', callback_data: 'brand_balenciaga' }],
        [{ text: 'üè∑Ô∏è Gucci', callback_data: 'brand_gucci' }],
        [{ text: 'üè∑Ô∏è Louis Vuitton', callback_data: 'brand_louis vuitton' }],
        [{ text: 'üè∑Ô∏è Prada', callback_data: 'brand_prada' }],
        [{ text: 'üè∑Ô∏è Versace', callback_data: 'brand_versace' }],
        [{ text: 'üè∑Ô∏è Stone Island', callback_data: 'brand_stone island' }],
        [{ text: 'üè∑Ô∏è Moncler', callback_data: 'brand_moncler' }],
        [{ text: 'üè∑Ô∏è Canada Goose', callback_data: 'brand_canada goose' }],
        [{ text: 'üìù –£–∫–∞–∑–∞—Ç—å –±—Ä–µ–Ω–¥', callback_data: 'brand_custom' }],
        [{ text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data: 'search_filters' }]
      ]
    }
  };
  
  await bot.sendMessage(chatId, 
    'üè∑Ô∏è **–§–∏–ª—å—Ç—Ä –ø–æ –±—Ä–µ–Ω–¥—É**\n\n' +
    '–í—ã–±–µ—Ä–∏—Ç–µ –±—Ä–µ–Ω–¥ –∏–ª–∏ —É–∫–∞–∂–∏—Ç–µ —Å–≤–æ–π:',
    { parse_mode: 'Markdown', ...keyboard }
  );
}

// –ü—Ä–∏–º–µ–Ω–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã –∏ –ø–æ–∫–∞–∑–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
async function applyFiltersAndShowResults(bot, chatId, userId) {
  const users = await readUsers();
  const uid = String(userId);
  const userFilters = users[uid]?.searchFilters || {};
  
  // –ó–∞–ø—É—Å–∫–∞–µ–º –ª–µ–Ω—Ç—É —Å —Ñ–∏–ª—å—Ç—Ä–∞–º–∏
  await startFeedForUser(bot, userId, chatId, userFilters);
}

// –ü–æ–∏—Å–∫ –ø–æ —Ç–µ–∫—Å—Ç—É
async function startTextSearch(bot, chatId, userId) {
  const users = await readUsers();
  const uid = String(userId);
  users[uid] = users[uid] || { profile: {}, platinum: false };
  users[uid].session = { flow: 'search', step: 'text', temp: {} };
  await writeUsers(users);
  
  await bot.sendMessage(chatId, 
    'üîç **–ü–æ–∏—Å–∫ –ø–æ —Ç–µ–∫—Å—Ç—É**\n\n' +
    '–í–≤–µ–¥–∏—Ç–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞:\n' +
    '‚Ä¢ –ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞\n' +
    '‚Ä¢ –ë—Ä–µ–Ω–¥\n' +
    '‚Ä¢ –û–ø–∏—Å–∞–Ω–∏–µ\n' +
    '‚Ä¢ –õ—é–±—ã–µ –¥—Ä—É–≥–∏–µ —Å–ª–æ–≤–∞',
    { parse_mode: 'Markdown' }
  );
}

